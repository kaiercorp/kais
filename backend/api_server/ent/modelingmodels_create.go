// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingmodels"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModelingModelsCreate is the builder for creating a ModelingModels entity.
type ModelingModelsCreate struct {
	config
	mutation *ModelingModelsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModelingID sets the "modeling_id" field.
func (mmc *ModelingModelsCreate) SetModelingID(i int) *ModelingModelsCreate {
	mmc.mutation.SetModelingID(i)
	return mmc
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mmc *ModelingModelsCreate) SetNillableModelingID(i *int) *ModelingModelsCreate {
	if i != nil {
		mmc.SetModelingID(*i)
	}
	return mmc
}

// SetDataType sets the "data_type" field.
func (mmc *ModelingModelsCreate) SetDataType(s string) *ModelingModelsCreate {
	mmc.mutation.SetDataType(s)
	return mmc
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mmc *ModelingModelsCreate) SetNillableDataType(s *string) *ModelingModelsCreate {
	if s != nil {
		mmc.SetDataType(*s)
	}
	return mmc
}

// SetData sets the "data" field.
func (mmc *ModelingModelsCreate) SetData(s string) *ModelingModelsCreate {
	mmc.mutation.SetData(s)
	return mmc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (mmc *ModelingModelsCreate) SetNillableData(s *string) *ModelingModelsCreate {
	if s != nil {
		mmc.SetData(*s)
	}
	return mmc
}

// SetCreatedAt sets the "created_at" field.
func (mmc *ModelingModelsCreate) SetCreatedAt(t time.Time) *ModelingModelsCreate {
	mmc.mutation.SetCreatedAt(t)
	return mmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mmc *ModelingModelsCreate) SetNillableCreatedAt(t *time.Time) *ModelingModelsCreate {
	if t != nil {
		mmc.SetCreatedAt(*t)
	}
	return mmc
}

// SetID sets the "id" field.
func (mmc *ModelingModelsCreate) SetID(i int) *ModelingModelsCreate {
	mmc.mutation.SetID(i)
	return mmc
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mmc *ModelingModelsCreate) SetModeling(m *Modeling) *ModelingModelsCreate {
	return mmc.SetModelingID(m.ID)
}

// Mutation returns the ModelingModelsMutation object of the builder.
func (mmc *ModelingModelsCreate) Mutation() *ModelingModelsMutation {
	return mmc.mutation
}

// Save creates the ModelingModels in the database.
func (mmc *ModelingModelsCreate) Save(ctx context.Context) (*ModelingModels, error) {
	mmc.defaults()
	return withHooks(ctx, mmc.sqlSave, mmc.mutation, mmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mmc *ModelingModelsCreate) SaveX(ctx context.Context) *ModelingModels {
	v, err := mmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmc *ModelingModelsCreate) Exec(ctx context.Context) error {
	_, err := mmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmc *ModelingModelsCreate) ExecX(ctx context.Context) {
	if err := mmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmc *ModelingModelsCreate) defaults() {
	if _, ok := mmc.mutation.ModelingID(); !ok {
		v := modelingmodels.DefaultModelingID
		mmc.mutation.SetModelingID(v)
	}
	if _, ok := mmc.mutation.DataType(); !ok {
		v := modelingmodels.DefaultDataType
		mmc.mutation.SetDataType(v)
	}
	if _, ok := mmc.mutation.Data(); !ok {
		v := modelingmodels.DefaultData
		mmc.mutation.SetData(v)
	}
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		v := modelingmodels.DefaultCreatedAt()
		mmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmc *ModelingModelsCreate) check() error {
	if _, ok := mmc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "ModelingModels.data_type"`)}
	}
	if _, ok := mmc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "ModelingModels.data"`)}
	}
	if _, ok := mmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ModelingModels.created_at"`)}
	}
	return nil
}

func (mmc *ModelingModelsCreate) sqlSave(ctx context.Context) (*ModelingModels, error) {
	if err := mmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mmc.mutation.id = &_node.ID
	mmc.mutation.done = true
	return _node, nil
}

func (mmc *ModelingModelsCreate) createSpec() (*ModelingModels, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelingModels{config: mmc.config}
		_spec = sqlgraph.NewCreateSpec(modelingmodels.Table, sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mmc.conflict
	if id, ok := mmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mmc.mutation.DataType(); ok {
		_spec.SetField(modelingmodels.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := mmc.mutation.Data(); ok {
		_spec.SetField(modelingmodels.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := mmc.mutation.CreatedAt(); ok {
		_spec.SetField(modelingmodels.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mmc.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingmodels.ModelingTable,
			Columns: []string{modelingmodels.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelingModels.Create().
//		SetModelingID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingModelsUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (mmc *ModelingModelsCreate) OnConflict(opts ...sql.ConflictOption) *ModelingModelsUpsertOne {
	mmc.conflict = opts
	return &ModelingModelsUpsertOne{
		create: mmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmc *ModelingModelsCreate) OnConflictColumns(columns ...string) *ModelingModelsUpsertOne {
	mmc.conflict = append(mmc.conflict, sql.ConflictColumns(columns...))
	return &ModelingModelsUpsertOne{
		create: mmc,
	}
}

type (
	// ModelingModelsUpsertOne is the builder for "upsert"-ing
	//  one ModelingModels node.
	ModelingModelsUpsertOne struct {
		create *ModelingModelsCreate
	}

	// ModelingModelsUpsert is the "OnConflict" setter.
	ModelingModelsUpsert struct {
		*sql.UpdateSet
	}
)

// SetModelingID sets the "modeling_id" field.
func (u *ModelingModelsUpsert) SetModelingID(v int) *ModelingModelsUpsert {
	u.Set(modelingmodels.FieldModelingID, v)
	return u
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingModelsUpsert) UpdateModelingID() *ModelingModelsUpsert {
	u.SetExcluded(modelingmodels.FieldModelingID)
	return u
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingModelsUpsert) ClearModelingID() *ModelingModelsUpsert {
	u.SetNull(modelingmodels.FieldModelingID)
	return u
}

// SetDataType sets the "data_type" field.
func (u *ModelingModelsUpsert) SetDataType(v string) *ModelingModelsUpsert {
	u.Set(modelingmodels.FieldDataType, v)
	return u
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingModelsUpsert) UpdateDataType() *ModelingModelsUpsert {
	u.SetExcluded(modelingmodels.FieldDataType)
	return u
}

// SetData sets the "data" field.
func (u *ModelingModelsUpsert) SetData(v string) *ModelingModelsUpsert {
	u.Set(modelingmodels.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingModelsUpsert) UpdateData() *ModelingModelsUpsert {
	u.SetExcluded(modelingmodels.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelingmodels.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingModelsUpsertOne) UpdateNewValues() *ModelingModelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modelingmodels.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(modelingmodels.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelingModelsUpsertOne) Ignore() *ModelingModelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingModelsUpsertOne) DoNothing() *ModelingModelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingModelsCreate.OnConflict
// documentation for more info.
func (u *ModelingModelsUpsertOne) Update(set func(*ModelingModelsUpsert)) *ModelingModelsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingModelsUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *ModelingModelsUpsertOne) SetModelingID(v int) *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingModelsUpsertOne) UpdateModelingID() *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingModelsUpsertOne) ClearModelingID() *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.ClearModelingID()
	})
}

// SetDataType sets the "data_type" field.
func (u *ModelingModelsUpsertOne) SetDataType(v string) *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingModelsUpsertOne) UpdateDataType() *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *ModelingModelsUpsertOne) SetData(v string) *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingModelsUpsertOne) UpdateData() *ModelingModelsUpsertOne {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ModelingModelsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingModelsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingModelsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelingModelsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelingModelsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelingModelsCreateBulk is the builder for creating many ModelingModels entities in bulk.
type ModelingModelsCreateBulk struct {
	config
	err      error
	builders []*ModelingModelsCreate
	conflict []sql.ConflictOption
}

// Save creates the ModelingModels entities in the database.
func (mmcb *ModelingModelsCreateBulk) Save(ctx context.Context) ([]*ModelingModels, error) {
	if mmcb.err != nil {
		return nil, mmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mmcb.builders))
	nodes := make([]*ModelingModels, len(mmcb.builders))
	mutators := make([]Mutator, len(mmcb.builders))
	for i := range mmcb.builders {
		func(i int, root context.Context) {
			builder := mmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelingModelsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mmcb *ModelingModelsCreateBulk) SaveX(ctx context.Context) []*ModelingModels {
	v, err := mmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmcb *ModelingModelsCreateBulk) Exec(ctx context.Context) error {
	_, err := mmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmcb *ModelingModelsCreateBulk) ExecX(ctx context.Context) {
	if err := mmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelingModels.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingModelsUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (mmcb *ModelingModelsCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelingModelsUpsertBulk {
	mmcb.conflict = opts
	return &ModelingModelsUpsertBulk{
		create: mmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmcb *ModelingModelsCreateBulk) OnConflictColumns(columns ...string) *ModelingModelsUpsertBulk {
	mmcb.conflict = append(mmcb.conflict, sql.ConflictColumns(columns...))
	return &ModelingModelsUpsertBulk{
		create: mmcb,
	}
}

// ModelingModelsUpsertBulk is the builder for "upsert"-ing
// a bulk of ModelingModels nodes.
type ModelingModelsUpsertBulk struct {
	create *ModelingModelsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelingmodels.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingModelsUpsertBulk) UpdateNewValues() *ModelingModelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modelingmodels.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(modelingmodels.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelingModels.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelingModelsUpsertBulk) Ignore() *ModelingModelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingModelsUpsertBulk) DoNothing() *ModelingModelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingModelsCreateBulk.OnConflict
// documentation for more info.
func (u *ModelingModelsUpsertBulk) Update(set func(*ModelingModelsUpsert)) *ModelingModelsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingModelsUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *ModelingModelsUpsertBulk) SetModelingID(v int) *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingModelsUpsertBulk) UpdateModelingID() *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingModelsUpsertBulk) ClearModelingID() *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.ClearModelingID()
	})
}

// SetDataType sets the "data_type" field.
func (u *ModelingModelsUpsertBulk) SetDataType(v string) *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingModelsUpsertBulk) UpdateDataType() *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *ModelingModelsUpsertBulk) SetData(v string) *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingModelsUpsertBulk) UpdateData() *ModelingModelsUpsertBulk {
	return u.Update(func(s *ModelingModelsUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ModelingModelsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ModelingModelsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingModelsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingModelsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
