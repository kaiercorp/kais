// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/project"
	"api_server/ent/userproject"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserProject is the model entity for the UserProject schema.
type UserProject struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// IsUse holds the value of the "is_use" field.
	IsUse bool `json:"is_use,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserProjectQuery when eager-loading is set.
	Edges        UserProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserProjectEdges holds the relations/edges for other nodes in the graph.
type UserProjectEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserProjectEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userproject.FieldIsUse:
			values[i] = new(sql.NullBool)
		case userproject.FieldID, userproject.FieldProjectID:
			values[i] = new(sql.NullInt64)
		case userproject.FieldUsername:
			values[i] = new(sql.NullString)
		case userproject.FieldCreatedAt, userproject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProject fields.
func (up *UserProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userproject.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				up.ProjectID = int(value.Int64)
			}
		case userproject.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				up.Username = value.String
			}
		case userproject.FieldIsUse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_use", values[i])
			} else if value.Valid {
				up.IsUse = value.Bool
			}
		case userproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserProject.
// This includes values selected through modifiers, order, etc.
func (up *UserProject) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the UserProject entity.
func (up *UserProject) QueryProject() *ProjectQuery {
	return NewUserProjectClient(up.config).QueryProject(up)
}

// Update returns a builder for updating this UserProject.
// Note that you need to call UserProject.Unwrap() before calling this method if this UserProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserProject) Update() *UserProjectUpdateOne {
	return NewUserProjectClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserProject) Unwrap() *UserProject {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProject is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserProject) String() string {
	var builder strings.Builder
	builder.WriteString("UserProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", up.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(up.Username)
	builder.WriteString(", ")
	builder.WriteString("is_use=")
	builder.WriteString(fmt.Sprintf("%v", up.IsUse))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserProjects is a parsable slice of UserProject.
type UserProjects []*UserProject
