// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/predicate"
	"api_server/ent/trial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrialUpdate is the builder for updating Trial entities.
type TrialUpdate struct {
	config
	hooks     []Hook
	mutation  *TrialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrialUpdate builder.
func (tu *TrialUpdate) Where(ps ...predicate.Trial) *TrialUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetModelingID sets the "modeling_id" field.
func (tu *TrialUpdate) SetModelingID(i int) *TrialUpdate {
	tu.mutation.SetModelingID(i)
	return tu
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableModelingID(i *int) *TrialUpdate {
	if i != nil {
		tu.SetModelingID(*i)
	}
	return tu
}

// ClearModelingID clears the value of the "modeling_id" field.
func (tu *TrialUpdate) ClearModelingID() *TrialUpdate {
	tu.mutation.ClearModelingID()
	return tu
}

// SetUUID sets the "uuid" field.
func (tu *TrialUpdate) SetUUID(s string) *TrialUpdate {
	tu.mutation.SetUUID(s)
	return tu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableUUID(s *string) *TrialUpdate {
	if s != nil {
		tu.SetUUID(*s)
	}
	return tu
}

// SetState sets the "state" field.
func (tu *TrialUpdate) SetState(s string) *TrialUpdate {
	tu.mutation.SetState(s)
	return tu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableState(s *string) *TrialUpdate {
	if s != nil {
		tu.SetState(*s)
	}
	return tu
}

// SetSavePath sets the "save_path" field.
func (tu *TrialUpdate) SetSavePath(s string) *TrialUpdate {
	tu.mutation.SetSavePath(s)
	return tu
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableSavePath(s *string) *TrialUpdate {
	if s != nil {
		tu.SetSavePath(*s)
	}
	return tu
}

// SetTargetMetric sets the "target_metric" field.
func (tu *TrialUpdate) SetTargetMetric(s string) *TrialUpdate {
	tu.mutation.SetTargetMetric(s)
	return tu
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableTargetMetric(s *string) *TrialUpdate {
	if s != nil {
		tu.SetTargetMetric(*s)
	}
	return tu
}

// SetProgress sets the "progress" field.
func (tu *TrialUpdate) SetProgress(f float64) *TrialUpdate {
	tu.mutation.ResetProgress()
	tu.mutation.SetProgress(f)
	return tu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableProgress(f *float64) *TrialUpdate {
	if f != nil {
		tu.SetProgress(*f)
	}
	return tu
}

// AddProgress adds f to the "progress" field.
func (tu *TrialUpdate) AddProgress(f float64) *TrialUpdate {
	tu.mutation.AddProgress(f)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TrialUpdate) SetUpdatedAt(t time.Time) *TrialUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TrialUpdate) SetNillableUpdatedAt(t *time.Time) *TrialUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TrialUpdate) ClearUpdatedAt() *TrialUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (tu *TrialUpdate) SetModeling(m *Modeling) *TrialUpdate {
	return tu.SetModelingID(m.ID)
}

// Mutation returns the TrialMutation object of the builder.
func (tu *TrialUpdate) Mutation() *TrialMutation {
	return tu.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (tu *TrialUpdate) ClearModeling() *TrialUpdate {
	tu.mutation.ClearModeling()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrialUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrialUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrialUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TrialUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TrialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trial.Table, trial.Columns, sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UUID(); ok {
		_spec.SetField(trial.FieldUUID, field.TypeString, value)
	}
	if value, ok := tu.mutation.State(); ok {
		_spec.SetField(trial.FieldState, field.TypeString, value)
	}
	if value, ok := tu.mutation.SavePath(); ok {
		_spec.SetField(trial.FieldSavePath, field.TypeString, value)
	}
	if value, ok := tu.mutation.TargetMetric(); ok {
		_spec.SetField(trial.FieldTargetMetric, field.TypeString, value)
	}
	if value, ok := tu.mutation.Progress(); ok {
		_spec.SetField(trial.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedProgress(); ok {
		_spec.AddField(trial.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(trial.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(trial.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trial.ModelingTable,
			Columns: []string{trial.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trial.ModelingTable,
			Columns: []string{trial.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrialUpdateOne is the builder for updating a single Trial entity.
type TrialUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModelingID sets the "modeling_id" field.
func (tuo *TrialUpdateOne) SetModelingID(i int) *TrialUpdateOne {
	tuo.mutation.SetModelingID(i)
	return tuo
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableModelingID(i *int) *TrialUpdateOne {
	if i != nil {
		tuo.SetModelingID(*i)
	}
	return tuo
}

// ClearModelingID clears the value of the "modeling_id" field.
func (tuo *TrialUpdateOne) ClearModelingID() *TrialUpdateOne {
	tuo.mutation.ClearModelingID()
	return tuo
}

// SetUUID sets the "uuid" field.
func (tuo *TrialUpdateOne) SetUUID(s string) *TrialUpdateOne {
	tuo.mutation.SetUUID(s)
	return tuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableUUID(s *string) *TrialUpdateOne {
	if s != nil {
		tuo.SetUUID(*s)
	}
	return tuo
}

// SetState sets the "state" field.
func (tuo *TrialUpdateOne) SetState(s string) *TrialUpdateOne {
	tuo.mutation.SetState(s)
	return tuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableState(s *string) *TrialUpdateOne {
	if s != nil {
		tuo.SetState(*s)
	}
	return tuo
}

// SetSavePath sets the "save_path" field.
func (tuo *TrialUpdateOne) SetSavePath(s string) *TrialUpdateOne {
	tuo.mutation.SetSavePath(s)
	return tuo
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableSavePath(s *string) *TrialUpdateOne {
	if s != nil {
		tuo.SetSavePath(*s)
	}
	return tuo
}

// SetTargetMetric sets the "target_metric" field.
func (tuo *TrialUpdateOne) SetTargetMetric(s string) *TrialUpdateOne {
	tuo.mutation.SetTargetMetric(s)
	return tuo
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableTargetMetric(s *string) *TrialUpdateOne {
	if s != nil {
		tuo.SetTargetMetric(*s)
	}
	return tuo
}

// SetProgress sets the "progress" field.
func (tuo *TrialUpdateOne) SetProgress(f float64) *TrialUpdateOne {
	tuo.mutation.ResetProgress()
	tuo.mutation.SetProgress(f)
	return tuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableProgress(f *float64) *TrialUpdateOne {
	if f != nil {
		tuo.SetProgress(*f)
	}
	return tuo
}

// AddProgress adds f to the "progress" field.
func (tuo *TrialUpdateOne) AddProgress(f float64) *TrialUpdateOne {
	tuo.mutation.AddProgress(f)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TrialUpdateOne) SetUpdatedAt(t time.Time) *TrialUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TrialUpdateOne) SetNillableUpdatedAt(t *time.Time) *TrialUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TrialUpdateOne) ClearUpdatedAt() *TrialUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (tuo *TrialUpdateOne) SetModeling(m *Modeling) *TrialUpdateOne {
	return tuo.SetModelingID(m.ID)
}

// Mutation returns the TrialMutation object of the builder.
func (tuo *TrialUpdateOne) Mutation() *TrialMutation {
	return tuo.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (tuo *TrialUpdateOne) ClearModeling() *TrialUpdateOne {
	tuo.mutation.ClearModeling()
	return tuo
}

// Where appends a list predicates to the TrialUpdate builder.
func (tuo *TrialUpdateOne) Where(ps ...predicate.Trial) *TrialUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrialUpdateOne) Select(field string, fields ...string) *TrialUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trial entity.
func (tuo *TrialUpdateOne) Save(ctx context.Context) (*Trial, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrialUpdateOne) SaveX(ctx context.Context) *Trial {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrialUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrialUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TrialUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TrialUpdateOne) sqlSave(ctx context.Context) (_node *Trial, err error) {
	_spec := sqlgraph.NewUpdateSpec(trial.Table, trial.Columns, sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trial.FieldID)
		for _, f := range fields {
			if !trial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UUID(); ok {
		_spec.SetField(trial.FieldUUID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.State(); ok {
		_spec.SetField(trial.FieldState, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SavePath(); ok {
		_spec.SetField(trial.FieldSavePath, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TargetMetric(); ok {
		_spec.SetField(trial.FieldTargetMetric, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Progress(); ok {
		_spec.SetField(trial.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedProgress(); ok {
		_spec.AddField(trial.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trial.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(trial.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trial.ModelingTable,
			Columns: []string{trial.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trial.ModelingTable,
			Columns: []string{trial.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Trial{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
