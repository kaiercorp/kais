// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/enginelog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EngineLogCreate is the builder for creating a EngineLog entity.
type EngineLogCreate struct {
	config
	mutation *EngineLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModelingID sets the "modeling_id" field.
func (elc *EngineLogCreate) SetModelingID(i int) *EngineLogCreate {
	elc.mutation.SetModelingID(i)
	return elc
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (elc *EngineLogCreate) SetNillableModelingID(i *int) *EngineLogCreate {
	if i != nil {
		elc.SetModelingID(*i)
	}
	return elc
}

// SetLevel sets the "level" field.
func (elc *EngineLogCreate) SetLevel(s string) *EngineLogCreate {
	elc.mutation.SetLevel(s)
	return elc
}

// SetFilename sets the "filename" field.
func (elc *EngineLogCreate) SetFilename(s string) *EngineLogCreate {
	elc.mutation.SetFilename(s)
	return elc
}

// SetLine sets the "line" field.
func (elc *EngineLogCreate) SetLine(i int) *EngineLogCreate {
	elc.mutation.SetLine(i)
	return elc
}

// SetMessage sets the "message" field.
func (elc *EngineLogCreate) SetMessage(s string) *EngineLogCreate {
	elc.mutation.SetMessage(s)
	return elc
}

// SetCreatedAt sets the "created_at" field.
func (elc *EngineLogCreate) SetCreatedAt(t time.Time) *EngineLogCreate {
	elc.mutation.SetCreatedAt(t)
	return elc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (elc *EngineLogCreate) SetNillableCreatedAt(t *time.Time) *EngineLogCreate {
	if t != nil {
		elc.SetCreatedAt(*t)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *EngineLogCreate) SetID(i int) *EngineLogCreate {
	elc.mutation.SetID(i)
	return elc
}

// Mutation returns the EngineLogMutation object of the builder.
func (elc *EngineLogCreate) Mutation() *EngineLogMutation {
	return elc.mutation
}

// Save creates the EngineLog in the database.
func (elc *EngineLogCreate) Save(ctx context.Context) (*EngineLog, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EngineLogCreate) SaveX(ctx context.Context) *EngineLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EngineLogCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EngineLogCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EngineLogCreate) defaults() {
	if _, ok := elc.mutation.ModelingID(); !ok {
		v := enginelog.DefaultModelingID
		elc.mutation.SetModelingID(v)
	}
	if _, ok := elc.mutation.CreatedAt(); !ok {
		v := enginelog.DefaultCreatedAt()
		elc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EngineLogCreate) check() error {
	if _, ok := elc.mutation.ModelingID(); !ok {
		return &ValidationError{Name: "modeling_id", err: errors.New(`ent: missing required field "EngineLog.modeling_id"`)}
	}
	if _, ok := elc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "EngineLog.level"`)}
	}
	if _, ok := elc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "EngineLog.filename"`)}
	}
	if _, ok := elc.mutation.Line(); !ok {
		return &ValidationError{Name: "line", err: errors.New(`ent: missing required field "EngineLog.line"`)}
	}
	if _, ok := elc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "EngineLog.message"`)}
	}
	if _, ok := elc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EngineLog.created_at"`)}
	}
	return nil
}

func (elc *EngineLogCreate) sqlSave(ctx context.Context) (*EngineLog, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EngineLogCreate) createSpec() (*EngineLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EngineLog{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(enginelog.Table, sqlgraph.NewFieldSpec(enginelog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = elc.conflict
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.ModelingID(); ok {
		_spec.SetField(enginelog.FieldModelingID, field.TypeInt, value)
		_node.ModelingID = value
	}
	if value, ok := elc.mutation.Level(); ok {
		_spec.SetField(enginelog.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := elc.mutation.Filename(); ok {
		_spec.SetField(enginelog.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := elc.mutation.Line(); ok {
		_spec.SetField(enginelog.FieldLine, field.TypeInt, value)
		_node.Line = value
	}
	if value, ok := elc.mutation.Message(); ok {
		_spec.SetField(enginelog.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := elc.mutation.CreatedAt(); ok {
		_spec.SetField(enginelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EngineLog.Create().
//		SetModelingID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EngineLogUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (elc *EngineLogCreate) OnConflict(opts ...sql.ConflictOption) *EngineLogUpsertOne {
	elc.conflict = opts
	return &EngineLogUpsertOne{
		create: elc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (elc *EngineLogCreate) OnConflictColumns(columns ...string) *EngineLogUpsertOne {
	elc.conflict = append(elc.conflict, sql.ConflictColumns(columns...))
	return &EngineLogUpsertOne{
		create: elc,
	}
}

type (
	// EngineLogUpsertOne is the builder for "upsert"-ing
	//  one EngineLog node.
	EngineLogUpsertOne struct {
		create *EngineLogCreate
	}

	// EngineLogUpsert is the "OnConflict" setter.
	EngineLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetModelingID sets the "modeling_id" field.
func (u *EngineLogUpsert) SetModelingID(v int) *EngineLogUpsert {
	u.Set(enginelog.FieldModelingID, v)
	return u
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateModelingID() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldModelingID)
	return u
}

// AddModelingID adds v to the "modeling_id" field.
func (u *EngineLogUpsert) AddModelingID(v int) *EngineLogUpsert {
	u.Add(enginelog.FieldModelingID, v)
	return u
}

// SetLevel sets the "level" field.
func (u *EngineLogUpsert) SetLevel(v string) *EngineLogUpsert {
	u.Set(enginelog.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateLevel() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldLevel)
	return u
}

// SetFilename sets the "filename" field.
func (u *EngineLogUpsert) SetFilename(v string) *EngineLogUpsert {
	u.Set(enginelog.FieldFilename, v)
	return u
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateFilename() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldFilename)
	return u
}

// SetLine sets the "line" field.
func (u *EngineLogUpsert) SetLine(v int) *EngineLogUpsert {
	u.Set(enginelog.FieldLine, v)
	return u
}

// UpdateLine sets the "line" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateLine() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldLine)
	return u
}

// AddLine adds v to the "line" field.
func (u *EngineLogUpsert) AddLine(v int) *EngineLogUpsert {
	u.Add(enginelog.FieldLine, v)
	return u
}

// SetMessage sets the "message" field.
func (u *EngineLogUpsert) SetMessage(v string) *EngineLogUpsert {
	u.Set(enginelog.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateMessage() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldMessage)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EngineLogUpsert) SetCreatedAt(v time.Time) *EngineLogUpsert {
	u.Set(enginelog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EngineLogUpsert) UpdateCreatedAt() *EngineLogUpsert {
	u.SetExcluded(enginelog.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enginelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EngineLogUpsertOne) UpdateNewValues() *EngineLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(enginelog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EngineLogUpsertOne) Ignore() *EngineLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EngineLogUpsertOne) DoNothing() *EngineLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EngineLogCreate.OnConflict
// documentation for more info.
func (u *EngineLogUpsertOne) Update(set func(*EngineLogUpsert)) *EngineLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EngineLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *EngineLogUpsertOne) SetModelingID(v int) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetModelingID(v)
	})
}

// AddModelingID adds v to the "modeling_id" field.
func (u *EngineLogUpsertOne) AddModelingID(v int) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.AddModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateModelingID() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateModelingID()
	})
}

// SetLevel sets the "level" field.
func (u *EngineLogUpsertOne) SetLevel(v string) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateLevel() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateLevel()
	})
}

// SetFilename sets the "filename" field.
func (u *EngineLogUpsertOne) SetFilename(v string) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateFilename() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateFilename()
	})
}

// SetLine sets the "line" field.
func (u *EngineLogUpsertOne) SetLine(v int) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetLine(v)
	})
}

// AddLine adds v to the "line" field.
func (u *EngineLogUpsertOne) AddLine(v int) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.AddLine(v)
	})
}

// UpdateLine sets the "line" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateLine() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateLine()
	})
}

// SetMessage sets the "message" field.
func (u *EngineLogUpsertOne) SetMessage(v string) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateMessage() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EngineLogUpsertOne) SetCreatedAt(v time.Time) *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EngineLogUpsertOne) UpdateCreatedAt() *EngineLogUpsertOne {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *EngineLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EngineLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EngineLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EngineLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EngineLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EngineLogCreateBulk is the builder for creating many EngineLog entities in bulk.
type EngineLogCreateBulk struct {
	config
	err      error
	builders []*EngineLogCreate
	conflict []sql.ConflictOption
}

// Save creates the EngineLog entities in the database.
func (elcb *EngineLogCreateBulk) Save(ctx context.Context) ([]*EngineLog, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EngineLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EngineLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = elcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EngineLogCreateBulk) SaveX(ctx context.Context) []*EngineLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EngineLogCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EngineLogCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EngineLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EngineLogUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (elcb *EngineLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *EngineLogUpsertBulk {
	elcb.conflict = opts
	return &EngineLogUpsertBulk{
		create: elcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (elcb *EngineLogCreateBulk) OnConflictColumns(columns ...string) *EngineLogUpsertBulk {
	elcb.conflict = append(elcb.conflict, sql.ConflictColumns(columns...))
	return &EngineLogUpsertBulk{
		create: elcb,
	}
}

// EngineLogUpsertBulk is the builder for "upsert"-ing
// a bulk of EngineLog nodes.
type EngineLogUpsertBulk struct {
	create *EngineLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enginelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EngineLogUpsertBulk) UpdateNewValues() *EngineLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(enginelog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EngineLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EngineLogUpsertBulk) Ignore() *EngineLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EngineLogUpsertBulk) DoNothing() *EngineLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EngineLogCreateBulk.OnConflict
// documentation for more info.
func (u *EngineLogUpsertBulk) Update(set func(*EngineLogUpsert)) *EngineLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EngineLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *EngineLogUpsertBulk) SetModelingID(v int) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetModelingID(v)
	})
}

// AddModelingID adds v to the "modeling_id" field.
func (u *EngineLogUpsertBulk) AddModelingID(v int) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.AddModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateModelingID() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateModelingID()
	})
}

// SetLevel sets the "level" field.
func (u *EngineLogUpsertBulk) SetLevel(v string) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateLevel() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateLevel()
	})
}

// SetFilename sets the "filename" field.
func (u *EngineLogUpsertBulk) SetFilename(v string) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetFilename(v)
	})
}

// UpdateFilename sets the "filename" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateFilename() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateFilename()
	})
}

// SetLine sets the "line" field.
func (u *EngineLogUpsertBulk) SetLine(v int) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetLine(v)
	})
}

// AddLine adds v to the "line" field.
func (u *EngineLogUpsertBulk) AddLine(v int) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.AddLine(v)
	})
}

// UpdateLine sets the "line" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateLine() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateLine()
	})
}

// SetMessage sets the "message" field.
func (u *EngineLogUpsertBulk) SetMessage(v string) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateMessage() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateMessage()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EngineLogUpsertBulk) SetCreatedAt(v time.Time) *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EngineLogUpsertBulk) UpdateCreatedAt() *EngineLogUpsertBulk {
	return u.Update(func(s *EngineLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *EngineLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EngineLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EngineLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EngineLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
