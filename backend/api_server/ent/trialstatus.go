// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/trialstatus"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Trial epoch table
type TrialStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parent trial UUID
	TrialUUID string `json:"trial_uuid,omitempty"`
	// epoch data
	StatusJSON []string `json:"status_json,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrialStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trialstatus.FieldStatusJSON:
			values[i] = new([]byte)
		case trialstatus.FieldID:
			values[i] = new(sql.NullInt64)
		case trialstatus.FieldTrialUUID:
			values[i] = new(sql.NullString)
		case trialstatus.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrialStatus fields.
func (ts *TrialStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trialstatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case trialstatus.FieldTrialUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trial_uuid", values[i])
			} else if value.Valid {
				ts.TrialUUID = value.String
			}
		case trialstatus.FieldStatusJSON:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field status_json", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ts.StatusJSON); err != nil {
					return fmt.Errorf("unmarshal field status_json: %w", err)
				}
			}
		case trialstatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrialStatus.
// This includes values selected through modifiers, order, etc.
func (ts *TrialStatus) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// Update returns a builder for updating this TrialStatus.
// Note that you need to call TrialStatus.Unwrap() before calling this method if this TrialStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TrialStatus) Update() *TrialStatusUpdateOne {
	return NewTrialStatusClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TrialStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TrialStatus) Unwrap() *TrialStatus {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrialStatus is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TrialStatus) String() string {
	var builder strings.Builder
	builder.WriteString("TrialStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("trial_uuid=")
	builder.WriteString(ts.TrialUUID)
	builder.WriteString(", ")
	builder.WriteString("status_json=")
	builder.WriteString(fmt.Sprintf("%v", ts.StatusJSON))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TrialStatusSlice is a parsable slice of TrialStatus.
type TrialStatusSlice []*TrialStatus
