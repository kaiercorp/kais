// Code generated by ent, DO NOT EDIT.

package trialstatus

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLTE(FieldID, id))
}

// TrialUUID applies equality check predicate on the "trial_uuid" field. It's identical to TrialUUIDEQ.
func TrialUUID(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldTrialUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// TrialUUIDEQ applies the EQ predicate on the "trial_uuid" field.
func TrialUUIDEQ(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldTrialUUID, v))
}

// TrialUUIDNEQ applies the NEQ predicate on the "trial_uuid" field.
func TrialUUIDNEQ(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNEQ(FieldTrialUUID, v))
}

// TrialUUIDIn applies the In predicate on the "trial_uuid" field.
func TrialUUIDIn(vs ...string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldIn(FieldTrialUUID, vs...))
}

// TrialUUIDNotIn applies the NotIn predicate on the "trial_uuid" field.
func TrialUUIDNotIn(vs ...string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNotIn(FieldTrialUUID, vs...))
}

// TrialUUIDGT applies the GT predicate on the "trial_uuid" field.
func TrialUUIDGT(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGT(FieldTrialUUID, v))
}

// TrialUUIDGTE applies the GTE predicate on the "trial_uuid" field.
func TrialUUIDGTE(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGTE(FieldTrialUUID, v))
}

// TrialUUIDLT applies the LT predicate on the "trial_uuid" field.
func TrialUUIDLT(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLT(FieldTrialUUID, v))
}

// TrialUUIDLTE applies the LTE predicate on the "trial_uuid" field.
func TrialUUIDLTE(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLTE(FieldTrialUUID, v))
}

// TrialUUIDContains applies the Contains predicate on the "trial_uuid" field.
func TrialUUIDContains(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldContains(FieldTrialUUID, v))
}

// TrialUUIDHasPrefix applies the HasPrefix predicate on the "trial_uuid" field.
func TrialUUIDHasPrefix(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldHasPrefix(FieldTrialUUID, v))
}

// TrialUUIDHasSuffix applies the HasSuffix predicate on the "trial_uuid" field.
func TrialUUIDHasSuffix(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldHasSuffix(FieldTrialUUID, v))
}

// TrialUUIDIsNil applies the IsNil predicate on the "trial_uuid" field.
func TrialUUIDIsNil() predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldIsNull(FieldTrialUUID))
}

// TrialUUIDNotNil applies the NotNil predicate on the "trial_uuid" field.
func TrialUUIDNotNil() predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNotNull(FieldTrialUUID))
}

// TrialUUIDEqualFold applies the EqualFold predicate on the "trial_uuid" field.
func TrialUUIDEqualFold(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEqualFold(FieldTrialUUID, v))
}

// TrialUUIDContainsFold applies the ContainsFold predicate on the "trial_uuid" field.
func TrialUUIDContainsFold(v string) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldContainsFold(FieldTrialUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TrialStatus {
	return predicate.TrialStatus(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TrialStatus) predicate.TrialStatus {
	return predicate.TrialStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TrialStatus) predicate.TrialStatus {
	return predicate.TrialStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TrialStatus) predicate.TrialStatus {
	return predicate.TrialStatus(sql.NotPredicates(p))
}
