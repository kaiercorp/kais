// Code generated by ent, DO NOT EDIT.

package menu

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the menu type in the database.
	Label = "menu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "menu_key"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// FieldIsTitle holds the string denoting the is_title field in the database.
	FieldIsTitle = "is_title"
	// FieldMenuOrder holds the string denoting the menu_order field in the database.
	FieldMenuOrder = "menu_order"
	// FieldParentKey holds the string denoting the parent_key field in the database.
	FieldParentKey = "parent_key"
	// FieldGroup holds the string denoting the group field in the database.
	FieldGroup = "group"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the menu in the database.
	Table = "menu"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "menu"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_key"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "menu"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_key"
)

// Columns holds all SQL columns for menu fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldIcon,
	FieldURL,
	FieldIsUse,
	FieldIsTitle,
	FieldMenuOrder,
	FieldParentKey,
	FieldGroup,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
	// DefaultIsTitle holds the default value on creation for the "is_title" field.
	DefaultIsTitle bool
	// DefaultGroup holds the default value on creation for the "group" field.
	DefaultGroup int
)

// OrderOption defines the ordering options for the Menu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}

// ByIsTitle orders the results by the is_title field.
func ByIsTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTitle, opts...).ToFunc()
}

// ByMenuOrder orders the results by the menu_order field.
func ByMenuOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenuOrder, opts...).ToFunc()
}

// ByParentKey orders the results by the parent_key field.
func ByParentKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentKey, opts...).ToFunc()
}

// ByGroup orders the results by the group field.
func ByGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroup, opts...).ToFunc()
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
