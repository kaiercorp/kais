// Code generated by ent, DO NOT EDIT.

package menu

import (
	"api_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldID, id))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIcon, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldURL, v))
}

// IsUse applies equality check predicate on the "is_use" field. It's identical to IsUseEQ.
func IsUse(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsUse, v))
}

// IsTitle applies equality check predicate on the "is_title" field. It's identical to IsTitleEQ.
func IsTitle(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsTitle, v))
}

// MenuOrder applies equality check predicate on the "menu_order" field. It's identical to MenuOrderEQ.
func MenuOrder(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuOrder, v))
}

// ParentKey applies equality check predicate on the "parent_key" field. It's identical to ParentKeyEQ.
func ParentKey(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldParentKey, v))
}

// Group applies equality check predicate on the "group" field. It's identical to GroupEQ.
func Group(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldGroup, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldLabel, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldIcon, v))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldIcon, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldURL, v))
}

// IsUseEQ applies the EQ predicate on the "is_use" field.
func IsUseEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsUse, v))
}

// IsUseNEQ applies the NEQ predicate on the "is_use" field.
func IsUseNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsUse, v))
}

// IsUseIsNil applies the IsNil predicate on the "is_use" field.
func IsUseIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldIsUse))
}

// IsUseNotNil applies the NotNil predicate on the "is_use" field.
func IsUseNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldIsUse))
}

// IsTitleEQ applies the EQ predicate on the "is_title" field.
func IsTitleEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsTitle, v))
}

// IsTitleNEQ applies the NEQ predicate on the "is_title" field.
func IsTitleNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsTitle, v))
}

// IsTitleIsNil applies the IsNil predicate on the "is_title" field.
func IsTitleIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldIsTitle))
}

// IsTitleNotNil applies the NotNil predicate on the "is_title" field.
func IsTitleNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldIsTitle))
}

// MenuOrderEQ applies the EQ predicate on the "menu_order" field.
func MenuOrderEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuOrder, v))
}

// MenuOrderNEQ applies the NEQ predicate on the "menu_order" field.
func MenuOrderNEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldMenuOrder, v))
}

// MenuOrderIn applies the In predicate on the "menu_order" field.
func MenuOrderIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldMenuOrder, vs...))
}

// MenuOrderNotIn applies the NotIn predicate on the "menu_order" field.
func MenuOrderNotIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldMenuOrder, vs...))
}

// MenuOrderGT applies the GT predicate on the "menu_order" field.
func MenuOrderGT(v int) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldMenuOrder, v))
}

// MenuOrderGTE applies the GTE predicate on the "menu_order" field.
func MenuOrderGTE(v int) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldMenuOrder, v))
}

// MenuOrderLT applies the LT predicate on the "menu_order" field.
func MenuOrderLT(v int) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldMenuOrder, v))
}

// MenuOrderLTE applies the LTE predicate on the "menu_order" field.
func MenuOrderLTE(v int) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldMenuOrder, v))
}

// ParentKeyEQ applies the EQ predicate on the "parent_key" field.
func ParentKeyEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldParentKey, v))
}

// ParentKeyNEQ applies the NEQ predicate on the "parent_key" field.
func ParentKeyNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldParentKey, v))
}

// ParentKeyIn applies the In predicate on the "parent_key" field.
func ParentKeyIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldParentKey, vs...))
}

// ParentKeyNotIn applies the NotIn predicate on the "parent_key" field.
func ParentKeyNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldParentKey, vs...))
}

// ParentKeyGT applies the GT predicate on the "parent_key" field.
func ParentKeyGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldParentKey, v))
}

// ParentKeyGTE applies the GTE predicate on the "parent_key" field.
func ParentKeyGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldParentKey, v))
}

// ParentKeyLT applies the LT predicate on the "parent_key" field.
func ParentKeyLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldParentKey, v))
}

// ParentKeyLTE applies the LTE predicate on the "parent_key" field.
func ParentKeyLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldParentKey, v))
}

// ParentKeyContains applies the Contains predicate on the "parent_key" field.
func ParentKeyContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldParentKey, v))
}

// ParentKeyHasPrefix applies the HasPrefix predicate on the "parent_key" field.
func ParentKeyHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldParentKey, v))
}

// ParentKeyHasSuffix applies the HasSuffix predicate on the "parent_key" field.
func ParentKeyHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldParentKey, v))
}

// ParentKeyIsNil applies the IsNil predicate on the "parent_key" field.
func ParentKeyIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldParentKey))
}

// ParentKeyNotNil applies the NotNil predicate on the "parent_key" field.
func ParentKeyNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldParentKey))
}

// ParentKeyEqualFold applies the EqualFold predicate on the "parent_key" field.
func ParentKeyEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldParentKey, v))
}

// ParentKeyContainsFold applies the ContainsFold predicate on the "parent_key" field.
func ParentKeyContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldParentKey, v))
}

// GroupEQ applies the EQ predicate on the "group" field.
func GroupEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldGroup, v))
}

// GroupNEQ applies the NEQ predicate on the "group" field.
func GroupNEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldGroup, v))
}

// GroupIn applies the In predicate on the "group" field.
func GroupIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldGroup, vs...))
}

// GroupNotIn applies the NotIn predicate on the "group" field.
func GroupNotIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldGroup, vs...))
}

// GroupGT applies the GT predicate on the "group" field.
func GroupGT(v int) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldGroup, v))
}

// GroupGTE applies the GTE predicate on the "group" field.
func GroupGTE(v int) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldGroup, v))
}

// GroupLT applies the LT predicate on the "group" field.
func GroupLT(v int) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldGroup, v))
}

// GroupLTE applies the LTE predicate on the "group" field.
func GroupLTE(v int) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldGroup, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.NotPredicates(p))
}
