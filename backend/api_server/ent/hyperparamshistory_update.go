// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/hyperparamshistory"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HyperParamsHistoryUpdate is the builder for updating HyperParamsHistory entities.
type HyperParamsHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *HyperParamsHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the HyperParamsHistoryUpdate builder.
func (hphu *HyperParamsHistoryUpdate) Where(ps ...predicate.HyperParamsHistory) *HyperParamsHistoryUpdate {
	hphu.mutation.Where(ps...)
	return hphu
}

// SetTrialID sets the "trial_id" field.
func (hphu *HyperParamsHistoryUpdate) SetTrialID(i int) *HyperParamsHistoryUpdate {
	hphu.mutation.ResetTrialID()
	hphu.mutation.SetTrialID(i)
	return hphu
}

// SetNillableTrialID sets the "trial_id" field if the given value is not nil.
func (hphu *HyperParamsHistoryUpdate) SetNillableTrialID(i *int) *HyperParamsHistoryUpdate {
	if i != nil {
		hphu.SetTrialID(*i)
	}
	return hphu
}

// AddTrialID adds i to the "trial_id" field.
func (hphu *HyperParamsHistoryUpdate) AddTrialID(i int) *HyperParamsHistoryUpdate {
	hphu.mutation.AddTrialID(i)
	return hphu
}

// SetTrialUUID sets the "trial_uuid" field.
func (hphu *HyperParamsHistoryUpdate) SetTrialUUID(s string) *HyperParamsHistoryUpdate {
	hphu.mutation.SetTrialUUID(s)
	return hphu
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (hphu *HyperParamsHistoryUpdate) SetNillableTrialUUID(s *string) *HyperParamsHistoryUpdate {
	if s != nil {
		hphu.SetTrialUUID(*s)
	}
	return hphu
}

// SetModel sets the "model" field.
func (hphu *HyperParamsHistoryUpdate) SetModel(s string) *HyperParamsHistoryUpdate {
	hphu.mutation.SetModel(s)
	return hphu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (hphu *HyperParamsHistoryUpdate) SetNillableModel(s *string) *HyperParamsHistoryUpdate {
	if s != nil {
		hphu.SetModel(*s)
	}
	return hphu
}

// SetModelNum sets the "model_num" field.
func (hphu *HyperParamsHistoryUpdate) SetModelNum(i int) *HyperParamsHistoryUpdate {
	hphu.mutation.ResetModelNum()
	hphu.mutation.SetModelNum(i)
	return hphu
}

// SetNillableModelNum sets the "model_num" field if the given value is not nil.
func (hphu *HyperParamsHistoryUpdate) SetNillableModelNum(i *int) *HyperParamsHistoryUpdate {
	if i != nil {
		hphu.SetModelNum(*i)
	}
	return hphu
}

// AddModelNum adds i to the "model_num" field.
func (hphu *HyperParamsHistoryUpdate) AddModelNum(i int) *HyperParamsHistoryUpdate {
	hphu.mutation.AddModelNum(i)
	return hphu
}

// SetParams sets the "params" field.
func (hphu *HyperParamsHistoryUpdate) SetParams(s string) *HyperParamsHistoryUpdate {
	hphu.mutation.SetParams(s)
	return hphu
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (hphu *HyperParamsHistoryUpdate) SetNillableParams(s *string) *HyperParamsHistoryUpdate {
	if s != nil {
		hphu.SetParams(*s)
	}
	return hphu
}

// Mutation returns the HyperParamsHistoryMutation object of the builder.
func (hphu *HyperParamsHistoryUpdate) Mutation() *HyperParamsHistoryMutation {
	return hphu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hphu *HyperParamsHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hphu.sqlSave, hphu.mutation, hphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hphu *HyperParamsHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hphu *HyperParamsHistoryUpdate) Exec(ctx context.Context) error {
	_, err := hphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hphu *HyperParamsHistoryUpdate) ExecX(ctx context.Context) {
	if err := hphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hphu *HyperParamsHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HyperParamsHistoryUpdate {
	hphu.modifiers = append(hphu.modifiers, modifiers...)
	return hphu
}

func (hphu *HyperParamsHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hyperparamshistory.Table, hyperparamshistory.Columns, sqlgraph.NewFieldSpec(hyperparamshistory.FieldID, field.TypeInt))
	if ps := hphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hphu.mutation.TrialID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialID, field.TypeInt, value)
	}
	if value, ok := hphu.mutation.AddedTrialID(); ok {
		_spec.AddField(hyperparamshistory.FieldTrialID, field.TypeInt, value)
	}
	if value, ok := hphu.mutation.TrialUUID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialUUID, field.TypeString, value)
	}
	if value, ok := hphu.mutation.Model(); ok {
		_spec.SetField(hyperparamshistory.FieldModel, field.TypeString, value)
	}
	if value, ok := hphu.mutation.ModelNum(); ok {
		_spec.SetField(hyperparamshistory.FieldModelNum, field.TypeInt, value)
	}
	if value, ok := hphu.mutation.AddedModelNum(); ok {
		_spec.AddField(hyperparamshistory.FieldModelNum, field.TypeInt, value)
	}
	if value, ok := hphu.mutation.Params(); ok {
		_spec.SetField(hyperparamshistory.FieldParams, field.TypeString, value)
	}
	_spec.AddModifiers(hphu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, hphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hyperparamshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hphu.mutation.done = true
	return n, nil
}

// HyperParamsHistoryUpdateOne is the builder for updating a single HyperParamsHistory entity.
type HyperParamsHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *HyperParamsHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTrialID sets the "trial_id" field.
func (hphuo *HyperParamsHistoryUpdateOne) SetTrialID(i int) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.ResetTrialID()
	hphuo.mutation.SetTrialID(i)
	return hphuo
}

// SetNillableTrialID sets the "trial_id" field if the given value is not nil.
func (hphuo *HyperParamsHistoryUpdateOne) SetNillableTrialID(i *int) *HyperParamsHistoryUpdateOne {
	if i != nil {
		hphuo.SetTrialID(*i)
	}
	return hphuo
}

// AddTrialID adds i to the "trial_id" field.
func (hphuo *HyperParamsHistoryUpdateOne) AddTrialID(i int) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.AddTrialID(i)
	return hphuo
}

// SetTrialUUID sets the "trial_uuid" field.
func (hphuo *HyperParamsHistoryUpdateOne) SetTrialUUID(s string) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.SetTrialUUID(s)
	return hphuo
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (hphuo *HyperParamsHistoryUpdateOne) SetNillableTrialUUID(s *string) *HyperParamsHistoryUpdateOne {
	if s != nil {
		hphuo.SetTrialUUID(*s)
	}
	return hphuo
}

// SetModel sets the "model" field.
func (hphuo *HyperParamsHistoryUpdateOne) SetModel(s string) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.SetModel(s)
	return hphuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (hphuo *HyperParamsHistoryUpdateOne) SetNillableModel(s *string) *HyperParamsHistoryUpdateOne {
	if s != nil {
		hphuo.SetModel(*s)
	}
	return hphuo
}

// SetModelNum sets the "model_num" field.
func (hphuo *HyperParamsHistoryUpdateOne) SetModelNum(i int) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.ResetModelNum()
	hphuo.mutation.SetModelNum(i)
	return hphuo
}

// SetNillableModelNum sets the "model_num" field if the given value is not nil.
func (hphuo *HyperParamsHistoryUpdateOne) SetNillableModelNum(i *int) *HyperParamsHistoryUpdateOne {
	if i != nil {
		hphuo.SetModelNum(*i)
	}
	return hphuo
}

// AddModelNum adds i to the "model_num" field.
func (hphuo *HyperParamsHistoryUpdateOne) AddModelNum(i int) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.AddModelNum(i)
	return hphuo
}

// SetParams sets the "params" field.
func (hphuo *HyperParamsHistoryUpdateOne) SetParams(s string) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.SetParams(s)
	return hphuo
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (hphuo *HyperParamsHistoryUpdateOne) SetNillableParams(s *string) *HyperParamsHistoryUpdateOne {
	if s != nil {
		hphuo.SetParams(*s)
	}
	return hphuo
}

// Mutation returns the HyperParamsHistoryMutation object of the builder.
func (hphuo *HyperParamsHistoryUpdateOne) Mutation() *HyperParamsHistoryMutation {
	return hphuo.mutation
}

// Where appends a list predicates to the HyperParamsHistoryUpdate builder.
func (hphuo *HyperParamsHistoryUpdateOne) Where(ps ...predicate.HyperParamsHistory) *HyperParamsHistoryUpdateOne {
	hphuo.mutation.Where(ps...)
	return hphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hphuo *HyperParamsHistoryUpdateOne) Select(field string, fields ...string) *HyperParamsHistoryUpdateOne {
	hphuo.fields = append([]string{field}, fields...)
	return hphuo
}

// Save executes the query and returns the updated HyperParamsHistory entity.
func (hphuo *HyperParamsHistoryUpdateOne) Save(ctx context.Context) (*HyperParamsHistory, error) {
	return withHooks(ctx, hphuo.sqlSave, hphuo.mutation, hphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hphuo *HyperParamsHistoryUpdateOne) SaveX(ctx context.Context) *HyperParamsHistory {
	node, err := hphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hphuo *HyperParamsHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := hphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hphuo *HyperParamsHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := hphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (hphuo *HyperParamsHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *HyperParamsHistoryUpdateOne {
	hphuo.modifiers = append(hphuo.modifiers, modifiers...)
	return hphuo
}

func (hphuo *HyperParamsHistoryUpdateOne) sqlSave(ctx context.Context) (_node *HyperParamsHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(hyperparamshistory.Table, hyperparamshistory.Columns, sqlgraph.NewFieldSpec(hyperparamshistory.FieldID, field.TypeInt))
	id, ok := hphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HyperParamsHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hyperparamshistory.FieldID)
		for _, f := range fields {
			if !hyperparamshistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hyperparamshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hphuo.mutation.TrialID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialID, field.TypeInt, value)
	}
	if value, ok := hphuo.mutation.AddedTrialID(); ok {
		_spec.AddField(hyperparamshistory.FieldTrialID, field.TypeInt, value)
	}
	if value, ok := hphuo.mutation.TrialUUID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialUUID, field.TypeString, value)
	}
	if value, ok := hphuo.mutation.Model(); ok {
		_spec.SetField(hyperparamshistory.FieldModel, field.TypeString, value)
	}
	if value, ok := hphuo.mutation.ModelNum(); ok {
		_spec.SetField(hyperparamshistory.FieldModelNum, field.TypeInt, value)
	}
	if value, ok := hphuo.mutation.AddedModelNum(); ok {
		_spec.AddField(hyperparamshistory.FieldModelNum, field.TypeInt, value)
	}
	if value, ok := hphuo.mutation.Params(); ok {
		_spec.SetField(hyperparamshistory.FieldParams, field.TypeString, value)
	}
	_spec.AddModifiers(hphuo.modifiers...)
	_node = &HyperParamsHistory{config: hphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hyperparamshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hphuo.mutation.done = true
	return _node, nil
}
