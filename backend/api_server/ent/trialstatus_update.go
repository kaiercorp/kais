// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/predicate"
	"api_server/ent/trialstatus"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TrialStatusUpdate is the builder for updating TrialStatus entities.
type TrialStatusUpdate struct {
	config
	hooks     []Hook
	mutation  *TrialStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrialStatusUpdate builder.
func (tsu *TrialStatusUpdate) Where(ps ...predicate.TrialStatus) *TrialStatusUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetTrialUUID sets the "trial_uuid" field.
func (tsu *TrialStatusUpdate) SetTrialUUID(s string) *TrialStatusUpdate {
	tsu.mutation.SetTrialUUID(s)
	return tsu
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tsu *TrialStatusUpdate) SetNillableTrialUUID(s *string) *TrialStatusUpdate {
	if s != nil {
		tsu.SetTrialUUID(*s)
	}
	return tsu
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (tsu *TrialStatusUpdate) ClearTrialUUID() *TrialStatusUpdate {
	tsu.mutation.ClearTrialUUID()
	return tsu
}

// SetStatusJSON sets the "status_json" field.
func (tsu *TrialStatusUpdate) SetStatusJSON(s []string) *TrialStatusUpdate {
	tsu.mutation.SetStatusJSON(s)
	return tsu
}

// AppendStatusJSON appends s to the "status_json" field.
func (tsu *TrialStatusUpdate) AppendStatusJSON(s []string) *TrialStatusUpdate {
	tsu.mutation.AppendStatusJSON(s)
	return tsu
}

// Mutation returns the TrialStatusMutation object of the builder.
func (tsu *TrialStatusUpdate) Mutation() *TrialStatusMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TrialStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TrialStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TrialStatusUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TrialStatusUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsu *TrialStatusUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialStatusUpdate {
	tsu.modifiers = append(tsu.modifiers, modifiers...)
	return tsu
}

func (tsu *TrialStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trialstatus.Table, trialstatus.Columns, sqlgraph.NewFieldSpec(trialstatus.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.TrialUUID(); ok {
		_spec.SetField(trialstatus.FieldTrialUUID, field.TypeString, value)
	}
	if tsu.mutation.TrialUUIDCleared() {
		_spec.ClearField(trialstatus.FieldTrialUUID, field.TypeString)
	}
	if value, ok := tsu.mutation.StatusJSON(); ok {
		_spec.SetField(trialstatus.FieldStatusJSON, field.TypeJSON, value)
	}
	if value, ok := tsu.mutation.AppendedStatusJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trialstatus.FieldStatusJSON, value)
		})
	}
	_spec.AddModifiers(tsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trialstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TrialStatusUpdateOne is the builder for updating a single TrialStatus entity.
type TrialStatusUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrialStatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTrialUUID sets the "trial_uuid" field.
func (tsuo *TrialStatusUpdateOne) SetTrialUUID(s string) *TrialStatusUpdateOne {
	tsuo.mutation.SetTrialUUID(s)
	return tsuo
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tsuo *TrialStatusUpdateOne) SetNillableTrialUUID(s *string) *TrialStatusUpdateOne {
	if s != nil {
		tsuo.SetTrialUUID(*s)
	}
	return tsuo
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (tsuo *TrialStatusUpdateOne) ClearTrialUUID() *TrialStatusUpdateOne {
	tsuo.mutation.ClearTrialUUID()
	return tsuo
}

// SetStatusJSON sets the "status_json" field.
func (tsuo *TrialStatusUpdateOne) SetStatusJSON(s []string) *TrialStatusUpdateOne {
	tsuo.mutation.SetStatusJSON(s)
	return tsuo
}

// AppendStatusJSON appends s to the "status_json" field.
func (tsuo *TrialStatusUpdateOne) AppendStatusJSON(s []string) *TrialStatusUpdateOne {
	tsuo.mutation.AppendStatusJSON(s)
	return tsuo
}

// Mutation returns the TrialStatusMutation object of the builder.
func (tsuo *TrialStatusUpdateOne) Mutation() *TrialStatusMutation {
	return tsuo.mutation
}

// Where appends a list predicates to the TrialStatusUpdate builder.
func (tsuo *TrialStatusUpdateOne) Where(ps ...predicate.TrialStatus) *TrialStatusUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TrialStatusUpdateOne) Select(field string, fields ...string) *TrialStatusUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TrialStatus entity.
func (tsuo *TrialStatusUpdateOne) Save(ctx context.Context) (*TrialStatus, error) {
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TrialStatusUpdateOne) SaveX(ctx context.Context) *TrialStatus {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TrialStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TrialStatusUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsuo *TrialStatusUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialStatusUpdateOne {
	tsuo.modifiers = append(tsuo.modifiers, modifiers...)
	return tsuo
}

func (tsuo *TrialStatusUpdateOne) sqlSave(ctx context.Context) (_node *TrialStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(trialstatus.Table, trialstatus.Columns, sqlgraph.NewFieldSpec(trialstatus.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TrialStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trialstatus.FieldID)
		for _, f := range fields {
			if !trialstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trialstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.TrialUUID(); ok {
		_spec.SetField(trialstatus.FieldTrialUUID, field.TypeString, value)
	}
	if tsuo.mutation.TrialUUIDCleared() {
		_spec.ClearField(trialstatus.FieldTrialUUID, field.TypeString)
	}
	if value, ok := tsuo.mutation.StatusJSON(); ok {
		_spec.SetField(trialstatus.FieldStatusJSON, field.TypeJSON, value)
	}
	if value, ok := tsuo.mutation.AppendedStatusJSON(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trialstatus.FieldStatusJSON, value)
		})
	}
	_spec.AddModifiers(tsuo.modifiers...)
	_node = &TrialStatus{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trialstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
