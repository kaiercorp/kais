// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"api_server/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatasetRootQuery is the builder for querying DatasetRoot entities.
type DatasetRootQuery struct {
	config
	ctx          *QueryContext
	order        []datasetroot.OrderOption
	inters       []Interceptor
	predicates   []predicate.DatasetRoot
	withDatasets *DatasetQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DatasetRootQuery builder.
func (drq *DatasetRootQuery) Where(ps ...predicate.DatasetRoot) *DatasetRootQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit the number of records to be returned by this query.
func (drq *DatasetRootQuery) Limit(limit int) *DatasetRootQuery {
	drq.ctx.Limit = &limit
	return drq
}

// Offset to start from.
func (drq *DatasetRootQuery) Offset(offset int) *DatasetRootQuery {
	drq.ctx.Offset = &offset
	return drq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drq *DatasetRootQuery) Unique(unique bool) *DatasetRootQuery {
	drq.ctx.Unique = &unique
	return drq
}

// Order specifies how the records should be ordered.
func (drq *DatasetRootQuery) Order(o ...datasetroot.OrderOption) *DatasetRootQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QueryDatasets chains the current query on the "datasets" edge.
func (drq *DatasetRootQuery) QueryDatasets() *DatasetQuery {
	query := (&DatasetClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(datasetroot.Table, datasetroot.FieldID, selector),
			sqlgraph.To(dataset.Table, dataset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, datasetroot.DatasetsTable, datasetroot.DatasetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DatasetRoot entity from the query.
// Returns a *NotFoundError when no DatasetRoot was found.
func (drq *DatasetRootQuery) First(ctx context.Context) (*DatasetRoot, error) {
	nodes, err := drq.Limit(1).All(setContextOp(ctx, drq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{datasetroot.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DatasetRootQuery) FirstX(ctx context.Context) *DatasetRoot {
	node, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DatasetRoot ID from the query.
// Returns a *NotFoundError when no DatasetRoot ID was found.
func (drq *DatasetRootQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(1).IDs(setContextOp(ctx, drq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{datasetroot.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drq *DatasetRootQuery) FirstIDX(ctx context.Context) int {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DatasetRoot entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DatasetRoot entity is found.
// Returns a *NotFoundError when no DatasetRoot entities are found.
func (drq *DatasetRootQuery) Only(ctx context.Context) (*DatasetRoot, error) {
	nodes, err := drq.Limit(2).All(setContextOp(ctx, drq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{datasetroot.Label}
	default:
		return nil, &NotSingularError{datasetroot.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DatasetRootQuery) OnlyX(ctx context.Context) *DatasetRoot {
	node, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DatasetRoot ID in the query.
// Returns a *NotSingularError when more than one DatasetRoot ID is found.
// Returns a *NotFoundError when no entities are found.
func (drq *DatasetRootQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(2).IDs(setContextOp(ctx, drq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{datasetroot.Label}
	default:
		err = &NotSingularError{datasetroot.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DatasetRootQuery) OnlyIDX(ctx context.Context) int {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DatasetRoots.
func (drq *DatasetRootQuery) All(ctx context.Context) ([]*DatasetRoot, error) {
	ctx = setContextOp(ctx, drq.ctx, "All")
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DatasetRoot, *DatasetRootQuery]()
	return withInterceptors[[]*DatasetRoot](ctx, drq, qr, drq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drq *DatasetRootQuery) AllX(ctx context.Context) []*DatasetRoot {
	nodes, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DatasetRoot IDs.
func (drq *DatasetRootQuery) IDs(ctx context.Context) (ids []int, err error) {
	if drq.ctx.Unique == nil && drq.path != nil {
		drq.Unique(true)
	}
	ctx = setContextOp(ctx, drq.ctx, "IDs")
	if err = drq.Select(datasetroot.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DatasetRootQuery) IDsX(ctx context.Context) []int {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DatasetRootQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, "Count")
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drq, querierCount[*DatasetRootQuery](), drq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DatasetRootQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DatasetRootQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drq.ctx, "Exist")
	switch _, err := drq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DatasetRootQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DatasetRootQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DatasetRootQuery) Clone() *DatasetRootQuery {
	if drq == nil {
		return nil
	}
	return &DatasetRootQuery{
		config:       drq.config,
		ctx:          drq.ctx.Clone(),
		order:        append([]datasetroot.OrderOption{}, drq.order...),
		inters:       append([]Interceptor{}, drq.inters...),
		predicates:   append([]predicate.DatasetRoot{}, drq.predicates...),
		withDatasets: drq.withDatasets.Clone(),
		// clone intermediate query.
		sql:  drq.sql.Clone(),
		path: drq.path,
	}
}

// WithDatasets tells the query-builder to eager-load the nodes that are connected to
// the "datasets" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DatasetRootQuery) WithDatasets(opts ...func(*DatasetQuery)) *DatasetRootQuery {
	query := (&DatasetClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withDatasets = query
	return drq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DatasetRoot.Query().
//		GroupBy(datasetroot.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drq *DatasetRootQuery) GroupBy(field string, fields ...string) *DatasetRootGroupBy {
	drq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DatasetRootGroupBy{build: drq}
	grbuild.flds = &drq.ctx.Fields
	grbuild.label = datasetroot.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.DatasetRoot.Query().
//		Select(datasetroot.FieldName).
//		Scan(ctx, &v)
func (drq *DatasetRootQuery) Select(fields ...string) *DatasetRootSelect {
	drq.ctx.Fields = append(drq.ctx.Fields, fields...)
	sbuild := &DatasetRootSelect{DatasetRootQuery: drq}
	sbuild.label = datasetroot.Label
	sbuild.flds, sbuild.scan = &drq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DatasetRootSelect configured with the given aggregations.
func (drq *DatasetRootQuery) Aggregate(fns ...AggregateFunc) *DatasetRootSelect {
	return drq.Select().Aggregate(fns...)
}

func (drq *DatasetRootQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drq); err != nil {
				return err
			}
		}
	}
	for _, f := range drq.ctx.Fields {
		if !datasetroot.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	return nil
}

func (drq *DatasetRootQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DatasetRoot, error) {
	var (
		nodes       = []*DatasetRoot{}
		_spec       = drq.querySpec()
		loadedTypes = [1]bool{
			drq.withDatasets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DatasetRoot).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DatasetRoot{config: drq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drq.withDatasets; query != nil {
		if err := drq.loadDatasets(ctx, query, nodes,
			func(n *DatasetRoot) { n.Edges.Datasets = []*Dataset{} },
			func(n *DatasetRoot, e *Dataset) { n.Edges.Datasets = append(n.Edges.Datasets, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drq *DatasetRootQuery) loadDatasets(ctx context.Context, query *DatasetQuery, nodes []*DatasetRoot, init func(*DatasetRoot), assign func(*DatasetRoot, *Dataset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DatasetRoot)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Dataset(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(datasetroot.DatasetsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.dataset_root_datasets
		if fk == nil {
			return fmt.Errorf(`foreign-key "dataset_root_datasets" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "dataset_root_datasets" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (drq *DatasetRootQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	_spec.Node.Columns = drq.ctx.Fields
	if len(drq.ctx.Fields) > 0 {
		_spec.Unique = drq.ctx.Unique != nil && *drq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DatasetRootQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(datasetroot.Table, datasetroot.Columns, sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt))
	_spec.From = drq.sql
	if unique := drq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drq.path != nil {
		_spec.Unique = true
	}
	if fields := drq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datasetroot.FieldID)
		for i := range fields {
			if fields[i] != datasetroot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DatasetRootQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(datasetroot.Table)
	columns := drq.ctx.Fields
	if len(columns) == 0 {
		columns = datasetroot.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drq.ctx.Unique != nil && *drq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range drq.modifiers {
		m(selector)
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drq *DatasetRootQuery) Modify(modifiers ...func(s *sql.Selector)) *DatasetRootSelect {
	drq.modifiers = append(drq.modifiers, modifiers...)
	return drq.Select()
}

// DatasetRootGroupBy is the group-by builder for DatasetRoot entities.
type DatasetRootGroupBy struct {
	selector
	build *DatasetRootQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DatasetRootGroupBy) Aggregate(fns ...AggregateFunc) *DatasetRootGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the selector query and scans the result into the given value.
func (drgb *DatasetRootGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drgb.build.ctx, "GroupBy")
	if err := drgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DatasetRootQuery, *DatasetRootGroupBy](ctx, drgb.build, drgb, drgb.build.inters, v)
}

func (drgb *DatasetRootGroupBy) sqlScan(ctx context.Context, root *DatasetRootQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drgb.fns))
	for _, fn := range drgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drgb.flds)+len(drgb.fns))
		for _, f := range *drgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DatasetRootSelect is the builder for selecting fields of DatasetRoot entities.
type DatasetRootSelect struct {
	*DatasetRootQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drs *DatasetRootSelect) Aggregate(fns ...AggregateFunc) *DatasetRootSelect {
	drs.fns = append(drs.fns, fns...)
	return drs
}

// Scan applies the selector query and scans the result into the given value.
func (drs *DatasetRootSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drs.ctx, "Select")
	if err := drs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DatasetRootQuery, *DatasetRootSelect](ctx, drs.DatasetRootQuery, drs, drs.inters, v)
}

func (drs *DatasetRootSelect) sqlScan(ctx context.Context, root *DatasetRootQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drs.fns))
	for _, fn := range drs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (drs *DatasetRootSelect) Modify(modifiers ...func(s *sql.Selector)) *DatasetRootSelect {
	drs.modifiers = append(drs.modifiers, modifiers...)
	return drs
}
