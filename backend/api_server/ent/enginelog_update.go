// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/enginelog"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EngineLogUpdate is the builder for updating EngineLog entities.
type EngineLogUpdate struct {
	config
	hooks     []Hook
	mutation  *EngineLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EngineLogUpdate builder.
func (elu *EngineLogUpdate) Where(ps ...predicate.EngineLog) *EngineLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetModelingID sets the "modeling_id" field.
func (elu *EngineLogUpdate) SetModelingID(i int) *EngineLogUpdate {
	elu.mutation.ResetModelingID()
	elu.mutation.SetModelingID(i)
	return elu
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableModelingID(i *int) *EngineLogUpdate {
	if i != nil {
		elu.SetModelingID(*i)
	}
	return elu
}

// AddModelingID adds i to the "modeling_id" field.
func (elu *EngineLogUpdate) AddModelingID(i int) *EngineLogUpdate {
	elu.mutation.AddModelingID(i)
	return elu
}

// SetLevel sets the "level" field.
func (elu *EngineLogUpdate) SetLevel(s string) *EngineLogUpdate {
	elu.mutation.SetLevel(s)
	return elu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableLevel(s *string) *EngineLogUpdate {
	if s != nil {
		elu.SetLevel(*s)
	}
	return elu
}

// SetFilename sets the "filename" field.
func (elu *EngineLogUpdate) SetFilename(s string) *EngineLogUpdate {
	elu.mutation.SetFilename(s)
	return elu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableFilename(s *string) *EngineLogUpdate {
	if s != nil {
		elu.SetFilename(*s)
	}
	return elu
}

// SetLine sets the "line" field.
func (elu *EngineLogUpdate) SetLine(i int) *EngineLogUpdate {
	elu.mutation.ResetLine()
	elu.mutation.SetLine(i)
	return elu
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableLine(i *int) *EngineLogUpdate {
	if i != nil {
		elu.SetLine(*i)
	}
	return elu
}

// AddLine adds i to the "line" field.
func (elu *EngineLogUpdate) AddLine(i int) *EngineLogUpdate {
	elu.mutation.AddLine(i)
	return elu
}

// SetMessage sets the "message" field.
func (elu *EngineLogUpdate) SetMessage(s string) *EngineLogUpdate {
	elu.mutation.SetMessage(s)
	return elu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableMessage(s *string) *EngineLogUpdate {
	if s != nil {
		elu.SetMessage(*s)
	}
	return elu
}

// SetCreatedAt sets the "created_at" field.
func (elu *EngineLogUpdate) SetCreatedAt(t time.Time) *EngineLogUpdate {
	elu.mutation.SetCreatedAt(t)
	return elu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (elu *EngineLogUpdate) SetNillableCreatedAt(t *time.Time) *EngineLogUpdate {
	if t != nil {
		elu.SetCreatedAt(*t)
	}
	return elu
}

// Mutation returns the EngineLogMutation object of the builder.
func (elu *EngineLogUpdate) Mutation() *EngineLogMutation {
	return elu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EngineLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EngineLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EngineLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EngineLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (elu *EngineLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EngineLogUpdate {
	elu.modifiers = append(elu.modifiers, modifiers...)
	return elu
}

func (elu *EngineLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enginelog.Table, enginelog.Columns, sqlgraph.NewFieldSpec(enginelog.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.ModelingID(); ok {
		_spec.SetField(enginelog.FieldModelingID, field.TypeInt, value)
	}
	if value, ok := elu.mutation.AddedModelingID(); ok {
		_spec.AddField(enginelog.FieldModelingID, field.TypeInt, value)
	}
	if value, ok := elu.mutation.Level(); ok {
		_spec.SetField(enginelog.FieldLevel, field.TypeString, value)
	}
	if value, ok := elu.mutation.Filename(); ok {
		_spec.SetField(enginelog.FieldFilename, field.TypeString, value)
	}
	if value, ok := elu.mutation.Line(); ok {
		_spec.SetField(enginelog.FieldLine, field.TypeInt, value)
	}
	if value, ok := elu.mutation.AddedLine(); ok {
		_spec.AddField(enginelog.FieldLine, field.TypeInt, value)
	}
	if value, ok := elu.mutation.Message(); ok {
		_spec.SetField(enginelog.FieldMessage, field.TypeString, value)
	}
	if value, ok := elu.mutation.CreatedAt(); ok {
		_spec.SetField(enginelog.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(elu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enginelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EngineLogUpdateOne is the builder for updating a single EngineLog entity.
type EngineLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EngineLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModelingID sets the "modeling_id" field.
func (eluo *EngineLogUpdateOne) SetModelingID(i int) *EngineLogUpdateOne {
	eluo.mutation.ResetModelingID()
	eluo.mutation.SetModelingID(i)
	return eluo
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableModelingID(i *int) *EngineLogUpdateOne {
	if i != nil {
		eluo.SetModelingID(*i)
	}
	return eluo
}

// AddModelingID adds i to the "modeling_id" field.
func (eluo *EngineLogUpdateOne) AddModelingID(i int) *EngineLogUpdateOne {
	eluo.mutation.AddModelingID(i)
	return eluo
}

// SetLevel sets the "level" field.
func (eluo *EngineLogUpdateOne) SetLevel(s string) *EngineLogUpdateOne {
	eluo.mutation.SetLevel(s)
	return eluo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableLevel(s *string) *EngineLogUpdateOne {
	if s != nil {
		eluo.SetLevel(*s)
	}
	return eluo
}

// SetFilename sets the "filename" field.
func (eluo *EngineLogUpdateOne) SetFilename(s string) *EngineLogUpdateOne {
	eluo.mutation.SetFilename(s)
	return eluo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableFilename(s *string) *EngineLogUpdateOne {
	if s != nil {
		eluo.SetFilename(*s)
	}
	return eluo
}

// SetLine sets the "line" field.
func (eluo *EngineLogUpdateOne) SetLine(i int) *EngineLogUpdateOne {
	eluo.mutation.ResetLine()
	eluo.mutation.SetLine(i)
	return eluo
}

// SetNillableLine sets the "line" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableLine(i *int) *EngineLogUpdateOne {
	if i != nil {
		eluo.SetLine(*i)
	}
	return eluo
}

// AddLine adds i to the "line" field.
func (eluo *EngineLogUpdateOne) AddLine(i int) *EngineLogUpdateOne {
	eluo.mutation.AddLine(i)
	return eluo
}

// SetMessage sets the "message" field.
func (eluo *EngineLogUpdateOne) SetMessage(s string) *EngineLogUpdateOne {
	eluo.mutation.SetMessage(s)
	return eluo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableMessage(s *string) *EngineLogUpdateOne {
	if s != nil {
		eluo.SetMessage(*s)
	}
	return eluo
}

// SetCreatedAt sets the "created_at" field.
func (eluo *EngineLogUpdateOne) SetCreatedAt(t time.Time) *EngineLogUpdateOne {
	eluo.mutation.SetCreatedAt(t)
	return eluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eluo *EngineLogUpdateOne) SetNillableCreatedAt(t *time.Time) *EngineLogUpdateOne {
	if t != nil {
		eluo.SetCreatedAt(*t)
	}
	return eluo
}

// Mutation returns the EngineLogMutation object of the builder.
func (eluo *EngineLogUpdateOne) Mutation() *EngineLogMutation {
	return eluo.mutation
}

// Where appends a list predicates to the EngineLogUpdate builder.
func (eluo *EngineLogUpdateOne) Where(ps ...predicate.EngineLog) *EngineLogUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EngineLogUpdateOne) Select(field string, fields ...string) *EngineLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EngineLog entity.
func (eluo *EngineLogUpdateOne) Save(ctx context.Context) (*EngineLog, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EngineLogUpdateOne) SaveX(ctx context.Context) *EngineLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EngineLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EngineLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eluo *EngineLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EngineLogUpdateOne {
	eluo.modifiers = append(eluo.modifiers, modifiers...)
	return eluo
}

func (eluo *EngineLogUpdateOne) sqlSave(ctx context.Context) (_node *EngineLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(enginelog.Table, enginelog.Columns, sqlgraph.NewFieldSpec(enginelog.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EngineLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enginelog.FieldID)
		for _, f := range fields {
			if !enginelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enginelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.ModelingID(); ok {
		_spec.SetField(enginelog.FieldModelingID, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.AddedModelingID(); ok {
		_spec.AddField(enginelog.FieldModelingID, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.Level(); ok {
		_spec.SetField(enginelog.FieldLevel, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Filename(); ok {
		_spec.SetField(enginelog.FieldFilename, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Line(); ok {
		_spec.SetField(enginelog.FieldLine, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.AddedLine(); ok {
		_spec.AddField(enginelog.FieldLine, field.TypeInt, value)
	}
	if value, ok := eluo.mutation.Message(); ok {
		_spec.SetField(enginelog.FieldMessage, field.TypeString, value)
	}
	if value, ok := eluo.mutation.CreatedAt(); ok {
		_spec.SetField(enginelog.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(eluo.modifiers...)
	_node = &EngineLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enginelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
