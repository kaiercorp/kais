// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingmodels"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModelingModelsUpdate is the builder for updating ModelingModels entities.
type ModelingModelsUpdate struct {
	config
	hooks     []Hook
	mutation  *ModelingModelsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModelingModelsUpdate builder.
func (mmu *ModelingModelsUpdate) Where(ps ...predicate.ModelingModels) *ModelingModelsUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetModelingID sets the "modeling_id" field.
func (mmu *ModelingModelsUpdate) SetModelingID(i int) *ModelingModelsUpdate {
	mmu.mutation.SetModelingID(i)
	return mmu
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mmu *ModelingModelsUpdate) SetNillableModelingID(i *int) *ModelingModelsUpdate {
	if i != nil {
		mmu.SetModelingID(*i)
	}
	return mmu
}

// ClearModelingID clears the value of the "modeling_id" field.
func (mmu *ModelingModelsUpdate) ClearModelingID() *ModelingModelsUpdate {
	mmu.mutation.ClearModelingID()
	return mmu
}

// SetDataType sets the "data_type" field.
func (mmu *ModelingModelsUpdate) SetDataType(s string) *ModelingModelsUpdate {
	mmu.mutation.SetDataType(s)
	return mmu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mmu *ModelingModelsUpdate) SetNillableDataType(s *string) *ModelingModelsUpdate {
	if s != nil {
		mmu.SetDataType(*s)
	}
	return mmu
}

// SetData sets the "data" field.
func (mmu *ModelingModelsUpdate) SetData(s string) *ModelingModelsUpdate {
	mmu.mutation.SetData(s)
	return mmu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (mmu *ModelingModelsUpdate) SetNillableData(s *string) *ModelingModelsUpdate {
	if s != nil {
		mmu.SetData(*s)
	}
	return mmu
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mmu *ModelingModelsUpdate) SetModeling(m *Modeling) *ModelingModelsUpdate {
	return mmu.SetModelingID(m.ID)
}

// Mutation returns the ModelingModelsMutation object of the builder.
func (mmu *ModelingModelsUpdate) Mutation() *ModelingModelsMutation {
	return mmu.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (mmu *ModelingModelsUpdate) ClearModeling() *ModelingModelsUpdate {
	mmu.mutation.ClearModeling()
	return mmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *ModelingModelsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *ModelingModelsUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *ModelingModelsUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *ModelingModelsUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mmu *ModelingModelsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingModelsUpdate {
	mmu.modifiers = append(mmu.modifiers, modifiers...)
	return mmu
}

func (mmu *ModelingModelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(modelingmodels.Table, modelingmodels.Columns, sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.DataType(); ok {
		_spec.SetField(modelingmodels.FieldDataType, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Data(); ok {
		_spec.SetField(modelingmodels.FieldData, field.TypeString, value)
	}
	if mmu.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingmodels.ModelingTable,
			Columns: []string{modelingmodels.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmu.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingmodels.ModelingTable,
			Columns: []string{modelingmodels.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelingmodels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// ModelingModelsUpdateOne is the builder for updating a single ModelingModels entity.
type ModelingModelsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModelingModelsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModelingID sets the "modeling_id" field.
func (mmuo *ModelingModelsUpdateOne) SetModelingID(i int) *ModelingModelsUpdateOne {
	mmuo.mutation.SetModelingID(i)
	return mmuo
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mmuo *ModelingModelsUpdateOne) SetNillableModelingID(i *int) *ModelingModelsUpdateOne {
	if i != nil {
		mmuo.SetModelingID(*i)
	}
	return mmuo
}

// ClearModelingID clears the value of the "modeling_id" field.
func (mmuo *ModelingModelsUpdateOne) ClearModelingID() *ModelingModelsUpdateOne {
	mmuo.mutation.ClearModelingID()
	return mmuo
}

// SetDataType sets the "data_type" field.
func (mmuo *ModelingModelsUpdateOne) SetDataType(s string) *ModelingModelsUpdateOne {
	mmuo.mutation.SetDataType(s)
	return mmuo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mmuo *ModelingModelsUpdateOne) SetNillableDataType(s *string) *ModelingModelsUpdateOne {
	if s != nil {
		mmuo.SetDataType(*s)
	}
	return mmuo
}

// SetData sets the "data" field.
func (mmuo *ModelingModelsUpdateOne) SetData(s string) *ModelingModelsUpdateOne {
	mmuo.mutation.SetData(s)
	return mmuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (mmuo *ModelingModelsUpdateOne) SetNillableData(s *string) *ModelingModelsUpdateOne {
	if s != nil {
		mmuo.SetData(*s)
	}
	return mmuo
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mmuo *ModelingModelsUpdateOne) SetModeling(m *Modeling) *ModelingModelsUpdateOne {
	return mmuo.SetModelingID(m.ID)
}

// Mutation returns the ModelingModelsMutation object of the builder.
func (mmuo *ModelingModelsUpdateOne) Mutation() *ModelingModelsMutation {
	return mmuo.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (mmuo *ModelingModelsUpdateOne) ClearModeling() *ModelingModelsUpdateOne {
	mmuo.mutation.ClearModeling()
	return mmuo
}

// Where appends a list predicates to the ModelingModelsUpdate builder.
func (mmuo *ModelingModelsUpdateOne) Where(ps ...predicate.ModelingModels) *ModelingModelsUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *ModelingModelsUpdateOne) Select(field string, fields ...string) *ModelingModelsUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated ModelingModels entity.
func (mmuo *ModelingModelsUpdateOne) Save(ctx context.Context) (*ModelingModels, error) {
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *ModelingModelsUpdateOne) SaveX(ctx context.Context) *ModelingModels {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *ModelingModelsUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *ModelingModelsUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mmuo *ModelingModelsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingModelsUpdateOne {
	mmuo.modifiers = append(mmuo.modifiers, modifiers...)
	return mmuo
}

func (mmuo *ModelingModelsUpdateOne) sqlSave(ctx context.Context) (_node *ModelingModels, err error) {
	_spec := sqlgraph.NewUpdateSpec(modelingmodels.Table, modelingmodels.Columns, sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ModelingModels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modelingmodels.FieldID)
		for _, f := range fields {
			if !modelingmodels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != modelingmodels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.DataType(); ok {
		_spec.SetField(modelingmodels.FieldDataType, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Data(); ok {
		_spec.SetField(modelingmodels.FieldData, field.TypeString, value)
	}
	if mmuo.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingmodels.ModelingTable,
			Columns: []string{modelingmodels.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmuo.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingmodels.ModelingTable,
			Columns: []string{modelingmodels.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mmuo.modifiers...)
	_node = &ModelingModels{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelingmodels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
