// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatasetRootUpdate is the builder for updating DatasetRoot entities.
type DatasetRootUpdate struct {
	config
	hooks     []Hook
	mutation  *DatasetRootMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DatasetRootUpdate builder.
func (dru *DatasetRootUpdate) Where(ps ...predicate.DatasetRoot) *DatasetRootUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetName sets the "name" field.
func (dru *DatasetRootUpdate) SetName(s string) *DatasetRootUpdate {
	dru.mutation.SetName(s)
	return dru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dru *DatasetRootUpdate) SetNillableName(s *string) *DatasetRootUpdate {
	if s != nil {
		dru.SetName(*s)
	}
	return dru
}

// SetPath sets the "path" field.
func (dru *DatasetRootUpdate) SetPath(s string) *DatasetRootUpdate {
	dru.mutation.SetPath(s)
	return dru
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (dru *DatasetRootUpdate) SetNillablePath(s *string) *DatasetRootUpdate {
	if s != nil {
		dru.SetPath(*s)
	}
	return dru
}

// SetIsUse sets the "is_use" field.
func (dru *DatasetRootUpdate) SetIsUse(b bool) *DatasetRootUpdate {
	dru.mutation.SetIsUse(b)
	return dru
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (dru *DatasetRootUpdate) SetNillableIsUse(b *bool) *DatasetRootUpdate {
	if b != nil {
		dru.SetIsUse(*b)
	}
	return dru
}

// AddDatasetIDs adds the "datasets" edge to the Dataset entity by IDs.
func (dru *DatasetRootUpdate) AddDatasetIDs(ids ...int) *DatasetRootUpdate {
	dru.mutation.AddDatasetIDs(ids...)
	return dru
}

// AddDatasets adds the "datasets" edges to the Dataset entity.
func (dru *DatasetRootUpdate) AddDatasets(d ...*Dataset) *DatasetRootUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dru.AddDatasetIDs(ids...)
}

// Mutation returns the DatasetRootMutation object of the builder.
func (dru *DatasetRootUpdate) Mutation() *DatasetRootMutation {
	return dru.mutation
}

// ClearDatasets clears all "datasets" edges to the Dataset entity.
func (dru *DatasetRootUpdate) ClearDatasets() *DatasetRootUpdate {
	dru.mutation.ClearDatasets()
	return dru
}

// RemoveDatasetIDs removes the "datasets" edge to Dataset entities by IDs.
func (dru *DatasetRootUpdate) RemoveDatasetIDs(ids ...int) *DatasetRootUpdate {
	dru.mutation.RemoveDatasetIDs(ids...)
	return dru
}

// RemoveDatasets removes "datasets" edges to Dataset entities.
func (dru *DatasetRootUpdate) RemoveDatasets(d ...*Dataset) *DatasetRootUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dru.RemoveDatasetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DatasetRootUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DatasetRootUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DatasetRootUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DatasetRootUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dru *DatasetRootUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatasetRootUpdate {
	dru.modifiers = append(dru.modifiers, modifiers...)
	return dru
}

func (dru *DatasetRootUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(datasetroot.Table, datasetroot.Columns, sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Name(); ok {
		_spec.SetField(datasetroot.FieldName, field.TypeString, value)
	}
	if value, ok := dru.mutation.Path(); ok {
		_spec.SetField(datasetroot.FieldPath, field.TypeString, value)
	}
	if value, ok := dru.mutation.IsUse(); ok {
		_spec.SetField(datasetroot.FieldIsUse, field.TypeBool, value)
	}
	if dru.mutation.DatasetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedDatasetsIDs(); len(nodes) > 0 && !dru.mutation.DatasetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DatasetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(dru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasetroot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DatasetRootUpdateOne is the builder for updating a single DatasetRoot entity.
type DatasetRootUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DatasetRootMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (druo *DatasetRootUpdateOne) SetName(s string) *DatasetRootUpdateOne {
	druo.mutation.SetName(s)
	return druo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (druo *DatasetRootUpdateOne) SetNillableName(s *string) *DatasetRootUpdateOne {
	if s != nil {
		druo.SetName(*s)
	}
	return druo
}

// SetPath sets the "path" field.
func (druo *DatasetRootUpdateOne) SetPath(s string) *DatasetRootUpdateOne {
	druo.mutation.SetPath(s)
	return druo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (druo *DatasetRootUpdateOne) SetNillablePath(s *string) *DatasetRootUpdateOne {
	if s != nil {
		druo.SetPath(*s)
	}
	return druo
}

// SetIsUse sets the "is_use" field.
func (druo *DatasetRootUpdateOne) SetIsUse(b bool) *DatasetRootUpdateOne {
	druo.mutation.SetIsUse(b)
	return druo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (druo *DatasetRootUpdateOne) SetNillableIsUse(b *bool) *DatasetRootUpdateOne {
	if b != nil {
		druo.SetIsUse(*b)
	}
	return druo
}

// AddDatasetIDs adds the "datasets" edge to the Dataset entity by IDs.
func (druo *DatasetRootUpdateOne) AddDatasetIDs(ids ...int) *DatasetRootUpdateOne {
	druo.mutation.AddDatasetIDs(ids...)
	return druo
}

// AddDatasets adds the "datasets" edges to the Dataset entity.
func (druo *DatasetRootUpdateOne) AddDatasets(d ...*Dataset) *DatasetRootUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return druo.AddDatasetIDs(ids...)
}

// Mutation returns the DatasetRootMutation object of the builder.
func (druo *DatasetRootUpdateOne) Mutation() *DatasetRootMutation {
	return druo.mutation
}

// ClearDatasets clears all "datasets" edges to the Dataset entity.
func (druo *DatasetRootUpdateOne) ClearDatasets() *DatasetRootUpdateOne {
	druo.mutation.ClearDatasets()
	return druo
}

// RemoveDatasetIDs removes the "datasets" edge to Dataset entities by IDs.
func (druo *DatasetRootUpdateOne) RemoveDatasetIDs(ids ...int) *DatasetRootUpdateOne {
	druo.mutation.RemoveDatasetIDs(ids...)
	return druo
}

// RemoveDatasets removes "datasets" edges to Dataset entities.
func (druo *DatasetRootUpdateOne) RemoveDatasets(d ...*Dataset) *DatasetRootUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return druo.RemoveDatasetIDs(ids...)
}

// Where appends a list predicates to the DatasetRootUpdate builder.
func (druo *DatasetRootUpdateOne) Where(ps ...predicate.DatasetRoot) *DatasetRootUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DatasetRootUpdateOne) Select(field string, fields ...string) *DatasetRootUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DatasetRoot entity.
func (druo *DatasetRootUpdateOne) Save(ctx context.Context) (*DatasetRoot, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DatasetRootUpdateOne) SaveX(ctx context.Context) *DatasetRoot {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DatasetRootUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DatasetRootUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (druo *DatasetRootUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatasetRootUpdateOne {
	druo.modifiers = append(druo.modifiers, modifiers...)
	return druo
}

func (druo *DatasetRootUpdateOne) sqlSave(ctx context.Context) (_node *DatasetRoot, err error) {
	_spec := sqlgraph.NewUpdateSpec(datasetroot.Table, datasetroot.Columns, sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DatasetRoot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datasetroot.FieldID)
		for _, f := range fields {
			if !datasetroot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datasetroot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.Name(); ok {
		_spec.SetField(datasetroot.FieldName, field.TypeString, value)
	}
	if value, ok := druo.mutation.Path(); ok {
		_spec.SetField(datasetroot.FieldPath, field.TypeString, value)
	}
	if value, ok := druo.mutation.IsUse(); ok {
		_spec.SetField(datasetroot.FieldIsUse, field.TypeBool, value)
	}
	if druo.mutation.DatasetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedDatasetsIDs(); len(nodes) > 0 && !druo.mutation.DatasetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DatasetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(druo.modifiers...)
	_node = &DatasetRoot{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasetroot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
