// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/trialdetails"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// trial result table
type TrialDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parent trial UUID
	TrialUUID string `json:"trial_uuid,omitempty"`
	// model name
	Model string `json:"model,omitempty"`
	// result data type
	DataType string `json:"data_type,omitempty"`
	// result data
	Data []string `json:"data,omitempty"`
	// IsModelSaved holds the value of the "is_model_saved" field.
	IsModelSaved bool `json:"is_model_saved,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrialDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trialdetails.FieldData:
			values[i] = new([]byte)
		case trialdetails.FieldIsModelSaved:
			values[i] = new(sql.NullBool)
		case trialdetails.FieldID:
			values[i] = new(sql.NullInt64)
		case trialdetails.FieldTrialUUID, trialdetails.FieldModel, trialdetails.FieldDataType:
			values[i] = new(sql.NullString)
		case trialdetails.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrialDetails fields.
func (td *TrialDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trialdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case trialdetails.FieldTrialUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trial_uuid", values[i])
			} else if value.Valid {
				td.TrialUUID = value.String
			}
		case trialdetails.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				td.Model = value.String
			}
		case trialdetails.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				td.DataType = value.String
			}
		case trialdetails.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case trialdetails.FieldIsModelSaved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_model_saved", values[i])
			} else if value.Valid {
				td.IsModelSaved = value.Bool
			}
		case trialdetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrialDetails.
// This includes values selected through modifiers, order, etc.
func (td *TrialDetails) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// Update returns a builder for updating this TrialDetails.
// Note that you need to call TrialDetails.Unwrap() before calling this method if this TrialDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TrialDetails) Update() *TrialDetailsUpdateOne {
	return NewTrialDetailsClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TrialDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TrialDetails) Unwrap() *TrialDetails {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrialDetails is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TrialDetails) String() string {
	var builder strings.Builder
	builder.WriteString("TrialDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("trial_uuid=")
	builder.WriteString(td.TrialUUID)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(td.Model)
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(td.DataType)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", td.Data))
	builder.WriteString(", ")
	builder.WriteString("is_model_saved=")
	builder.WriteString(fmt.Sprintf("%v", td.IsModelSaved))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TrialDetailsSlice is a parsable slice of TrialDetails.
type TrialDetailsSlice []*TrialDetails
