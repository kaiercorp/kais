// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/hyperparamshistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hyper parameter history per trial
type HyperParamsHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// modeling_id
	TrialID int `json:"trial_id,omitempty"`
	// TrialUUID holds the value of the "trial_uuid" field.
	TrialUUID string `json:"trial_uuid,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// ModelNum holds the value of the "model_num" field.
	ModelNum int `json:"model_num,omitempty"`
	// Params holds the value of the "params" field.
	Params string `json:"params,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HyperParamsHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hyperparamshistory.FieldID, hyperparamshistory.FieldTrialID, hyperparamshistory.FieldModelNum:
			values[i] = new(sql.NullInt64)
		case hyperparamshistory.FieldTrialUUID, hyperparamshistory.FieldModel, hyperparamshistory.FieldParams:
			values[i] = new(sql.NullString)
		case hyperparamshistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HyperParamsHistory fields.
func (hph *HyperParamsHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hyperparamshistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hph.ID = int(value.Int64)
		case hyperparamshistory.FieldTrialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trial_id", values[i])
			} else if value.Valid {
				hph.TrialID = int(value.Int64)
			}
		case hyperparamshistory.FieldTrialUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trial_uuid", values[i])
			} else if value.Valid {
				hph.TrialUUID = value.String
			}
		case hyperparamshistory.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				hph.Model = value.String
			}
		case hyperparamshistory.FieldModelNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_num", values[i])
			} else if value.Valid {
				hph.ModelNum = int(value.Int64)
			}
		case hyperparamshistory.FieldParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value.Valid {
				hph.Params = value.String
			}
		case hyperparamshistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hph.CreatedAt = value.Time
			}
		default:
			hph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HyperParamsHistory.
// This includes values selected through modifiers, order, etc.
func (hph *HyperParamsHistory) Value(name string) (ent.Value, error) {
	return hph.selectValues.Get(name)
}

// Update returns a builder for updating this HyperParamsHistory.
// Note that you need to call HyperParamsHistory.Unwrap() before calling this method if this HyperParamsHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (hph *HyperParamsHistory) Update() *HyperParamsHistoryUpdateOne {
	return NewHyperParamsHistoryClient(hph.config).UpdateOne(hph)
}

// Unwrap unwraps the HyperParamsHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hph *HyperParamsHistory) Unwrap() *HyperParamsHistory {
	_tx, ok := hph.config.driver.(*txDriver)
	if !ok {
		panic("ent: HyperParamsHistory is not a transactional entity")
	}
	hph.config.driver = _tx.drv
	return hph
}

// String implements the fmt.Stringer.
func (hph *HyperParamsHistory) String() string {
	var builder strings.Builder
	builder.WriteString("HyperParamsHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hph.ID))
	builder.WriteString("trial_id=")
	builder.WriteString(fmt.Sprintf("%v", hph.TrialID))
	builder.WriteString(", ")
	builder.WriteString("trial_uuid=")
	builder.WriteString(hph.TrialUUID)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(hph.Model)
	builder.WriteString(", ")
	builder.WriteString("model_num=")
	builder.WriteString(fmt.Sprintf("%v", hph.ModelNum))
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(hph.Params)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hph.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HyperParamsHistories is a parsable slice of HyperParamsHistory.
type HyperParamsHistories []*HyperParamsHistory
