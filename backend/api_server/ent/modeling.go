// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/task"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Modeling task table
type Modeling struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Modeling index in each task
	LocalID int `json:"local_id,omitempty"`
	// Parent task ID
	TaskID int `json:"task_id,omitempty"`
	// Base Modeling ID
	ParentID int `json:"parent_id,omitempty"`
	// ParentLocalID holds the value of the "parent_local_id" field.
	ParentLocalID int `json:"parent_local_id,omitempty"`
	// Dataset ID
	DatasetID int `json:"dataset_id,omitempty"`
	// User configuration
	Params []string `json:"params,omitempty"`
	// Engine에서 측정한 dataset 정보
	DatasetStat []string `json:"dataset_stat,omitempty"`
	// initial | update | evaluation
	ModelingType string `json:"modeling_type,omitempty"`
	// current task step
	ModelingStep string `json:"modeling_step,omitempty"`
	// Performance
	Performance []string `json:"performance,omitempty"`
	// task progress
	Progress float64 `json:"progress,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelingQuery when eager-loading is set.
	Edges        ModelingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelingEdges holds the relations/edges for other nodes in the graph.
type ModelingEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// ModelingDetails holds the value of the modeling_details edge.
	ModelingDetails []*ModelingDetails `json:"modeling_details,omitempty"`
	// ModelingModels holds the value of the modeling_models edge.
	ModelingModels []*ModelingModels `json:"modeling_models,omitempty"`
	// Trials holds the value of the trials edge.
	Trials []*Trial `json:"trials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelingEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// ModelingDetailsOrErr returns the ModelingDetails value or an error if the edge
// was not loaded in eager-loading.
func (e ModelingEdges) ModelingDetailsOrErr() ([]*ModelingDetails, error) {
	if e.loadedTypes[1] {
		return e.ModelingDetails, nil
	}
	return nil, &NotLoadedError{edge: "modeling_details"}
}

// ModelingModelsOrErr returns the ModelingModels value or an error if the edge
// was not loaded in eager-loading.
func (e ModelingEdges) ModelingModelsOrErr() ([]*ModelingModels, error) {
	if e.loadedTypes[2] {
		return e.ModelingModels, nil
	}
	return nil, &NotLoadedError{edge: "modeling_models"}
}

// TrialsOrErr returns the Trials value or an error if the edge
// was not loaded in eager-loading.
func (e ModelingEdges) TrialsOrErr() ([]*Trial, error) {
	if e.loadedTypes[3] {
		return e.Trials, nil
	}
	return nil, &NotLoadedError{edge: "trials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Modeling) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modeling.FieldParams, modeling.FieldDatasetStat, modeling.FieldPerformance:
			values[i] = new([]byte)
		case modeling.FieldProgress:
			values[i] = new(sql.NullFloat64)
		case modeling.FieldID, modeling.FieldLocalID, modeling.FieldTaskID, modeling.FieldParentID, modeling.FieldParentLocalID, modeling.FieldDatasetID:
			values[i] = new(sql.NullInt64)
		case modeling.FieldModelingType, modeling.FieldModelingStep:
			values[i] = new(sql.NullString)
		case modeling.FieldCreatedAt, modeling.FieldUpdatedAt, modeling.FieldStartedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Modeling fields.
func (m *Modeling) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modeling.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case modeling.FieldLocalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field local_id", values[i])
			} else if value.Valid {
				m.LocalID = int(value.Int64)
			}
		case modeling.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				m.TaskID = int(value.Int64)
			}
		case modeling.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				m.ParentID = int(value.Int64)
			}
		case modeling.FieldParentLocalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_local_id", values[i])
			} else if value.Valid {
				m.ParentLocalID = int(value.Int64)
			}
		case modeling.FieldDatasetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dataset_id", values[i])
			} else if value.Valid {
				m.DatasetID = int(value.Int64)
			}
		case modeling.FieldParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Params); err != nil {
					return fmt.Errorf("unmarshal field params: %w", err)
				}
			}
		case modeling.FieldDatasetStat:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dataset_stat", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.DatasetStat); err != nil {
					return fmt.Errorf("unmarshal field dataset_stat: %w", err)
				}
			}
		case modeling.FieldModelingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field modeling_type", values[i])
			} else if value.Valid {
				m.ModelingType = value.String
			}
		case modeling.FieldModelingStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field modeling_step", values[i])
			} else if value.Valid {
				m.ModelingStep = value.String
			}
		case modeling.FieldPerformance:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field performance", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Performance); err != nil {
					return fmt.Errorf("unmarshal field performance: %w", err)
				}
			}
		case modeling.FieldProgress:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				m.Progress = value.Float64
			}
		case modeling.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case modeling.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case modeling.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				m.StartedAt = new(time.Time)
				*m.StartedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Modeling.
// This includes values selected through modifiers, order, etc.
func (m *Modeling) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the Modeling entity.
func (m *Modeling) QueryTask() *TaskQuery {
	return NewModelingClient(m.config).QueryTask(m)
}

// QueryModelingDetails queries the "modeling_details" edge of the Modeling entity.
func (m *Modeling) QueryModelingDetails() *ModelingDetailsQuery {
	return NewModelingClient(m.config).QueryModelingDetails(m)
}

// QueryModelingModels queries the "modeling_models" edge of the Modeling entity.
func (m *Modeling) QueryModelingModels() *ModelingModelsQuery {
	return NewModelingClient(m.config).QueryModelingModels(m)
}

// QueryTrials queries the "trials" edge of the Modeling entity.
func (m *Modeling) QueryTrials() *TrialQuery {
	return NewModelingClient(m.config).QueryTrials(m)
}

// Update returns a builder for updating this Modeling.
// Note that you need to call Modeling.Unwrap() before calling this method if this Modeling
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Modeling) Update() *ModelingUpdateOne {
	return NewModelingClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Modeling entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Modeling) Unwrap() *Modeling {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Modeling is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Modeling) String() string {
	var builder strings.Builder
	builder.WriteString("Modeling(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("local_id=")
	builder.WriteString(fmt.Sprintf("%v", m.LocalID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", m.TaskID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ParentID))
	builder.WriteString(", ")
	builder.WriteString("parent_local_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ParentLocalID))
	builder.WriteString(", ")
	builder.WriteString("dataset_id=")
	builder.WriteString(fmt.Sprintf("%v", m.DatasetID))
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(fmt.Sprintf("%v", m.Params))
	builder.WriteString(", ")
	builder.WriteString("dataset_stat=")
	builder.WriteString(fmt.Sprintf("%v", m.DatasetStat))
	builder.WriteString(", ")
	builder.WriteString("modeling_type=")
	builder.WriteString(m.ModelingType)
	builder.WriteString(", ")
	builder.WriteString("modeling_step=")
	builder.WriteString(m.ModelingStep)
	builder.WriteString(", ")
	builder.WriteString("performance=")
	builder.WriteString(fmt.Sprintf("%v", m.Performance))
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", m.Progress))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := m.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Modelings is a parsable slice of Modeling.
type Modelings []*Modeling
