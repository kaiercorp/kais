// Code generated by ent, DO NOT EDIT.

package gpu

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gpu type in the database.
	Label = "gpu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// Table holds the table name of the gpu in the database.
	Table = "gpu"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "gpu"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "device"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_id"
)

// Columns holds all SQL columns for gpu fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldIndex,
	FieldName,
	FieldState,
	FieldIsUse,
	FieldDeviceID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIndex holds the default value on creation for the "index" field.
	DefaultIndex int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
	// DefaultDeviceID holds the default value on creation for the "device_id" field.
	DefaultDeviceID int
)

// OrderOption defines the ordering options for the Gpu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
