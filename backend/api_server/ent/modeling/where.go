// Code generated by ent, DO NOT EDIT.

package modeling

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldID, id))
}

// LocalID applies equality check predicate on the "local_id" field. It's identical to LocalIDEQ.
func LocalID(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldLocalID, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldTaskID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldParentID, v))
}

// ParentLocalID applies equality check predicate on the "parent_local_id" field. It's identical to ParentLocalIDEQ.
func ParentLocalID(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldParentLocalID, v))
}

// DatasetID applies equality check predicate on the "dataset_id" field. It's identical to DatasetIDEQ.
func DatasetID(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldDatasetID, v))
}

// ModelingType applies equality check predicate on the "modeling_type" field. It's identical to ModelingTypeEQ.
func ModelingType(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldModelingType, v))
}

// ModelingStep applies equality check predicate on the "modeling_step" field. It's identical to ModelingStepEQ.
func ModelingStep(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldModelingStep, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldProgress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldUpdatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldStartedAt, v))
}

// LocalIDEQ applies the EQ predicate on the "local_id" field.
func LocalIDEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldLocalID, v))
}

// LocalIDNEQ applies the NEQ predicate on the "local_id" field.
func LocalIDNEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldLocalID, v))
}

// LocalIDIn applies the In predicate on the "local_id" field.
func LocalIDIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldLocalID, vs...))
}

// LocalIDNotIn applies the NotIn predicate on the "local_id" field.
func LocalIDNotIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldLocalID, vs...))
}

// LocalIDGT applies the GT predicate on the "local_id" field.
func LocalIDGT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldLocalID, v))
}

// LocalIDGTE applies the GTE predicate on the "local_id" field.
func LocalIDGTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldLocalID, v))
}

// LocalIDLT applies the LT predicate on the "local_id" field.
func LocalIDLT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldLocalID, v))
}

// LocalIDLTE applies the LTE predicate on the "local_id" field.
func LocalIDLTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldLocalID, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldIsNull(FieldTaskID))
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldNotNull(FieldTaskID))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldNotNull(FieldParentID))
}

// ParentLocalIDEQ applies the EQ predicate on the "parent_local_id" field.
func ParentLocalIDEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldParentLocalID, v))
}

// ParentLocalIDNEQ applies the NEQ predicate on the "parent_local_id" field.
func ParentLocalIDNEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldParentLocalID, v))
}

// ParentLocalIDIn applies the In predicate on the "parent_local_id" field.
func ParentLocalIDIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldParentLocalID, vs...))
}

// ParentLocalIDNotIn applies the NotIn predicate on the "parent_local_id" field.
func ParentLocalIDNotIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldParentLocalID, vs...))
}

// ParentLocalIDGT applies the GT predicate on the "parent_local_id" field.
func ParentLocalIDGT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldParentLocalID, v))
}

// ParentLocalIDGTE applies the GTE predicate on the "parent_local_id" field.
func ParentLocalIDGTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldParentLocalID, v))
}

// ParentLocalIDLT applies the LT predicate on the "parent_local_id" field.
func ParentLocalIDLT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldParentLocalID, v))
}

// ParentLocalIDLTE applies the LTE predicate on the "parent_local_id" field.
func ParentLocalIDLTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldParentLocalID, v))
}

// ParentLocalIDIsNil applies the IsNil predicate on the "parent_local_id" field.
func ParentLocalIDIsNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldIsNull(FieldParentLocalID))
}

// ParentLocalIDNotNil applies the NotNil predicate on the "parent_local_id" field.
func ParentLocalIDNotNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldNotNull(FieldParentLocalID))
}

// DatasetIDEQ applies the EQ predicate on the "dataset_id" field.
func DatasetIDEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldDatasetID, v))
}

// DatasetIDNEQ applies the NEQ predicate on the "dataset_id" field.
func DatasetIDNEQ(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldDatasetID, v))
}

// DatasetIDIn applies the In predicate on the "dataset_id" field.
func DatasetIDIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldDatasetID, vs...))
}

// DatasetIDNotIn applies the NotIn predicate on the "dataset_id" field.
func DatasetIDNotIn(vs ...int) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldDatasetID, vs...))
}

// DatasetIDGT applies the GT predicate on the "dataset_id" field.
func DatasetIDGT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldDatasetID, v))
}

// DatasetIDGTE applies the GTE predicate on the "dataset_id" field.
func DatasetIDGTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldDatasetID, v))
}

// DatasetIDLT applies the LT predicate on the "dataset_id" field.
func DatasetIDLT(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldDatasetID, v))
}

// DatasetIDLTE applies the LTE predicate on the "dataset_id" field.
func DatasetIDLTE(v int) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldDatasetID, v))
}

// DatasetIDIsNil applies the IsNil predicate on the "dataset_id" field.
func DatasetIDIsNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldIsNull(FieldDatasetID))
}

// DatasetIDNotNil applies the NotNil predicate on the "dataset_id" field.
func DatasetIDNotNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldNotNull(FieldDatasetID))
}

// ModelingTypeEQ applies the EQ predicate on the "modeling_type" field.
func ModelingTypeEQ(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldModelingType, v))
}

// ModelingTypeNEQ applies the NEQ predicate on the "modeling_type" field.
func ModelingTypeNEQ(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldModelingType, v))
}

// ModelingTypeIn applies the In predicate on the "modeling_type" field.
func ModelingTypeIn(vs ...string) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldModelingType, vs...))
}

// ModelingTypeNotIn applies the NotIn predicate on the "modeling_type" field.
func ModelingTypeNotIn(vs ...string) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldModelingType, vs...))
}

// ModelingTypeGT applies the GT predicate on the "modeling_type" field.
func ModelingTypeGT(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldModelingType, v))
}

// ModelingTypeGTE applies the GTE predicate on the "modeling_type" field.
func ModelingTypeGTE(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldModelingType, v))
}

// ModelingTypeLT applies the LT predicate on the "modeling_type" field.
func ModelingTypeLT(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldModelingType, v))
}

// ModelingTypeLTE applies the LTE predicate on the "modeling_type" field.
func ModelingTypeLTE(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldModelingType, v))
}

// ModelingTypeContains applies the Contains predicate on the "modeling_type" field.
func ModelingTypeContains(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldContains(FieldModelingType, v))
}

// ModelingTypeHasPrefix applies the HasPrefix predicate on the "modeling_type" field.
func ModelingTypeHasPrefix(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldHasPrefix(FieldModelingType, v))
}

// ModelingTypeHasSuffix applies the HasSuffix predicate on the "modeling_type" field.
func ModelingTypeHasSuffix(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldHasSuffix(FieldModelingType, v))
}

// ModelingTypeEqualFold applies the EqualFold predicate on the "modeling_type" field.
func ModelingTypeEqualFold(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEqualFold(FieldModelingType, v))
}

// ModelingTypeContainsFold applies the ContainsFold predicate on the "modeling_type" field.
func ModelingTypeContainsFold(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldContainsFold(FieldModelingType, v))
}

// ModelingStepEQ applies the EQ predicate on the "modeling_step" field.
func ModelingStepEQ(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldModelingStep, v))
}

// ModelingStepNEQ applies the NEQ predicate on the "modeling_step" field.
func ModelingStepNEQ(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldModelingStep, v))
}

// ModelingStepIn applies the In predicate on the "modeling_step" field.
func ModelingStepIn(vs ...string) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldModelingStep, vs...))
}

// ModelingStepNotIn applies the NotIn predicate on the "modeling_step" field.
func ModelingStepNotIn(vs ...string) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldModelingStep, vs...))
}

// ModelingStepGT applies the GT predicate on the "modeling_step" field.
func ModelingStepGT(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldModelingStep, v))
}

// ModelingStepGTE applies the GTE predicate on the "modeling_step" field.
func ModelingStepGTE(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldModelingStep, v))
}

// ModelingStepLT applies the LT predicate on the "modeling_step" field.
func ModelingStepLT(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldModelingStep, v))
}

// ModelingStepLTE applies the LTE predicate on the "modeling_step" field.
func ModelingStepLTE(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldModelingStep, v))
}

// ModelingStepContains applies the Contains predicate on the "modeling_step" field.
func ModelingStepContains(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldContains(FieldModelingStep, v))
}

// ModelingStepHasPrefix applies the HasPrefix predicate on the "modeling_step" field.
func ModelingStepHasPrefix(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldHasPrefix(FieldModelingStep, v))
}

// ModelingStepHasSuffix applies the HasSuffix predicate on the "modeling_step" field.
func ModelingStepHasSuffix(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldHasSuffix(FieldModelingStep, v))
}

// ModelingStepEqualFold applies the EqualFold predicate on the "modeling_step" field.
func ModelingStepEqualFold(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldEqualFold(FieldModelingStep, v))
}

// ModelingStepContainsFold applies the ContainsFold predicate on the "modeling_step" field.
func ModelingStepContainsFold(v string) predicate.Modeling {
	return predicate.Modeling(sql.FieldContainsFold(FieldModelingStep, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v float64) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldProgress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldUpdatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Modeling {
	return predicate.Modeling(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Modeling {
	return predicate.Modeling(sql.FieldNotNull(FieldStartedAt))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModelingDetails applies the HasEdge predicate on the "modeling_details" edge.
func HasModelingDetails() predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ModelingDetailsTable, ModelingDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelingDetailsWith applies the HasEdge predicate on the "modeling_details" edge with a given conditions (other predicates).
func HasModelingDetailsWith(preds ...predicate.ModelingDetails) predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := newModelingDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModelingModels applies the HasEdge predicate on the "modeling_models" edge.
func HasModelingModels() predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ModelingModelsTable, ModelingModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelingModelsWith applies the HasEdge predicate on the "modeling_models" edge with a given conditions (other predicates).
func HasModelingModelsWith(preds ...predicate.ModelingModels) predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := newModelingModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrials applies the HasEdge predicate on the "trials" edge.
func HasTrials() predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TrialsTable, TrialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrialsWith applies the HasEdge predicate on the "trials" edge with a given conditions (other predicates).
func HasTrialsWith(preds ...predicate.Trial) predicate.Modeling {
	return predicate.Modeling(func(s *sql.Selector) {
		step := newTrialsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Modeling) predicate.Modeling {
	return predicate.Modeling(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Modeling) predicate.Modeling {
	return predicate.Modeling(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Modeling) predicate.Modeling {
	return predicate.Modeling(sql.NotPredicates(p))
}
