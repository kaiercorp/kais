// Code generated by ent, DO NOT EDIT.

package modeling

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the modeling type in the database.
	Label = "modeling"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLocalID holds the string denoting the local_id field in the database.
	FieldLocalID = "local_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldParentLocalID holds the string denoting the parent_local_id field in the database.
	FieldParentLocalID = "parent_local_id"
	// FieldDatasetID holds the string denoting the dataset_id field in the database.
	FieldDatasetID = "dataset_id"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// FieldDatasetStat holds the string denoting the dataset_stat field in the database.
	FieldDatasetStat = "dataset_stat"
	// FieldModelingType holds the string denoting the modeling_type field in the database.
	FieldModelingType = "modeling_type"
	// FieldModelingStep holds the string denoting the modeling_step field in the database.
	FieldModelingStep = "modeling_step"
	// FieldPerformance holds the string denoting the performance field in the database.
	FieldPerformance = "performance"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeModelingDetails holds the string denoting the modeling_details edge name in mutations.
	EdgeModelingDetails = "modeling_details"
	// EdgeModelingModels holds the string denoting the modeling_models edge name in mutations.
	EdgeModelingModels = "modeling_models"
	// EdgeTrials holds the string denoting the trials edge name in mutations.
	EdgeTrials = "trials"
	// Table holds the table name of the modeling in the database.
	Table = "modeling"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "modeling"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "task"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// ModelingDetailsTable is the table that holds the modeling_details relation/edge.
	ModelingDetailsTable = "modeling_details"
	// ModelingDetailsInverseTable is the table name for the ModelingDetails entity.
	// It exists in this package in order to avoid circular dependency with the "modelingdetails" package.
	ModelingDetailsInverseTable = "modeling_details"
	// ModelingDetailsColumn is the table column denoting the modeling_details relation/edge.
	ModelingDetailsColumn = "modeling_id"
	// ModelingModelsTable is the table that holds the modeling_models relation/edge.
	ModelingModelsTable = "modeling_models"
	// ModelingModelsInverseTable is the table name for the ModelingModels entity.
	// It exists in this package in order to avoid circular dependency with the "modelingmodels" package.
	ModelingModelsInverseTable = "modeling_models"
	// ModelingModelsColumn is the table column denoting the modeling_models relation/edge.
	ModelingModelsColumn = "modeling_id"
	// TrialsTable is the table that holds the trials relation/edge.
	TrialsTable = "trial"
	// TrialsInverseTable is the table name for the Trial entity.
	// It exists in this package in order to avoid circular dependency with the "trial" package.
	TrialsInverseTable = "trial"
	// TrialsColumn is the table column denoting the trials relation/edge.
	TrialsColumn = "modeling_id"
)

// Columns holds all SQL columns for modeling fields.
var Columns = []string{
	FieldID,
	FieldLocalID,
	FieldTaskID,
	FieldParentID,
	FieldParentLocalID,
	FieldDatasetID,
	FieldParams,
	FieldDatasetStat,
	FieldModelingType,
	FieldModelingStep,
	FieldPerformance,
	FieldProgress,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStartedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLocalID holds the default value on creation for the "local_id" field.
	DefaultLocalID int
	// DefaultTaskID holds the default value on creation for the "task_id" field.
	DefaultTaskID int
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int
	// DefaultParentLocalID holds the default value on creation for the "parent_local_id" field.
	DefaultParentLocalID int
	// DefaultDatasetID holds the default value on creation for the "dataset_id" field.
	DefaultDatasetID int
	// DefaultParams holds the default value on creation for the "params" field.
	DefaultParams []string
	// DefaultDatasetStat holds the default value on creation for the "dataset_stat" field.
	DefaultDatasetStat []string
	// DefaultModelingType holds the default value on creation for the "modeling_type" field.
	DefaultModelingType string
	// DefaultModelingStep holds the default value on creation for the "modeling_step" field.
	DefaultModelingStep string
	// DefaultPerformance holds the default value on creation for the "performance" field.
	DefaultPerformance []string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Modeling queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLocalID orders the results by the local_id field.
func ByLocalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByParentLocalID orders the results by the parent_local_id field.
func ByParentLocalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentLocalID, opts...).ToFunc()
}

// ByDatasetID orders the results by the dataset_id field.
func ByDatasetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatasetID, opts...).ToFunc()
}

// ByModelingType orders the results by the modeling_type field.
func ByModelingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelingType, opts...).ToFunc()
}

// ByModelingStep orders the results by the modeling_step field.
func ByModelingStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelingStep, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByModelingDetailsCount orders the results by modeling_details count.
func ByModelingDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModelingDetailsStep(), opts...)
	}
}

// ByModelingDetails orders the results by modeling_details terms.
func ByModelingDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelingDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModelingModelsCount orders the results by modeling_models count.
func ByModelingModelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModelingModelsStep(), opts...)
	}
}

// ByModelingModels orders the results by modeling_models terms.
func ByModelingModels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelingModelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrialsCount orders the results by trials count.
func ByTrialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrialsStep(), opts...)
	}
}

// ByTrials orders the results by trials terms.
func ByTrials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newModelingDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelingDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ModelingDetailsTable, ModelingDetailsColumn),
	)
}
func newModelingModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelingModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ModelingModelsTable, ModelingModelsColumn),
	)
}
func newTrialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrialsTable, TrialsColumn),
	)
}
