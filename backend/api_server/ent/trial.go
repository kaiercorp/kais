// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/trial"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// trials in modeling
type Trial struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ModelingID holds the value of the "modeling_id" field.
	ModelingID int `json:"modeling_id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// SavePath holds the value of the "save_path" field.
	SavePath string `json:"save_path,omitempty"`
	// TargetMetric holds the value of the "target_metric" field.
	TargetMetric string `json:"target_metric,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress float64 `json:"progress,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrialQuery when eager-loading is set.
	Edges        TrialEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrialEdges holds the relations/edges for other nodes in the graph.
type TrialEdges struct {
	// Modeling holds the value of the modeling edge.
	Modeling *Modeling `json:"modeling,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ModelingOrErr returns the Modeling value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrialEdges) ModelingOrErr() (*Modeling, error) {
	if e.loadedTypes[0] {
		if e.Modeling == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: modeling.Label}
		}
		return e.Modeling, nil
	}
	return nil, &NotLoadedError{edge: "modeling"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Trial) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trial.FieldProgress:
			values[i] = new(sql.NullFloat64)
		case trial.FieldID, trial.FieldModelingID:
			values[i] = new(sql.NullInt64)
		case trial.FieldUUID, trial.FieldState, trial.FieldSavePath, trial.FieldTargetMetric:
			values[i] = new(sql.NullString)
		case trial.FieldCreatedAt, trial.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Trial fields.
func (t *Trial) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trial.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case trial.FieldModelingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modeling_id", values[i])
			} else if value.Valid {
				t.ModelingID = int(value.Int64)
			}
		case trial.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				t.UUID = value.String
			}
		case trial.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				t.State = value.String
			}
		case trial.FieldSavePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field save_path", values[i])
			} else if value.Valid {
				t.SavePath = value.String
			}
		case trial.FieldTargetMetric:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_metric", values[i])
			} else if value.Valid {
				t.TargetMetric = value.String
			}
		case trial.FieldProgress:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				t.Progress = value.Float64
			}
		case trial.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case trial.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Trial.
// This includes values selected through modifiers, order, etc.
func (t *Trial) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryModeling queries the "modeling" edge of the Trial entity.
func (t *Trial) QueryModeling() *ModelingQuery {
	return NewTrialClient(t.config).QueryModeling(t)
}

// Update returns a builder for updating this Trial.
// Note that you need to call Trial.Unwrap() before calling this method if this Trial
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Trial) Update() *TrialUpdateOne {
	return NewTrialClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Trial entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Trial) Unwrap() *Trial {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Trial is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Trial) String() string {
	var builder strings.Builder
	builder.WriteString("Trial(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("modeling_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ModelingID))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(t.UUID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(t.State)
	builder.WriteString(", ")
	builder.WriteString("save_path=")
	builder.WriteString(t.SavePath)
	builder.WriteString(", ")
	builder.WriteString("target_metric=")
	builder.WriteString(t.TargetMetric)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", t.Progress))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Trials is a parsable slice of Trial.
type Trials []*Trial
