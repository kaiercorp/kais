// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"api_server/ent/modelingmodels"
	"api_server/ent/task"
	"api_server/ent/trial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModelingCreate is the builder for creating a Modeling entity.
type ModelingCreate struct {
	config
	mutation *ModelingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLocalID sets the "local_id" field.
func (mc *ModelingCreate) SetLocalID(i int) *ModelingCreate {
	mc.mutation.SetLocalID(i)
	return mc
}

// SetNillableLocalID sets the "local_id" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableLocalID(i *int) *ModelingCreate {
	if i != nil {
		mc.SetLocalID(*i)
	}
	return mc
}

// SetTaskID sets the "task_id" field.
func (mc *ModelingCreate) SetTaskID(i int) *ModelingCreate {
	mc.mutation.SetTaskID(i)
	return mc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableTaskID(i *int) *ModelingCreate {
	if i != nil {
		mc.SetTaskID(*i)
	}
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *ModelingCreate) SetParentID(i int) *ModelingCreate {
	mc.mutation.SetParentID(i)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableParentID(i *int) *ModelingCreate {
	if i != nil {
		mc.SetParentID(*i)
	}
	return mc
}

// SetParentLocalID sets the "parent_local_id" field.
func (mc *ModelingCreate) SetParentLocalID(i int) *ModelingCreate {
	mc.mutation.SetParentLocalID(i)
	return mc
}

// SetNillableParentLocalID sets the "parent_local_id" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableParentLocalID(i *int) *ModelingCreate {
	if i != nil {
		mc.SetParentLocalID(*i)
	}
	return mc
}

// SetDatasetID sets the "dataset_id" field.
func (mc *ModelingCreate) SetDatasetID(i int) *ModelingCreate {
	mc.mutation.SetDatasetID(i)
	return mc
}

// SetNillableDatasetID sets the "dataset_id" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableDatasetID(i *int) *ModelingCreate {
	if i != nil {
		mc.SetDatasetID(*i)
	}
	return mc
}

// SetParams sets the "params" field.
func (mc *ModelingCreate) SetParams(s []string) *ModelingCreate {
	mc.mutation.SetParams(s)
	return mc
}

// SetDatasetStat sets the "dataset_stat" field.
func (mc *ModelingCreate) SetDatasetStat(s []string) *ModelingCreate {
	mc.mutation.SetDatasetStat(s)
	return mc
}

// SetModelingType sets the "modeling_type" field.
func (mc *ModelingCreate) SetModelingType(s string) *ModelingCreate {
	mc.mutation.SetModelingType(s)
	return mc
}

// SetNillableModelingType sets the "modeling_type" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableModelingType(s *string) *ModelingCreate {
	if s != nil {
		mc.SetModelingType(*s)
	}
	return mc
}

// SetModelingStep sets the "modeling_step" field.
func (mc *ModelingCreate) SetModelingStep(s string) *ModelingCreate {
	mc.mutation.SetModelingStep(s)
	return mc
}

// SetNillableModelingStep sets the "modeling_step" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableModelingStep(s *string) *ModelingCreate {
	if s != nil {
		mc.SetModelingStep(*s)
	}
	return mc
}

// SetPerformance sets the "performance" field.
func (mc *ModelingCreate) SetPerformance(s []string) *ModelingCreate {
	mc.mutation.SetPerformance(s)
	return mc
}

// SetProgress sets the "progress" field.
func (mc *ModelingCreate) SetProgress(f float64) *ModelingCreate {
	mc.mutation.SetProgress(f)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *ModelingCreate) SetCreatedAt(t time.Time) *ModelingCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableCreatedAt(t *time.Time) *ModelingCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ModelingCreate) SetUpdatedAt(t time.Time) *ModelingCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableUpdatedAt(t *time.Time) *ModelingCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetStartedAt sets the "started_at" field.
func (mc *ModelingCreate) SetStartedAt(t time.Time) *ModelingCreate {
	mc.mutation.SetStartedAt(t)
	return mc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mc *ModelingCreate) SetNillableStartedAt(t *time.Time) *ModelingCreate {
	if t != nil {
		mc.SetStartedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *ModelingCreate) SetID(i int) *ModelingCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetTask sets the "task" edge to the Task entity.
func (mc *ModelingCreate) SetTask(t *Task) *ModelingCreate {
	return mc.SetTaskID(t.ID)
}

// AddModelingDetailIDs adds the "modeling_details" edge to the ModelingDetails entity by IDs.
func (mc *ModelingCreate) AddModelingDetailIDs(ids ...int) *ModelingCreate {
	mc.mutation.AddModelingDetailIDs(ids...)
	return mc
}

// AddModelingDetails adds the "modeling_details" edges to the ModelingDetails entity.
func (mc *ModelingCreate) AddModelingDetails(m ...*ModelingDetails) *ModelingCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddModelingDetailIDs(ids...)
}

// AddModelingModelIDs adds the "modeling_models" edge to the ModelingModels entity by IDs.
func (mc *ModelingCreate) AddModelingModelIDs(ids ...int) *ModelingCreate {
	mc.mutation.AddModelingModelIDs(ids...)
	return mc
}

// AddModelingModels adds the "modeling_models" edges to the ModelingModels entity.
func (mc *ModelingCreate) AddModelingModels(m ...*ModelingModels) *ModelingCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddModelingModelIDs(ids...)
}

// AddTrialIDs adds the "trials" edge to the Trial entity by IDs.
func (mc *ModelingCreate) AddTrialIDs(ids ...int) *ModelingCreate {
	mc.mutation.AddTrialIDs(ids...)
	return mc
}

// AddTrials adds the "trials" edges to the Trial entity.
func (mc *ModelingCreate) AddTrials(t ...*Trial) *ModelingCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTrialIDs(ids...)
}

// Mutation returns the ModelingMutation object of the builder.
func (mc *ModelingCreate) Mutation() *ModelingMutation {
	return mc.mutation
}

// Save creates the Modeling in the database.
func (mc *ModelingCreate) Save(ctx context.Context) (*Modeling, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModelingCreate) SaveX(ctx context.Context) *Modeling {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModelingCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModelingCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModelingCreate) defaults() {
	if _, ok := mc.mutation.LocalID(); !ok {
		v := modeling.DefaultLocalID
		mc.mutation.SetLocalID(v)
	}
	if _, ok := mc.mutation.TaskID(); !ok {
		v := modeling.DefaultTaskID
		mc.mutation.SetTaskID(v)
	}
	if _, ok := mc.mutation.ParentID(); !ok {
		v := modeling.DefaultParentID
		mc.mutation.SetParentID(v)
	}
	if _, ok := mc.mutation.ParentLocalID(); !ok {
		v := modeling.DefaultParentLocalID
		mc.mutation.SetParentLocalID(v)
	}
	if _, ok := mc.mutation.DatasetID(); !ok {
		v := modeling.DefaultDatasetID
		mc.mutation.SetDatasetID(v)
	}
	if _, ok := mc.mutation.Params(); !ok {
		v := modeling.DefaultParams
		mc.mutation.SetParams(v)
	}
	if _, ok := mc.mutation.DatasetStat(); !ok {
		v := modeling.DefaultDatasetStat
		mc.mutation.SetDatasetStat(v)
	}
	if _, ok := mc.mutation.ModelingType(); !ok {
		v := modeling.DefaultModelingType
		mc.mutation.SetModelingType(v)
	}
	if _, ok := mc.mutation.ModelingStep(); !ok {
		v := modeling.DefaultModelingStep
		mc.mutation.SetModelingStep(v)
	}
	if _, ok := mc.mutation.Performance(); !ok {
		v := modeling.DefaultPerformance
		mc.mutation.SetPerformance(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := modeling.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := modeling.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModelingCreate) check() error {
	if _, ok := mc.mutation.LocalID(); !ok {
		return &ValidationError{Name: "local_id", err: errors.New(`ent: missing required field "Modeling.local_id"`)}
	}
	if _, ok := mc.mutation.Params(); !ok {
		return &ValidationError{Name: "params", err: errors.New(`ent: missing required field "Modeling.params"`)}
	}
	if _, ok := mc.mutation.DatasetStat(); !ok {
		return &ValidationError{Name: "dataset_stat", err: errors.New(`ent: missing required field "Modeling.dataset_stat"`)}
	}
	if _, ok := mc.mutation.ModelingType(); !ok {
		return &ValidationError{Name: "modeling_type", err: errors.New(`ent: missing required field "Modeling.modeling_type"`)}
	}
	if _, ok := mc.mutation.ModelingStep(); !ok {
		return &ValidationError{Name: "modeling_step", err: errors.New(`ent: missing required field "Modeling.modeling_step"`)}
	}
	if _, ok := mc.mutation.Performance(); !ok {
		return &ValidationError{Name: "performance", err: errors.New(`ent: missing required field "Modeling.performance"`)}
	}
	if _, ok := mc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Modeling.progress"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Modeling.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Modeling.updated_at"`)}
	}
	return nil
}

func (mc *ModelingCreate) sqlSave(ctx context.Context) (*Modeling, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModelingCreate) createSpec() (*Modeling, *sqlgraph.CreateSpec) {
	var (
		_node = &Modeling{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(modeling.Table, sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.LocalID(); ok {
		_spec.SetField(modeling.FieldLocalID, field.TypeInt, value)
		_node.LocalID = value
	}
	if value, ok := mc.mutation.ParentID(); ok {
		_spec.SetField(modeling.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := mc.mutation.ParentLocalID(); ok {
		_spec.SetField(modeling.FieldParentLocalID, field.TypeInt, value)
		_node.ParentLocalID = value
	}
	if value, ok := mc.mutation.DatasetID(); ok {
		_spec.SetField(modeling.FieldDatasetID, field.TypeInt, value)
		_node.DatasetID = value
	}
	if value, ok := mc.mutation.Params(); ok {
		_spec.SetField(modeling.FieldParams, field.TypeJSON, value)
		_node.Params = value
	}
	if value, ok := mc.mutation.DatasetStat(); ok {
		_spec.SetField(modeling.FieldDatasetStat, field.TypeJSON, value)
		_node.DatasetStat = value
	}
	if value, ok := mc.mutation.ModelingType(); ok {
		_spec.SetField(modeling.FieldModelingType, field.TypeString, value)
		_node.ModelingType = value
	}
	if value, ok := mc.mutation.ModelingStep(); ok {
		_spec.SetField(modeling.FieldModelingStep, field.TypeString, value)
		_node.ModelingStep = value
	}
	if value, ok := mc.mutation.Performance(); ok {
		_spec.SetField(modeling.FieldPerformance, field.TypeJSON, value)
		_node.Performance = value
	}
	if value, ok := mc.mutation.Progress(); ok {
		_spec.SetField(modeling.FieldProgress, field.TypeFloat64, value)
		_node.Progress = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(modeling.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(modeling.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.StartedAt(); ok {
		_spec.SetField(modeling.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if nodes := mc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modeling.TaskTable,
			Columns: []string{modeling.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ModelingDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ModelingModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TrialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Modeling.Create().
//		SetLocalID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingUpsert) {
//			SetLocalID(v+v).
//		}).
//		Exec(ctx)
func (mc *ModelingCreate) OnConflict(opts ...sql.ConflictOption) *ModelingUpsertOne {
	mc.conflict = opts
	return &ModelingUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Modeling.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *ModelingCreate) OnConflictColumns(columns ...string) *ModelingUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &ModelingUpsertOne{
		create: mc,
	}
}

type (
	// ModelingUpsertOne is the builder for "upsert"-ing
	//  one Modeling node.
	ModelingUpsertOne struct {
		create *ModelingCreate
	}

	// ModelingUpsert is the "OnConflict" setter.
	ModelingUpsert struct {
		*sql.UpdateSet
	}
)

// SetLocalID sets the "local_id" field.
func (u *ModelingUpsert) SetLocalID(v int) *ModelingUpsert {
	u.Set(modeling.FieldLocalID, v)
	return u
}

// UpdateLocalID sets the "local_id" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateLocalID() *ModelingUpsert {
	u.SetExcluded(modeling.FieldLocalID)
	return u
}

// AddLocalID adds v to the "local_id" field.
func (u *ModelingUpsert) AddLocalID(v int) *ModelingUpsert {
	u.Add(modeling.FieldLocalID, v)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ModelingUpsert) SetTaskID(v int) *ModelingUpsert {
	u.Set(modeling.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateTaskID() *ModelingUpsert {
	u.SetExcluded(modeling.FieldTaskID)
	return u
}

// ClearTaskID clears the value of the "task_id" field.
func (u *ModelingUpsert) ClearTaskID() *ModelingUpsert {
	u.SetNull(modeling.FieldTaskID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *ModelingUpsert) SetParentID(v int) *ModelingUpsert {
	u.Set(modeling.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateParentID() *ModelingUpsert {
	u.SetExcluded(modeling.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *ModelingUpsert) AddParentID(v int) *ModelingUpsert {
	u.Add(modeling.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *ModelingUpsert) ClearParentID() *ModelingUpsert {
	u.SetNull(modeling.FieldParentID)
	return u
}

// SetParentLocalID sets the "parent_local_id" field.
func (u *ModelingUpsert) SetParentLocalID(v int) *ModelingUpsert {
	u.Set(modeling.FieldParentLocalID, v)
	return u
}

// UpdateParentLocalID sets the "parent_local_id" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateParentLocalID() *ModelingUpsert {
	u.SetExcluded(modeling.FieldParentLocalID)
	return u
}

// AddParentLocalID adds v to the "parent_local_id" field.
func (u *ModelingUpsert) AddParentLocalID(v int) *ModelingUpsert {
	u.Add(modeling.FieldParentLocalID, v)
	return u
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (u *ModelingUpsert) ClearParentLocalID() *ModelingUpsert {
	u.SetNull(modeling.FieldParentLocalID)
	return u
}

// SetDatasetID sets the "dataset_id" field.
func (u *ModelingUpsert) SetDatasetID(v int) *ModelingUpsert {
	u.Set(modeling.FieldDatasetID, v)
	return u
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateDatasetID() *ModelingUpsert {
	u.SetExcluded(modeling.FieldDatasetID)
	return u
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *ModelingUpsert) AddDatasetID(v int) *ModelingUpsert {
	u.Add(modeling.FieldDatasetID, v)
	return u
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (u *ModelingUpsert) ClearDatasetID() *ModelingUpsert {
	u.SetNull(modeling.FieldDatasetID)
	return u
}

// SetParams sets the "params" field.
func (u *ModelingUpsert) SetParams(v []string) *ModelingUpsert {
	u.Set(modeling.FieldParams, v)
	return u
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateParams() *ModelingUpsert {
	u.SetExcluded(modeling.FieldParams)
	return u
}

// SetDatasetStat sets the "dataset_stat" field.
func (u *ModelingUpsert) SetDatasetStat(v []string) *ModelingUpsert {
	u.Set(modeling.FieldDatasetStat, v)
	return u
}

// UpdateDatasetStat sets the "dataset_stat" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateDatasetStat() *ModelingUpsert {
	u.SetExcluded(modeling.FieldDatasetStat)
	return u
}

// SetModelingType sets the "modeling_type" field.
func (u *ModelingUpsert) SetModelingType(v string) *ModelingUpsert {
	u.Set(modeling.FieldModelingType, v)
	return u
}

// UpdateModelingType sets the "modeling_type" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateModelingType() *ModelingUpsert {
	u.SetExcluded(modeling.FieldModelingType)
	return u
}

// SetModelingStep sets the "modeling_step" field.
func (u *ModelingUpsert) SetModelingStep(v string) *ModelingUpsert {
	u.Set(modeling.FieldModelingStep, v)
	return u
}

// UpdateModelingStep sets the "modeling_step" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateModelingStep() *ModelingUpsert {
	u.SetExcluded(modeling.FieldModelingStep)
	return u
}

// SetPerformance sets the "performance" field.
func (u *ModelingUpsert) SetPerformance(v []string) *ModelingUpsert {
	u.Set(modeling.FieldPerformance, v)
	return u
}

// UpdatePerformance sets the "performance" field to the value that was provided on create.
func (u *ModelingUpsert) UpdatePerformance() *ModelingUpsert {
	u.SetExcluded(modeling.FieldPerformance)
	return u
}

// SetProgress sets the "progress" field.
func (u *ModelingUpsert) SetProgress(v float64) *ModelingUpsert {
	u.Set(modeling.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateProgress() *ModelingUpsert {
	u.SetExcluded(modeling.FieldProgress)
	return u
}

// AddProgress adds v to the "progress" field.
func (u *ModelingUpsert) AddProgress(v float64) *ModelingUpsert {
	u.Add(modeling.FieldProgress, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelingUpsert) SetUpdatedAt(v time.Time) *ModelingUpsert {
	u.Set(modeling.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateUpdatedAt() *ModelingUpsert {
	u.SetExcluded(modeling.FieldUpdatedAt)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *ModelingUpsert) SetStartedAt(v time.Time) *ModelingUpsert {
	u.Set(modeling.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ModelingUpsert) UpdateStartedAt() *ModelingUpsert {
	u.SetExcluded(modeling.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ModelingUpsert) ClearStartedAt() *ModelingUpsert {
	u.SetNull(modeling.FieldStartedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Modeling.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modeling.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingUpsertOne) UpdateNewValues() *ModelingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modeling.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(modeling.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Modeling.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelingUpsertOne) Ignore() *ModelingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingUpsertOne) DoNothing() *ModelingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingCreate.OnConflict
// documentation for more info.
func (u *ModelingUpsertOne) Update(set func(*ModelingUpsert)) *ModelingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingUpsert{UpdateSet: update})
	}))
	return u
}

// SetLocalID sets the "local_id" field.
func (u *ModelingUpsertOne) SetLocalID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetLocalID(v)
	})
}

// AddLocalID adds v to the "local_id" field.
func (u *ModelingUpsertOne) AddLocalID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.AddLocalID(v)
	})
}

// UpdateLocalID sets the "local_id" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateLocalID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateLocalID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ModelingUpsertOne) SetTaskID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateTaskID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *ModelingUpsertOne) ClearTaskID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearTaskID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *ModelingUpsertOne) SetParentID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *ModelingUpsertOne) AddParentID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateParentID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *ModelingUpsertOne) ClearParentID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearParentID()
	})
}

// SetParentLocalID sets the "parent_local_id" field.
func (u *ModelingUpsertOne) SetParentLocalID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParentLocalID(v)
	})
}

// AddParentLocalID adds v to the "parent_local_id" field.
func (u *ModelingUpsertOne) AddParentLocalID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.AddParentLocalID(v)
	})
}

// UpdateParentLocalID sets the "parent_local_id" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateParentLocalID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParentLocalID()
	})
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (u *ModelingUpsertOne) ClearParentLocalID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearParentLocalID()
	})
}

// SetDatasetID sets the "dataset_id" field.
func (u *ModelingUpsertOne) SetDatasetID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetDatasetID(v)
	})
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *ModelingUpsertOne) AddDatasetID(v int) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.AddDatasetID(v)
	})
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateDatasetID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateDatasetID()
	})
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (u *ModelingUpsertOne) ClearDatasetID() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearDatasetID()
	})
}

// SetParams sets the "params" field.
func (u *ModelingUpsertOne) SetParams(v []string) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateParams() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParams()
	})
}

// SetDatasetStat sets the "dataset_stat" field.
func (u *ModelingUpsertOne) SetDatasetStat(v []string) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetDatasetStat(v)
	})
}

// UpdateDatasetStat sets the "dataset_stat" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateDatasetStat() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateDatasetStat()
	})
}

// SetModelingType sets the "modeling_type" field.
func (u *ModelingUpsertOne) SetModelingType(v string) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetModelingType(v)
	})
}

// UpdateModelingType sets the "modeling_type" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateModelingType() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateModelingType()
	})
}

// SetModelingStep sets the "modeling_step" field.
func (u *ModelingUpsertOne) SetModelingStep(v string) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetModelingStep(v)
	})
}

// UpdateModelingStep sets the "modeling_step" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateModelingStep() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateModelingStep()
	})
}

// SetPerformance sets the "performance" field.
func (u *ModelingUpsertOne) SetPerformance(v []string) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetPerformance(v)
	})
}

// UpdatePerformance sets the "performance" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdatePerformance() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdatePerformance()
	})
}

// SetProgress sets the "progress" field.
func (u *ModelingUpsertOne) SetProgress(v float64) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *ModelingUpsertOne) AddProgress(v float64) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateProgress() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateProgress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelingUpsertOne) SetUpdatedAt(v time.Time) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateUpdatedAt() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ModelingUpsertOne) SetStartedAt(v time.Time) *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ModelingUpsertOne) UpdateStartedAt() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ModelingUpsertOne) ClearStartedAt() *ModelingUpsertOne {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearStartedAt()
	})
}

// Exec executes the query.
func (u *ModelingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelingCreateBulk is the builder for creating many Modeling entities in bulk.
type ModelingCreateBulk struct {
	config
	err      error
	builders []*ModelingCreate
	conflict []sql.ConflictOption
}

// Save creates the Modeling entities in the database.
func (mcb *ModelingCreateBulk) Save(ctx context.Context) ([]*Modeling, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Modeling, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModelingCreateBulk) SaveX(ctx context.Context) []*Modeling {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModelingCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModelingCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Modeling.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingUpsert) {
//			SetLocalID(v+v).
//		}).
//		Exec(ctx)
func (mcb *ModelingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelingUpsertBulk {
	mcb.conflict = opts
	return &ModelingUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Modeling.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *ModelingCreateBulk) OnConflictColumns(columns ...string) *ModelingUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &ModelingUpsertBulk{
		create: mcb,
	}
}

// ModelingUpsertBulk is the builder for "upsert"-ing
// a bulk of Modeling nodes.
type ModelingUpsertBulk struct {
	create *ModelingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Modeling.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modeling.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingUpsertBulk) UpdateNewValues() *ModelingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modeling.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(modeling.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Modeling.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelingUpsertBulk) Ignore() *ModelingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingUpsertBulk) DoNothing() *ModelingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingCreateBulk.OnConflict
// documentation for more info.
func (u *ModelingUpsertBulk) Update(set func(*ModelingUpsert)) *ModelingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingUpsert{UpdateSet: update})
	}))
	return u
}

// SetLocalID sets the "local_id" field.
func (u *ModelingUpsertBulk) SetLocalID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetLocalID(v)
	})
}

// AddLocalID adds v to the "local_id" field.
func (u *ModelingUpsertBulk) AddLocalID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.AddLocalID(v)
	})
}

// UpdateLocalID sets the "local_id" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateLocalID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateLocalID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ModelingUpsertBulk) SetTaskID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateTaskID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *ModelingUpsertBulk) ClearTaskID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearTaskID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *ModelingUpsertBulk) SetParentID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *ModelingUpsertBulk) AddParentID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateParentID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *ModelingUpsertBulk) ClearParentID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearParentID()
	})
}

// SetParentLocalID sets the "parent_local_id" field.
func (u *ModelingUpsertBulk) SetParentLocalID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParentLocalID(v)
	})
}

// AddParentLocalID adds v to the "parent_local_id" field.
func (u *ModelingUpsertBulk) AddParentLocalID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.AddParentLocalID(v)
	})
}

// UpdateParentLocalID sets the "parent_local_id" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateParentLocalID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParentLocalID()
	})
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (u *ModelingUpsertBulk) ClearParentLocalID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearParentLocalID()
	})
}

// SetDatasetID sets the "dataset_id" field.
func (u *ModelingUpsertBulk) SetDatasetID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetDatasetID(v)
	})
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *ModelingUpsertBulk) AddDatasetID(v int) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.AddDatasetID(v)
	})
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateDatasetID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateDatasetID()
	})
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (u *ModelingUpsertBulk) ClearDatasetID() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearDatasetID()
	})
}

// SetParams sets the "params" field.
func (u *ModelingUpsertBulk) SetParams(v []string) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateParams() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateParams()
	})
}

// SetDatasetStat sets the "dataset_stat" field.
func (u *ModelingUpsertBulk) SetDatasetStat(v []string) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetDatasetStat(v)
	})
}

// UpdateDatasetStat sets the "dataset_stat" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateDatasetStat() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateDatasetStat()
	})
}

// SetModelingType sets the "modeling_type" field.
func (u *ModelingUpsertBulk) SetModelingType(v string) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetModelingType(v)
	})
}

// UpdateModelingType sets the "modeling_type" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateModelingType() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateModelingType()
	})
}

// SetModelingStep sets the "modeling_step" field.
func (u *ModelingUpsertBulk) SetModelingStep(v string) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetModelingStep(v)
	})
}

// UpdateModelingStep sets the "modeling_step" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateModelingStep() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateModelingStep()
	})
}

// SetPerformance sets the "performance" field.
func (u *ModelingUpsertBulk) SetPerformance(v []string) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetPerformance(v)
	})
}

// UpdatePerformance sets the "performance" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdatePerformance() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdatePerformance()
	})
}

// SetProgress sets the "progress" field.
func (u *ModelingUpsertBulk) SetProgress(v float64) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *ModelingUpsertBulk) AddProgress(v float64) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateProgress() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateProgress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModelingUpsertBulk) SetUpdatedAt(v time.Time) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateUpdatedAt() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *ModelingUpsertBulk) SetStartedAt(v time.Time) *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *ModelingUpsertBulk) UpdateStartedAt() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *ModelingUpsertBulk) ClearStartedAt() *ModelingUpsertBulk {
	return u.Update(func(s *ModelingUpsert) {
		s.ClearStartedAt()
	})
}

// Exec executes the query.
func (u *ModelingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ModelingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
