// Code generated by ent, DO NOT EDIT.

package trialdetails

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLTE(FieldID, id))
}

// TrialUUID applies equality check predicate on the "trial_uuid" field. It's identical to TrialUUIDEQ.
func TrialUUID(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldTrialUUID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldModel, v))
}

// DataType applies equality check predicate on the "data_type" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldDataType, v))
}

// IsModelSaved applies equality check predicate on the "is_model_saved" field. It's identical to IsModelSavedEQ.
func IsModelSaved(v bool) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldIsModelSaved, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// TrialUUIDEQ applies the EQ predicate on the "trial_uuid" field.
func TrialUUIDEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldTrialUUID, v))
}

// TrialUUIDNEQ applies the NEQ predicate on the "trial_uuid" field.
func TrialUUIDNEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldTrialUUID, v))
}

// TrialUUIDIn applies the In predicate on the "trial_uuid" field.
func TrialUUIDIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIn(FieldTrialUUID, vs...))
}

// TrialUUIDNotIn applies the NotIn predicate on the "trial_uuid" field.
func TrialUUIDNotIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotIn(FieldTrialUUID, vs...))
}

// TrialUUIDGT applies the GT predicate on the "trial_uuid" field.
func TrialUUIDGT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGT(FieldTrialUUID, v))
}

// TrialUUIDGTE applies the GTE predicate on the "trial_uuid" field.
func TrialUUIDGTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGTE(FieldTrialUUID, v))
}

// TrialUUIDLT applies the LT predicate on the "trial_uuid" field.
func TrialUUIDLT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLT(FieldTrialUUID, v))
}

// TrialUUIDLTE applies the LTE predicate on the "trial_uuid" field.
func TrialUUIDLTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLTE(FieldTrialUUID, v))
}

// TrialUUIDContains applies the Contains predicate on the "trial_uuid" field.
func TrialUUIDContains(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContains(FieldTrialUUID, v))
}

// TrialUUIDHasPrefix applies the HasPrefix predicate on the "trial_uuid" field.
func TrialUUIDHasPrefix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasPrefix(FieldTrialUUID, v))
}

// TrialUUIDHasSuffix applies the HasSuffix predicate on the "trial_uuid" field.
func TrialUUIDHasSuffix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasSuffix(FieldTrialUUID, v))
}

// TrialUUIDIsNil applies the IsNil predicate on the "trial_uuid" field.
func TrialUUIDIsNil() predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIsNull(FieldTrialUUID))
}

// TrialUUIDNotNil applies the NotNil predicate on the "trial_uuid" field.
func TrialUUIDNotNil() predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotNull(FieldTrialUUID))
}

// TrialUUIDEqualFold applies the EqualFold predicate on the "trial_uuid" field.
func TrialUUIDEqualFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEqualFold(FieldTrialUUID, v))
}

// TrialUUIDContainsFold applies the ContainsFold predicate on the "trial_uuid" field.
func TrialUUIDContainsFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContainsFold(FieldTrialUUID, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContainsFold(FieldModel, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotIn(FieldDataType, vs...))
}

// DataTypeGT applies the GT predicate on the "data_type" field.
func DataTypeGT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGT(FieldDataType, v))
}

// DataTypeGTE applies the GTE predicate on the "data_type" field.
func DataTypeGTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGTE(FieldDataType, v))
}

// DataTypeLT applies the LT predicate on the "data_type" field.
func DataTypeLT(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLT(FieldDataType, v))
}

// DataTypeLTE applies the LTE predicate on the "data_type" field.
func DataTypeLTE(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLTE(FieldDataType, v))
}

// DataTypeContains applies the Contains predicate on the "data_type" field.
func DataTypeContains(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContains(FieldDataType, v))
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "data_type" field.
func DataTypeHasPrefix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasPrefix(FieldDataType, v))
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "data_type" field.
func DataTypeHasSuffix(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldHasSuffix(FieldDataType, v))
}

// DataTypeEqualFold applies the EqualFold predicate on the "data_type" field.
func DataTypeEqualFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEqualFold(FieldDataType, v))
}

// DataTypeContainsFold applies the ContainsFold predicate on the "data_type" field.
func DataTypeContainsFold(v string) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldContainsFold(FieldDataType, v))
}

// IsModelSavedEQ applies the EQ predicate on the "is_model_saved" field.
func IsModelSavedEQ(v bool) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldIsModelSaved, v))
}

// IsModelSavedNEQ applies the NEQ predicate on the "is_model_saved" field.
func IsModelSavedNEQ(v bool) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldIsModelSaved, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TrialDetails {
	return predicate.TrialDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TrialDetails) predicate.TrialDetails {
	return predicate.TrialDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TrialDetails) predicate.TrialDetails {
	return predicate.TrialDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TrialDetails) predicate.TrialDetails {
	return predicate.TrialDetails(sql.NotPredicates(p))
}
