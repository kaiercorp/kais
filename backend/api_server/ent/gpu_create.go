// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/device"
	"api_server/ent/gpu"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GpuCreate is the builder for creating a Gpu entity.
type GpuCreate struct {
	config
	mutation *GpuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (gc *GpuCreate) SetUUID(s string) *GpuCreate {
	gc.mutation.SetUUID(s)
	return gc
}

// SetIndex sets the "index" field.
func (gc *GpuCreate) SetIndex(i int) *GpuCreate {
	gc.mutation.SetIndex(i)
	return gc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (gc *GpuCreate) SetNillableIndex(i *int) *GpuCreate {
	if i != nil {
		gc.SetIndex(*i)
	}
	return gc
}

// SetName sets the "name" field.
func (gc *GpuCreate) SetName(s string) *GpuCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetState sets the "state" field.
func (gc *GpuCreate) SetState(s string) *GpuCreate {
	gc.mutation.SetState(s)
	return gc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gc *GpuCreate) SetNillableState(s *string) *GpuCreate {
	if s != nil {
		gc.SetState(*s)
	}
	return gc
}

// SetIsUse sets the "is_use" field.
func (gc *GpuCreate) SetIsUse(b bool) *GpuCreate {
	gc.mutation.SetIsUse(b)
	return gc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (gc *GpuCreate) SetNillableIsUse(b *bool) *GpuCreate {
	if b != nil {
		gc.SetIsUse(*b)
	}
	return gc
}

// SetDeviceID sets the "device_id" field.
func (gc *GpuCreate) SetDeviceID(i int) *GpuCreate {
	gc.mutation.SetDeviceID(i)
	return gc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (gc *GpuCreate) SetNillableDeviceID(i *int) *GpuCreate {
	if i != nil {
		gc.SetDeviceID(*i)
	}
	return gc
}

// SetDevice sets the "device" edge to the Device entity.
func (gc *GpuCreate) SetDevice(d *Device) *GpuCreate {
	return gc.SetDeviceID(d.ID)
}

// Mutation returns the GpuMutation object of the builder.
func (gc *GpuCreate) Mutation() *GpuMutation {
	return gc.mutation
}

// Save creates the Gpu in the database.
func (gc *GpuCreate) Save(ctx context.Context) (*Gpu, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GpuCreate) SaveX(ctx context.Context) *Gpu {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GpuCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GpuCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GpuCreate) defaults() {
	if _, ok := gc.mutation.Index(); !ok {
		v := gpu.DefaultIndex
		gc.mutation.SetIndex(v)
	}
	if _, ok := gc.mutation.State(); !ok {
		v := gpu.DefaultState
		gc.mutation.SetState(v)
	}
	if _, ok := gc.mutation.IsUse(); !ok {
		v := gpu.DefaultIsUse
		gc.mutation.SetIsUse(v)
	}
	if _, ok := gc.mutation.DeviceID(); !ok {
		v := gpu.DefaultDeviceID
		gc.mutation.SetDeviceID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GpuCreate) check() error {
	if _, ok := gc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Gpu.uuid"`)}
	}
	if _, ok := gc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Gpu.index"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Gpu.name"`)}
	}
	if _, ok := gc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Gpu.state"`)}
	}
	if _, ok := gc.mutation.IsUse(); !ok {
		return &ValidationError{Name: "is_use", err: errors.New(`ent: missing required field "Gpu.is_use"`)}
	}
	return nil
}

func (gc *GpuCreate) sqlSave(ctx context.Context) (*Gpu, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GpuCreate) createSpec() (*Gpu, *sqlgraph.CreateSpec) {
	var (
		_node = &Gpu{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(gpu.Table, sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt))
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.UUID(); ok {
		_spec.SetField(gpu.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := gc.mutation.Index(); ok {
		_spec.SetField(gpu.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(gpu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.State(); ok {
		_spec.SetField(gpu.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := gc.mutation.IsUse(); ok {
		_spec.SetField(gpu.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	if nodes := gc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gpu.DeviceTable,
			Columns: []string{gpu.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Gpu.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GpuUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (gc *GpuCreate) OnConflict(opts ...sql.ConflictOption) *GpuUpsertOne {
	gc.conflict = opts
	return &GpuUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Gpu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GpuCreate) OnConflictColumns(columns ...string) *GpuUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GpuUpsertOne{
		create: gc,
	}
}

type (
	// GpuUpsertOne is the builder for "upsert"-ing
	//  one Gpu node.
	GpuUpsertOne struct {
		create *GpuCreate
	}

	// GpuUpsert is the "OnConflict" setter.
	GpuUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "uuid" field.
func (u *GpuUpsert) SetUUID(v string) *GpuUpsert {
	u.Set(gpu.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *GpuUpsert) UpdateUUID() *GpuUpsert {
	u.SetExcluded(gpu.FieldUUID)
	return u
}

// SetIndex sets the "index" field.
func (u *GpuUpsert) SetIndex(v int) *GpuUpsert {
	u.Set(gpu.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *GpuUpsert) UpdateIndex() *GpuUpsert {
	u.SetExcluded(gpu.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *GpuUpsert) AddIndex(v int) *GpuUpsert {
	u.Add(gpu.FieldIndex, v)
	return u
}

// SetName sets the "name" field.
func (u *GpuUpsert) SetName(v string) *GpuUpsert {
	u.Set(gpu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GpuUpsert) UpdateName() *GpuUpsert {
	u.SetExcluded(gpu.FieldName)
	return u
}

// SetState sets the "state" field.
func (u *GpuUpsert) SetState(v string) *GpuUpsert {
	u.Set(gpu.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GpuUpsert) UpdateState() *GpuUpsert {
	u.SetExcluded(gpu.FieldState)
	return u
}

// SetIsUse sets the "is_use" field.
func (u *GpuUpsert) SetIsUse(v bool) *GpuUpsert {
	u.Set(gpu.FieldIsUse, v)
	return u
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *GpuUpsert) UpdateIsUse() *GpuUpsert {
	u.SetExcluded(gpu.FieldIsUse)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *GpuUpsert) SetDeviceID(v int) *GpuUpsert {
	u.Set(gpu.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *GpuUpsert) UpdateDeviceID() *GpuUpsert {
	u.SetExcluded(gpu.FieldDeviceID)
	return u
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *GpuUpsert) ClearDeviceID() *GpuUpsert {
	u.SetNull(gpu.FieldDeviceID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Gpu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GpuUpsertOne) UpdateNewValues() *GpuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Gpu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GpuUpsertOne) Ignore() *GpuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GpuUpsertOne) DoNothing() *GpuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GpuCreate.OnConflict
// documentation for more info.
func (u *GpuUpsertOne) Update(set func(*GpuUpsert)) *GpuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GpuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *GpuUpsertOne) SetUUID(v string) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateUUID() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateUUID()
	})
}

// SetIndex sets the "index" field.
func (u *GpuUpsertOne) SetIndex(v int) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *GpuUpsertOne) AddIndex(v int) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateIndex() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateIndex()
	})
}

// SetName sets the "name" field.
func (u *GpuUpsertOne) SetName(v string) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateName() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateName()
	})
}

// SetState sets the "state" field.
func (u *GpuUpsertOne) SetState(v string) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateState() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateState()
	})
}

// SetIsUse sets the "is_use" field.
func (u *GpuUpsertOne) SetIsUse(v bool) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateIsUse() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateIsUse()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *GpuUpsertOne) SetDeviceID(v int) *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *GpuUpsertOne) UpdateDeviceID() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateDeviceID()
	})
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *GpuUpsertOne) ClearDeviceID() *GpuUpsertOne {
	return u.Update(func(s *GpuUpsert) {
		s.ClearDeviceID()
	})
}

// Exec executes the query.
func (u *GpuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GpuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GpuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GpuUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GpuUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GpuCreateBulk is the builder for creating many Gpu entities in bulk.
type GpuCreateBulk struct {
	config
	err      error
	builders []*GpuCreate
	conflict []sql.ConflictOption
}

// Save creates the Gpu entities in the database.
func (gcb *GpuCreateBulk) Save(ctx context.Context) ([]*Gpu, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Gpu, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GpuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GpuCreateBulk) SaveX(ctx context.Context) []*Gpu {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GpuCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GpuCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Gpu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GpuUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (gcb *GpuCreateBulk) OnConflict(opts ...sql.ConflictOption) *GpuUpsertBulk {
	gcb.conflict = opts
	return &GpuUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Gpu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GpuCreateBulk) OnConflictColumns(columns ...string) *GpuUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GpuUpsertBulk{
		create: gcb,
	}
}

// GpuUpsertBulk is the builder for "upsert"-ing
// a bulk of Gpu nodes.
type GpuUpsertBulk struct {
	create *GpuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Gpu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GpuUpsertBulk) UpdateNewValues() *GpuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Gpu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GpuUpsertBulk) Ignore() *GpuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GpuUpsertBulk) DoNothing() *GpuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GpuCreateBulk.OnConflict
// documentation for more info.
func (u *GpuUpsertBulk) Update(set func(*GpuUpsert)) *GpuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GpuUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *GpuUpsertBulk) SetUUID(v string) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateUUID() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateUUID()
	})
}

// SetIndex sets the "index" field.
func (u *GpuUpsertBulk) SetIndex(v int) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *GpuUpsertBulk) AddIndex(v int) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateIndex() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateIndex()
	})
}

// SetName sets the "name" field.
func (u *GpuUpsertBulk) SetName(v string) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateName() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateName()
	})
}

// SetState sets the "state" field.
func (u *GpuUpsertBulk) SetState(v string) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateState() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateState()
	})
}

// SetIsUse sets the "is_use" field.
func (u *GpuUpsertBulk) SetIsUse(v bool) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateIsUse() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateIsUse()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *GpuUpsertBulk) SetDeviceID(v int) *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *GpuUpsertBulk) UpdateDeviceID() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.UpdateDeviceID()
	})
}

// ClearDeviceID clears the value of the "device_id" field.
func (u *GpuUpsertBulk) ClearDeviceID() *GpuUpsertBulk {
	return u.Update(func(s *GpuUpsert) {
		s.ClearDeviceID()
	})
}

// Exec executes the query.
func (u *GpuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GpuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GpuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GpuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
