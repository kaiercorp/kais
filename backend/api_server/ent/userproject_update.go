// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/predicate"
	"api_server/ent/project"
	"api_server/ent/userproject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProjectUpdate is the builder for updating UserProject entities.
type UserProjectUpdate struct {
	config
	hooks     []Hook
	mutation  *UserProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upu *UserProjectUpdate) Where(ps ...predicate.UserProject) *UserProjectUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetProjectID sets the "project_id" field.
func (upu *UserProjectUpdate) SetProjectID(i int) *UserProjectUpdate {
	upu.mutation.SetProjectID(i)
	return upu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableProjectID(i *int) *UserProjectUpdate {
	if i != nil {
		upu.SetProjectID(*i)
	}
	return upu
}

// SetUsername sets the "username" field.
func (upu *UserProjectUpdate) SetUsername(s string) *UserProjectUpdate {
	upu.mutation.SetUsername(s)
	return upu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUsername(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetUsername(*s)
	}
	return upu
}

// SetIsUse sets the "is_use" field.
func (upu *UserProjectUpdate) SetIsUse(b bool) *UserProjectUpdate {
	upu.mutation.SetIsUse(b)
	return upu
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableIsUse(b *bool) *UserProjectUpdate {
	if b != nil {
		upu.SetIsUse(*b)
	}
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserProjectUpdate) SetUpdatedAt(t time.Time) *UserProjectUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUpdatedAt(t *time.Time) *UserProjectUpdate {
	if t != nil {
		upu.SetUpdatedAt(*t)
	}
	return upu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upu *UserProjectUpdate) ClearUpdatedAt() *UserProjectUpdate {
	upu.mutation.ClearUpdatedAt()
	return upu
}

// SetProject sets the "project" edge to the Project entity.
func (upu *UserProjectUpdate) SetProject(p *Project) *UserProjectUpdate {
	return upu.SetProjectID(p.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upu *UserProjectUpdate) Mutation() *UserProjectMutation {
	return upu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (upu *UserProjectUpdate) ClearProject() *UserProjectUpdate {
	upu.mutation.ClearProject()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProjectUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProjectUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserProjectUpdate) check() error {
	if _, ok := upu.mutation.ProjectID(); upu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProject.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UserProjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserProjectUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UserProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.Username(); ok {
		_spec.SetField(userproject.FieldUsername, field.TypeString, value)
	}
	if value, ok := upu.mutation.IsUse(); ok {
		_spec.SetField(userproject.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if upu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userproject.FieldUpdatedAt, field.TypeTime)
	}
	if upu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.ProjectTable,
			Columns: []string{userproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.ProjectTable,
			Columns: []string{userproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProjectUpdateOne is the builder for updating a single UserProject entity.
type UserProjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProjectID sets the "project_id" field.
func (upuo *UserProjectUpdateOne) SetProjectID(i int) *UserProjectUpdateOne {
	upuo.mutation.SetProjectID(i)
	return upuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableProjectID(i *int) *UserProjectUpdateOne {
	if i != nil {
		upuo.SetProjectID(*i)
	}
	return upuo
}

// SetUsername sets the "username" field.
func (upuo *UserProjectUpdateOne) SetUsername(s string) *UserProjectUpdateOne {
	upuo.mutation.SetUsername(s)
	return upuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUsername(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetUsername(*s)
	}
	return upuo
}

// SetIsUse sets the "is_use" field.
func (upuo *UserProjectUpdateOne) SetIsUse(b bool) *UserProjectUpdateOne {
	upuo.mutation.SetIsUse(b)
	return upuo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableIsUse(b *bool) *UserProjectUpdateOne {
	if b != nil {
		upuo.SetIsUse(*b)
	}
	return upuo
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserProjectUpdateOne) SetUpdatedAt(t time.Time) *UserProjectUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserProjectUpdateOne {
	if t != nil {
		upuo.SetUpdatedAt(*t)
	}
	return upuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upuo *UserProjectUpdateOne) ClearUpdatedAt() *UserProjectUpdateOne {
	upuo.mutation.ClearUpdatedAt()
	return upuo
}

// SetProject sets the "project" edge to the Project entity.
func (upuo *UserProjectUpdateOne) SetProject(p *Project) *UserProjectUpdateOne {
	return upuo.SetProjectID(p.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upuo *UserProjectUpdateOne) Mutation() *UserProjectMutation {
	return upuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (upuo *UserProjectUpdateOne) ClearProject() *UserProjectUpdateOne {
	upuo.mutation.ClearProject()
	return upuo
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upuo *UserProjectUpdateOne) Where(ps ...predicate.UserProject) *UserProjectUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProjectUpdateOne) Select(field string, fields ...string) *UserProjectUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProject entity.
func (upuo *UserProjectUpdateOne) Save(ctx context.Context) (*UserProject, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) SaveX(ctx context.Context) *UserProject {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserProjectUpdateOne) check() error {
	if _, ok := upuo.mutation.ProjectID(); upuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserProject.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UserProjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserProjectUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UserProjectUpdateOne) sqlSave(ctx context.Context) (_node *UserProject, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userproject.FieldID)
		for _, f := range fields {
			if !userproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.Username(); ok {
		_spec.SetField(userproject.FieldUsername, field.TypeString, value)
	}
	if value, ok := upuo.mutation.IsUse(); ok {
		_spec.SetField(userproject.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if upuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userproject.FieldUpdatedAt, field.TypeTime)
	}
	if upuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.ProjectTable,
			Columns: []string{userproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.ProjectTable,
			Columns: []string{userproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UserProject{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
