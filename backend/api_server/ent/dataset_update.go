// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DatasetUpdate is the builder for updating Dataset entities.
type DatasetUpdate struct {
	config
	hooks     []Hook
	mutation  *DatasetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DatasetUpdate builder.
func (du *DatasetUpdate) Where(ps ...predicate.Dataset) *DatasetUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DatasetUpdate) SetName(s string) *DatasetUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableName(s *string) *DatasetUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetParentID sets the "parent_id" field.
func (du *DatasetUpdate) SetParentID(i int) *DatasetUpdate {
	du.mutation.ResetParentID()
	du.mutation.SetParentID(i)
	return du
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableParentID(i *int) *DatasetUpdate {
	if i != nil {
		du.SetParentID(*i)
	}
	return du
}

// AddParentID adds i to the "parent_id" field.
func (du *DatasetUpdate) AddParentID(i int) *DatasetUpdate {
	du.mutation.AddParentID(i)
	return du
}

// ClearParentID clears the value of the "parent_id" field.
func (du *DatasetUpdate) ClearParentID() *DatasetUpdate {
	du.mutation.ClearParentID()
	return du
}

// SetDescription sets the "description" field.
func (du *DatasetUpdate) SetDescription(s string) *DatasetUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableDescription(s *string) *DatasetUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DatasetUpdate) ClearDescription() *DatasetUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetPath sets the "path" field.
func (du *DatasetUpdate) SetPath(s string) *DatasetUpdate {
	du.mutation.SetPath(s)
	return du
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (du *DatasetUpdate) SetNillablePath(s *string) *DatasetUpdate {
	if s != nil {
		du.SetPath(*s)
	}
	return du
}

// SetIsValid sets the "is_valid" field.
func (du *DatasetUpdate) SetIsValid(b bool) *DatasetUpdate {
	du.mutation.SetIsValid(b)
	return du
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsValid(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsValid(*b)
	}
	return du
}

// SetIsTrainable sets the "is_trainable" field.
func (du *DatasetUpdate) SetIsTrainable(b bool) *DatasetUpdate {
	du.mutation.SetIsTrainable(b)
	return du
}

// SetNillableIsTrainable sets the "is_trainable" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsTrainable(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsTrainable(*b)
	}
	return du
}

// SetIsTestable sets the "is_testable" field.
func (du *DatasetUpdate) SetIsTestable(b bool) *DatasetUpdate {
	du.mutation.SetIsTestable(b)
	return du
}

// SetNillableIsTestable sets the "is_testable" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsTestable(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsTestable(*b)
	}
	return du
}

// SetIsLeaf sets the "is_leaf" field.
func (du *DatasetUpdate) SetIsLeaf(b bool) *DatasetUpdate {
	du.mutation.SetIsLeaf(b)
	return du
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsLeaf(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsLeaf(*b)
	}
	return du
}

// SetIsDeleted sets the "is_deleted" field.
func (du *DatasetUpdate) SetIsDeleted(b bool) *DatasetUpdate {
	du.mutation.SetIsDeleted(b)
	return du
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsDeleted(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsDeleted(*b)
	}
	return du
}

// SetIsUse sets the "is_use" field.
func (du *DatasetUpdate) SetIsUse(b bool) *DatasetUpdate {
	du.mutation.SetIsUse(b)
	return du
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableIsUse(b *bool) *DatasetUpdate {
	if b != nil {
		du.SetIsUse(*b)
	}
	return du
}

// SetStat sets the "stat" field.
func (du *DatasetUpdate) SetStat(s []string) *DatasetUpdate {
	du.mutation.SetStat(s)
	return du
}

// AppendStat appends s to the "stat" field.
func (du *DatasetUpdate) AppendStat(s []string) *DatasetUpdate {
	du.mutation.AppendStat(s)
	return du
}

// SetStatPath sets the "stat_path" field.
func (du *DatasetUpdate) SetStatPath(s string) *DatasetUpdate {
	du.mutation.SetStatPath(s)
	return du
}

// SetNillableStatPath sets the "stat_path" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableStatPath(s *string) *DatasetUpdate {
	if s != nil {
		du.SetStatPath(*s)
	}
	return du
}

// ClearStatPath clears the value of the "stat_path" field.
func (du *DatasetUpdate) ClearStatPath() *DatasetUpdate {
	du.mutation.ClearStatPath()
	return du
}

// SetEngine sets the "engine" field.
func (du *DatasetUpdate) SetEngine(s []string) *DatasetUpdate {
	du.mutation.SetEngine(s)
	return du
}

// AppendEngine appends s to the "engine" field.
func (du *DatasetUpdate) AppendEngine(s []string) *DatasetUpdate {
	du.mutation.AppendEngine(s)
	return du
}

// ClearEngine clears the value of the "engine" field.
func (du *DatasetUpdate) ClearEngine() *DatasetUpdate {
	du.mutation.ClearEngine()
	return du
}

// SetDataType sets the "data_type" field.
func (du *DatasetUpdate) SetDataType(s string) *DatasetUpdate {
	du.mutation.SetDataType(s)
	return du
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableDataType(s *string) *DatasetUpdate {
	if s != nil {
		du.SetDataType(*s)
	}
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DatasetUpdate) SetCreatedAt(t time.Time) *DatasetUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableCreatedAt(t *time.Time) *DatasetUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DatasetUpdate) SetUpdatedAt(t time.Time) *DatasetUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableUpdatedAt(t *time.Time) *DatasetUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DatasetUpdate) SetDeletedAt(t time.Time) *DatasetUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableDeletedAt(t *time.Time) *DatasetUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// SetDrID sets the "dr_id" field.
func (du *DatasetUpdate) SetDrID(i int) *DatasetUpdate {
	du.mutation.ResetDrID()
	du.mutation.SetDrID(i)
	return du
}

// SetNillableDrID sets the "dr_id" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableDrID(i *int) *DatasetUpdate {
	if i != nil {
		du.SetDrID(*i)
	}
	return du
}

// AddDrID adds i to the "dr_id" field.
func (du *DatasetUpdate) AddDrID(i int) *DatasetUpdate {
	du.mutation.AddDrID(i)
	return du
}

// ClearDrID clears the value of the "dr_id" field.
func (du *DatasetUpdate) ClearDrID() *DatasetUpdate {
	du.mutation.ClearDrID()
	return du
}

// SetDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID.
func (du *DatasetUpdate) SetDatasetrootID(id int) *DatasetUpdate {
	du.mutation.SetDatasetrootID(id)
	return du
}

// SetNillableDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID if the given value is not nil.
func (du *DatasetUpdate) SetNillableDatasetrootID(id *int) *DatasetUpdate {
	if id != nil {
		du = du.SetDatasetrootID(*id)
	}
	return du
}

// SetDatasetroot sets the "datasetroot" edge to the DatasetRoot entity.
func (du *DatasetUpdate) SetDatasetroot(d *DatasetRoot) *DatasetUpdate {
	return du.SetDatasetrootID(d.ID)
}

// Mutation returns the DatasetMutation object of the builder.
func (du *DatasetUpdate) Mutation() *DatasetMutation {
	return du.mutation
}

// ClearDatasetroot clears the "datasetroot" edge to the DatasetRoot entity.
func (du *DatasetUpdate) ClearDatasetroot() *DatasetUpdate {
	du.mutation.ClearDatasetroot()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatasetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatasetUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatasetUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatasetUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DatasetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatasetUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DatasetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dataset.Table, dataset.Columns, sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.ParentID(); ok {
		_spec.SetField(dataset.FieldParentID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedParentID(); ok {
		_spec.AddField(dataset.FieldParentID, field.TypeInt, value)
	}
	if du.mutation.ParentIDCleared() {
		_spec.ClearField(dataset.FieldParentID, field.TypeInt)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(dataset.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(dataset.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.Path(); ok {
		_spec.SetField(dataset.FieldPath, field.TypeString, value)
	}
	if value, ok := du.mutation.IsValid(); ok {
		_spec.SetField(dataset.FieldIsValid, field.TypeBool, value)
	}
	if value, ok := du.mutation.IsTrainable(); ok {
		_spec.SetField(dataset.FieldIsTrainable, field.TypeBool, value)
	}
	if value, ok := du.mutation.IsTestable(); ok {
		_spec.SetField(dataset.FieldIsTestable, field.TypeBool, value)
	}
	if value, ok := du.mutation.IsLeaf(); ok {
		_spec.SetField(dataset.FieldIsLeaf, field.TypeBool, value)
	}
	if value, ok := du.mutation.IsDeleted(); ok {
		_spec.SetField(dataset.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := du.mutation.IsUse(); ok {
		_spec.SetField(dataset.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := du.mutation.Stat(); ok {
		_spec.SetField(dataset.FieldStat, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedStat(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dataset.FieldStat, value)
		})
	}
	if value, ok := du.mutation.StatPath(); ok {
		_spec.SetField(dataset.FieldStatPath, field.TypeString, value)
	}
	if du.mutation.StatPathCleared() {
		_spec.ClearField(dataset.FieldStatPath, field.TypeString)
	}
	if value, ok := du.mutation.Engine(); ok {
		_spec.SetField(dataset.FieldEngine, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedEngine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dataset.FieldEngine, value)
		})
	}
	if du.mutation.EngineCleared() {
		_spec.ClearField(dataset.FieldEngine, field.TypeJSON)
	}
	if value, ok := du.mutation.DataType(); ok {
		_spec.SetField(dataset.FieldDataType, field.TypeString, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(dataset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dataset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(dataset.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.DrID(); ok {
		_spec.SetField(dataset.FieldDrID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDrID(); ok {
		_spec.AddField(dataset.FieldDrID, field.TypeInt, value)
	}
	if du.mutation.DrIDCleared() {
		_spec.ClearField(dataset.FieldDrID, field.TypeInt)
	}
	if du.mutation.DatasetrootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.DatasetrootTable,
			Columns: []string{dataset.DatasetrootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DatasetrootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.DatasetrootTable,
			Columns: []string{dataset.DatasetrootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DatasetUpdateOne is the builder for updating a single Dataset entity.
type DatasetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DatasetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (duo *DatasetUpdateOne) SetName(s string) *DatasetUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableName(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetParentID sets the "parent_id" field.
func (duo *DatasetUpdateOne) SetParentID(i int) *DatasetUpdateOne {
	duo.mutation.ResetParentID()
	duo.mutation.SetParentID(i)
	return duo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableParentID(i *int) *DatasetUpdateOne {
	if i != nil {
		duo.SetParentID(*i)
	}
	return duo
}

// AddParentID adds i to the "parent_id" field.
func (duo *DatasetUpdateOne) AddParentID(i int) *DatasetUpdateOne {
	duo.mutation.AddParentID(i)
	return duo
}

// ClearParentID clears the value of the "parent_id" field.
func (duo *DatasetUpdateOne) ClearParentID() *DatasetUpdateOne {
	duo.mutation.ClearParentID()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DatasetUpdateOne) SetDescription(s string) *DatasetUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableDescription(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DatasetUpdateOne) ClearDescription() *DatasetUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetPath sets the "path" field.
func (duo *DatasetUpdateOne) SetPath(s string) *DatasetUpdateOne {
	duo.mutation.SetPath(s)
	return duo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillablePath(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetPath(*s)
	}
	return duo
}

// SetIsValid sets the "is_valid" field.
func (duo *DatasetUpdateOne) SetIsValid(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsValid(b)
	return duo
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsValid(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsValid(*b)
	}
	return duo
}

// SetIsTrainable sets the "is_trainable" field.
func (duo *DatasetUpdateOne) SetIsTrainable(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsTrainable(b)
	return duo
}

// SetNillableIsTrainable sets the "is_trainable" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsTrainable(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsTrainable(*b)
	}
	return duo
}

// SetIsTestable sets the "is_testable" field.
func (duo *DatasetUpdateOne) SetIsTestable(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsTestable(b)
	return duo
}

// SetNillableIsTestable sets the "is_testable" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsTestable(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsTestable(*b)
	}
	return duo
}

// SetIsLeaf sets the "is_leaf" field.
func (duo *DatasetUpdateOne) SetIsLeaf(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsLeaf(b)
	return duo
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsLeaf(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsLeaf(*b)
	}
	return duo
}

// SetIsDeleted sets the "is_deleted" field.
func (duo *DatasetUpdateOne) SetIsDeleted(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsDeleted(b)
	return duo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsDeleted(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsDeleted(*b)
	}
	return duo
}

// SetIsUse sets the "is_use" field.
func (duo *DatasetUpdateOne) SetIsUse(b bool) *DatasetUpdateOne {
	duo.mutation.SetIsUse(b)
	return duo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableIsUse(b *bool) *DatasetUpdateOne {
	if b != nil {
		duo.SetIsUse(*b)
	}
	return duo
}

// SetStat sets the "stat" field.
func (duo *DatasetUpdateOne) SetStat(s []string) *DatasetUpdateOne {
	duo.mutation.SetStat(s)
	return duo
}

// AppendStat appends s to the "stat" field.
func (duo *DatasetUpdateOne) AppendStat(s []string) *DatasetUpdateOne {
	duo.mutation.AppendStat(s)
	return duo
}

// SetStatPath sets the "stat_path" field.
func (duo *DatasetUpdateOne) SetStatPath(s string) *DatasetUpdateOne {
	duo.mutation.SetStatPath(s)
	return duo
}

// SetNillableStatPath sets the "stat_path" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableStatPath(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetStatPath(*s)
	}
	return duo
}

// ClearStatPath clears the value of the "stat_path" field.
func (duo *DatasetUpdateOne) ClearStatPath() *DatasetUpdateOne {
	duo.mutation.ClearStatPath()
	return duo
}

// SetEngine sets the "engine" field.
func (duo *DatasetUpdateOne) SetEngine(s []string) *DatasetUpdateOne {
	duo.mutation.SetEngine(s)
	return duo
}

// AppendEngine appends s to the "engine" field.
func (duo *DatasetUpdateOne) AppendEngine(s []string) *DatasetUpdateOne {
	duo.mutation.AppendEngine(s)
	return duo
}

// ClearEngine clears the value of the "engine" field.
func (duo *DatasetUpdateOne) ClearEngine() *DatasetUpdateOne {
	duo.mutation.ClearEngine()
	return duo
}

// SetDataType sets the "data_type" field.
func (duo *DatasetUpdateOne) SetDataType(s string) *DatasetUpdateOne {
	duo.mutation.SetDataType(s)
	return duo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableDataType(s *string) *DatasetUpdateOne {
	if s != nil {
		duo.SetDataType(*s)
	}
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DatasetUpdateOne) SetCreatedAt(t time.Time) *DatasetUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableCreatedAt(t *time.Time) *DatasetUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DatasetUpdateOne) SetUpdatedAt(t time.Time) *DatasetUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableUpdatedAt(t *time.Time) *DatasetUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DatasetUpdateOne) SetDeletedAt(t time.Time) *DatasetUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableDeletedAt(t *time.Time) *DatasetUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// SetDrID sets the "dr_id" field.
func (duo *DatasetUpdateOne) SetDrID(i int) *DatasetUpdateOne {
	duo.mutation.ResetDrID()
	duo.mutation.SetDrID(i)
	return duo
}

// SetNillableDrID sets the "dr_id" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableDrID(i *int) *DatasetUpdateOne {
	if i != nil {
		duo.SetDrID(*i)
	}
	return duo
}

// AddDrID adds i to the "dr_id" field.
func (duo *DatasetUpdateOne) AddDrID(i int) *DatasetUpdateOne {
	duo.mutation.AddDrID(i)
	return duo
}

// ClearDrID clears the value of the "dr_id" field.
func (duo *DatasetUpdateOne) ClearDrID() *DatasetUpdateOne {
	duo.mutation.ClearDrID()
	return duo
}

// SetDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID.
func (duo *DatasetUpdateOne) SetDatasetrootID(id int) *DatasetUpdateOne {
	duo.mutation.SetDatasetrootID(id)
	return duo
}

// SetNillableDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableDatasetrootID(id *int) *DatasetUpdateOne {
	if id != nil {
		duo = duo.SetDatasetrootID(*id)
	}
	return duo
}

// SetDatasetroot sets the "datasetroot" edge to the DatasetRoot entity.
func (duo *DatasetUpdateOne) SetDatasetroot(d *DatasetRoot) *DatasetUpdateOne {
	return duo.SetDatasetrootID(d.ID)
}

// Mutation returns the DatasetMutation object of the builder.
func (duo *DatasetUpdateOne) Mutation() *DatasetMutation {
	return duo.mutation
}

// ClearDatasetroot clears the "datasetroot" edge to the DatasetRoot entity.
func (duo *DatasetUpdateOne) ClearDatasetroot() *DatasetUpdateOne {
	duo.mutation.ClearDatasetroot()
	return duo
}

// Where appends a list predicates to the DatasetUpdate builder.
func (duo *DatasetUpdateOne) Where(ps ...predicate.Dataset) *DatasetUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatasetUpdateOne) Select(field string, fields ...string) *DatasetUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dataset entity.
func (duo *DatasetUpdateOne) Save(ctx context.Context) (*Dataset, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatasetUpdateOne) SaveX(ctx context.Context) *Dataset {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatasetUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatasetUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DatasetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatasetUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DatasetUpdateOne) sqlSave(ctx context.Context) (_node *Dataset, err error) {
	_spec := sqlgraph.NewUpdateSpec(dataset.Table, dataset.Columns, sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dataset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dataset.FieldID)
		for _, f := range fields {
			if !dataset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dataset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.ParentID(); ok {
		_spec.SetField(dataset.FieldParentID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedParentID(); ok {
		_spec.AddField(dataset.FieldParentID, field.TypeInt, value)
	}
	if duo.mutation.ParentIDCleared() {
		_spec.ClearField(dataset.FieldParentID, field.TypeInt)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(dataset.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(dataset.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.Path(); ok {
		_spec.SetField(dataset.FieldPath, field.TypeString, value)
	}
	if value, ok := duo.mutation.IsValid(); ok {
		_spec.SetField(dataset.FieldIsValid, field.TypeBool, value)
	}
	if value, ok := duo.mutation.IsTrainable(); ok {
		_spec.SetField(dataset.FieldIsTrainable, field.TypeBool, value)
	}
	if value, ok := duo.mutation.IsTestable(); ok {
		_spec.SetField(dataset.FieldIsTestable, field.TypeBool, value)
	}
	if value, ok := duo.mutation.IsLeaf(); ok {
		_spec.SetField(dataset.FieldIsLeaf, field.TypeBool, value)
	}
	if value, ok := duo.mutation.IsDeleted(); ok {
		_spec.SetField(dataset.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := duo.mutation.IsUse(); ok {
		_spec.SetField(dataset.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := duo.mutation.Stat(); ok {
		_spec.SetField(dataset.FieldStat, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedStat(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dataset.FieldStat, value)
		})
	}
	if value, ok := duo.mutation.StatPath(); ok {
		_spec.SetField(dataset.FieldStatPath, field.TypeString, value)
	}
	if duo.mutation.StatPathCleared() {
		_spec.ClearField(dataset.FieldStatPath, field.TypeString)
	}
	if value, ok := duo.mutation.Engine(); ok {
		_spec.SetField(dataset.FieldEngine, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedEngine(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dataset.FieldEngine, value)
		})
	}
	if duo.mutation.EngineCleared() {
		_spec.ClearField(dataset.FieldEngine, field.TypeJSON)
	}
	if value, ok := duo.mutation.DataType(); ok {
		_spec.SetField(dataset.FieldDataType, field.TypeString, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(dataset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dataset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(dataset.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DrID(); ok {
		_spec.SetField(dataset.FieldDrID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDrID(); ok {
		_spec.AddField(dataset.FieldDrID, field.TypeInt, value)
	}
	if duo.mutation.DrIDCleared() {
		_spec.ClearField(dataset.FieldDrID, field.TypeInt)
	}
	if duo.mutation.DatasetrootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.DatasetrootTable,
			Columns: []string{dataset.DatasetrootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DatasetrootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.DatasetrootTable,
			Columns: []string{dataset.DatasetrootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Dataset{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
