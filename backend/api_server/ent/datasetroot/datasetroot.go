// Code generated by ent, DO NOT EDIT.

package datasetroot

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the datasetroot type in the database.
	Label = "dataset_root"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// EdgeDatasets holds the string denoting the datasets edge name in mutations.
	EdgeDatasets = "datasets"
	// Table holds the table name of the datasetroot in the database.
	Table = "dataset_root"
	// DatasetsTable is the table that holds the datasets relation/edge.
	DatasetsTable = "dataset"
	// DatasetsInverseTable is the table name for the Dataset entity.
	// It exists in this package in order to avoid circular dependency with the "dataset" package.
	DatasetsInverseTable = "dataset"
	// DatasetsColumn is the table column denoting the datasets relation/edge.
	DatasetsColumn = "dataset_root_datasets"
)

// Columns holds all SQL columns for datasetroot fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPath,
	FieldIsUse,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
)

// OrderOption defines the ordering options for the DatasetRoot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}

// ByDatasetsCount orders the results by datasets count.
func ByDatasetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDatasetsStep(), opts...)
	}
}

// ByDatasets orders the results by datasets terms.
func ByDatasets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatasetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDatasetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatasetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DatasetsTable, DatasetsColumn),
	)
}
