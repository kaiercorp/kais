// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatasetRootCreate is the builder for creating a DatasetRoot entity.
type DatasetRootCreate struct {
	config
	mutation *DatasetRootMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (drc *DatasetRootCreate) SetName(s string) *DatasetRootCreate {
	drc.mutation.SetName(s)
	return drc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (drc *DatasetRootCreate) SetNillableName(s *string) *DatasetRootCreate {
	if s != nil {
		drc.SetName(*s)
	}
	return drc
}

// SetPath sets the "path" field.
func (drc *DatasetRootCreate) SetPath(s string) *DatasetRootCreate {
	drc.mutation.SetPath(s)
	return drc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (drc *DatasetRootCreate) SetNillablePath(s *string) *DatasetRootCreate {
	if s != nil {
		drc.SetPath(*s)
	}
	return drc
}

// SetIsUse sets the "is_use" field.
func (drc *DatasetRootCreate) SetIsUse(b bool) *DatasetRootCreate {
	drc.mutation.SetIsUse(b)
	return drc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (drc *DatasetRootCreate) SetNillableIsUse(b *bool) *DatasetRootCreate {
	if b != nil {
		drc.SetIsUse(*b)
	}
	return drc
}

// SetID sets the "id" field.
func (drc *DatasetRootCreate) SetID(i int) *DatasetRootCreate {
	drc.mutation.SetID(i)
	return drc
}

// AddDatasetIDs adds the "datasets" edge to the Dataset entity by IDs.
func (drc *DatasetRootCreate) AddDatasetIDs(ids ...int) *DatasetRootCreate {
	drc.mutation.AddDatasetIDs(ids...)
	return drc
}

// AddDatasets adds the "datasets" edges to the Dataset entity.
func (drc *DatasetRootCreate) AddDatasets(d ...*Dataset) *DatasetRootCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drc.AddDatasetIDs(ids...)
}

// Mutation returns the DatasetRootMutation object of the builder.
func (drc *DatasetRootCreate) Mutation() *DatasetRootMutation {
	return drc.mutation
}

// Save creates the DatasetRoot in the database.
func (drc *DatasetRootCreate) Save(ctx context.Context) (*DatasetRoot, error) {
	drc.defaults()
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DatasetRootCreate) SaveX(ctx context.Context) *DatasetRoot {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DatasetRootCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DatasetRootCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DatasetRootCreate) defaults() {
	if _, ok := drc.mutation.Name(); !ok {
		v := datasetroot.DefaultName
		drc.mutation.SetName(v)
	}
	if _, ok := drc.mutation.Path(); !ok {
		v := datasetroot.DefaultPath
		drc.mutation.SetPath(v)
	}
	if _, ok := drc.mutation.IsUse(); !ok {
		v := datasetroot.DefaultIsUse
		drc.mutation.SetIsUse(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DatasetRootCreate) check() error {
	if _, ok := drc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DatasetRoot.name"`)}
	}
	if _, ok := drc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "DatasetRoot.path"`)}
	}
	if _, ok := drc.mutation.IsUse(); !ok {
		return &ValidationError{Name: "is_use", err: errors.New(`ent: missing required field "DatasetRoot.is_use"`)}
	}
	return nil
}

func (drc *DatasetRootCreate) sqlSave(ctx context.Context) (*DatasetRoot, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DatasetRootCreate) createSpec() (*DatasetRoot, *sqlgraph.CreateSpec) {
	var (
		_node = &DatasetRoot{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(datasetroot.Table, sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt))
	)
	_spec.OnConflict = drc.conflict
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drc.mutation.Name(); ok {
		_spec.SetField(datasetroot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := drc.mutation.Path(); ok {
		_spec.SetField(datasetroot.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := drc.mutation.IsUse(); ok {
		_spec.SetField(datasetroot.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	if nodes := drc.mutation.DatasetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasetroot.DatasetsTable,
			Columns: []string{datasetroot.DatasetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DatasetRoot.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DatasetRootUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (drc *DatasetRootCreate) OnConflict(opts ...sql.ConflictOption) *DatasetRootUpsertOne {
	drc.conflict = opts
	return &DatasetRootUpsertOne{
		create: drc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drc *DatasetRootCreate) OnConflictColumns(columns ...string) *DatasetRootUpsertOne {
	drc.conflict = append(drc.conflict, sql.ConflictColumns(columns...))
	return &DatasetRootUpsertOne{
		create: drc,
	}
}

type (
	// DatasetRootUpsertOne is the builder for "upsert"-ing
	//  one DatasetRoot node.
	DatasetRootUpsertOne struct {
		create *DatasetRootCreate
	}

	// DatasetRootUpsert is the "OnConflict" setter.
	DatasetRootUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DatasetRootUpsert) SetName(v string) *DatasetRootUpsert {
	u.Set(datasetroot.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetRootUpsert) UpdateName() *DatasetRootUpsert {
	u.SetExcluded(datasetroot.FieldName)
	return u
}

// SetPath sets the "path" field.
func (u *DatasetRootUpsert) SetPath(v string) *DatasetRootUpsert {
	u.Set(datasetroot.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetRootUpsert) UpdatePath() *DatasetRootUpsert {
	u.SetExcluded(datasetroot.FieldPath)
	return u
}

// SetIsUse sets the "is_use" field.
func (u *DatasetRootUpsert) SetIsUse(v bool) *DatasetRootUpsert {
	u.Set(datasetroot.FieldIsUse, v)
	return u
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetRootUpsert) UpdateIsUse() *DatasetRootUpsert {
	u.SetExcluded(datasetroot.FieldIsUse)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(datasetroot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DatasetRootUpsertOne) UpdateNewValues() *DatasetRootUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(datasetroot.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DatasetRootUpsertOne) Ignore() *DatasetRootUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DatasetRootUpsertOne) DoNothing() *DatasetRootUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DatasetRootCreate.OnConflict
// documentation for more info.
func (u *DatasetRootUpsertOne) Update(set func(*DatasetRootUpsert)) *DatasetRootUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DatasetRootUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DatasetRootUpsertOne) SetName(v string) *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetRootUpsertOne) UpdateName() *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *DatasetRootUpsertOne) SetPath(v string) *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetRootUpsertOne) UpdatePath() *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdatePath()
	})
}

// SetIsUse sets the "is_use" field.
func (u *DatasetRootUpsertOne) SetIsUse(v bool) *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetRootUpsertOne) UpdateIsUse() *DatasetRootUpsertOne {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdateIsUse()
	})
}

// Exec executes the query.
func (u *DatasetRootUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DatasetRootCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DatasetRootUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DatasetRootUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DatasetRootUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DatasetRootCreateBulk is the builder for creating many DatasetRoot entities in bulk.
type DatasetRootCreateBulk struct {
	config
	err      error
	builders []*DatasetRootCreate
	conflict []sql.ConflictOption
}

// Save creates the DatasetRoot entities in the database.
func (drcb *DatasetRootCreateBulk) Save(ctx context.Context) ([]*DatasetRoot, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DatasetRoot, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatasetRootMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DatasetRootCreateBulk) SaveX(ctx context.Context) []*DatasetRoot {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DatasetRootCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DatasetRootCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DatasetRoot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DatasetRootUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (drcb *DatasetRootCreateBulk) OnConflict(opts ...sql.ConflictOption) *DatasetRootUpsertBulk {
	drcb.conflict = opts
	return &DatasetRootUpsertBulk{
		create: drcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcb *DatasetRootCreateBulk) OnConflictColumns(columns ...string) *DatasetRootUpsertBulk {
	drcb.conflict = append(drcb.conflict, sql.ConflictColumns(columns...))
	return &DatasetRootUpsertBulk{
		create: drcb,
	}
}

// DatasetRootUpsertBulk is the builder for "upsert"-ing
// a bulk of DatasetRoot nodes.
type DatasetRootUpsertBulk struct {
	create *DatasetRootCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(datasetroot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DatasetRootUpsertBulk) UpdateNewValues() *DatasetRootUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(datasetroot.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DatasetRoot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DatasetRootUpsertBulk) Ignore() *DatasetRootUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DatasetRootUpsertBulk) DoNothing() *DatasetRootUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DatasetRootCreateBulk.OnConflict
// documentation for more info.
func (u *DatasetRootUpsertBulk) Update(set func(*DatasetRootUpsert)) *DatasetRootUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DatasetRootUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DatasetRootUpsertBulk) SetName(v string) *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetRootUpsertBulk) UpdateName() *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *DatasetRootUpsertBulk) SetPath(v string) *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetRootUpsertBulk) UpdatePath() *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdatePath()
	})
}

// SetIsUse sets the "is_use" field.
func (u *DatasetRootUpsertBulk) SetIsUse(v bool) *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetRootUpsertBulk) UpdateIsUse() *DatasetRootUpsertBulk {
	return u.Update(func(s *DatasetRootUpsert) {
		s.UpdateIsUse()
	})
}

// Exec executes the query.
func (u *DatasetRootUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DatasetRootCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DatasetRootCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DatasetRootUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
