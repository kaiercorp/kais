// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/hyperparamshistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HyperParamsHistoryCreate is the builder for creating a HyperParamsHistory entity.
type HyperParamsHistoryCreate struct {
	config
	mutation *HyperParamsHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTrialID sets the "trial_id" field.
func (hphc *HyperParamsHistoryCreate) SetTrialID(i int) *HyperParamsHistoryCreate {
	hphc.mutation.SetTrialID(i)
	return hphc
}

// SetNillableTrialID sets the "trial_id" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableTrialID(i *int) *HyperParamsHistoryCreate {
	if i != nil {
		hphc.SetTrialID(*i)
	}
	return hphc
}

// SetTrialUUID sets the "trial_uuid" field.
func (hphc *HyperParamsHistoryCreate) SetTrialUUID(s string) *HyperParamsHistoryCreate {
	hphc.mutation.SetTrialUUID(s)
	return hphc
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableTrialUUID(s *string) *HyperParamsHistoryCreate {
	if s != nil {
		hphc.SetTrialUUID(*s)
	}
	return hphc
}

// SetModel sets the "model" field.
func (hphc *HyperParamsHistoryCreate) SetModel(s string) *HyperParamsHistoryCreate {
	hphc.mutation.SetModel(s)
	return hphc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableModel(s *string) *HyperParamsHistoryCreate {
	if s != nil {
		hphc.SetModel(*s)
	}
	return hphc
}

// SetModelNum sets the "model_num" field.
func (hphc *HyperParamsHistoryCreate) SetModelNum(i int) *HyperParamsHistoryCreate {
	hphc.mutation.SetModelNum(i)
	return hphc
}

// SetNillableModelNum sets the "model_num" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableModelNum(i *int) *HyperParamsHistoryCreate {
	if i != nil {
		hphc.SetModelNum(*i)
	}
	return hphc
}

// SetParams sets the "params" field.
func (hphc *HyperParamsHistoryCreate) SetParams(s string) *HyperParamsHistoryCreate {
	hphc.mutation.SetParams(s)
	return hphc
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableParams(s *string) *HyperParamsHistoryCreate {
	if s != nil {
		hphc.SetParams(*s)
	}
	return hphc
}

// SetCreatedAt sets the "created_at" field.
func (hphc *HyperParamsHistoryCreate) SetCreatedAt(t time.Time) *HyperParamsHistoryCreate {
	hphc.mutation.SetCreatedAt(t)
	return hphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hphc *HyperParamsHistoryCreate) SetNillableCreatedAt(t *time.Time) *HyperParamsHistoryCreate {
	if t != nil {
		hphc.SetCreatedAt(*t)
	}
	return hphc
}

// SetID sets the "id" field.
func (hphc *HyperParamsHistoryCreate) SetID(i int) *HyperParamsHistoryCreate {
	hphc.mutation.SetID(i)
	return hphc
}

// Mutation returns the HyperParamsHistoryMutation object of the builder.
func (hphc *HyperParamsHistoryCreate) Mutation() *HyperParamsHistoryMutation {
	return hphc.mutation
}

// Save creates the HyperParamsHistory in the database.
func (hphc *HyperParamsHistoryCreate) Save(ctx context.Context) (*HyperParamsHistory, error) {
	hphc.defaults()
	return withHooks(ctx, hphc.sqlSave, hphc.mutation, hphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hphc *HyperParamsHistoryCreate) SaveX(ctx context.Context) *HyperParamsHistory {
	v, err := hphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hphc *HyperParamsHistoryCreate) Exec(ctx context.Context) error {
	_, err := hphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hphc *HyperParamsHistoryCreate) ExecX(ctx context.Context) {
	if err := hphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hphc *HyperParamsHistoryCreate) defaults() {
	if _, ok := hphc.mutation.TrialID(); !ok {
		v := hyperparamshistory.DefaultTrialID
		hphc.mutation.SetTrialID(v)
	}
	if _, ok := hphc.mutation.TrialUUID(); !ok {
		v := hyperparamshistory.DefaultTrialUUID
		hphc.mutation.SetTrialUUID(v)
	}
	if _, ok := hphc.mutation.Model(); !ok {
		v := hyperparamshistory.DefaultModel
		hphc.mutation.SetModel(v)
	}
	if _, ok := hphc.mutation.ModelNum(); !ok {
		v := hyperparamshistory.DefaultModelNum
		hphc.mutation.SetModelNum(v)
	}
	if _, ok := hphc.mutation.Params(); !ok {
		v := hyperparamshistory.DefaultParams
		hphc.mutation.SetParams(v)
	}
	if _, ok := hphc.mutation.CreatedAt(); !ok {
		v := hyperparamshistory.DefaultCreatedAt()
		hphc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hphc *HyperParamsHistoryCreate) check() error {
	if _, ok := hphc.mutation.TrialID(); !ok {
		return &ValidationError{Name: "trial_id", err: errors.New(`ent: missing required field "HyperParamsHistory.trial_id"`)}
	}
	if _, ok := hphc.mutation.TrialUUID(); !ok {
		return &ValidationError{Name: "trial_uuid", err: errors.New(`ent: missing required field "HyperParamsHistory.trial_uuid"`)}
	}
	if _, ok := hphc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "HyperParamsHistory.model"`)}
	}
	if _, ok := hphc.mutation.ModelNum(); !ok {
		return &ValidationError{Name: "model_num", err: errors.New(`ent: missing required field "HyperParamsHistory.model_num"`)}
	}
	if _, ok := hphc.mutation.Params(); !ok {
		return &ValidationError{Name: "params", err: errors.New(`ent: missing required field "HyperParamsHistory.params"`)}
	}
	if _, ok := hphc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HyperParamsHistory.created_at"`)}
	}
	return nil
}

func (hphc *HyperParamsHistoryCreate) sqlSave(ctx context.Context) (*HyperParamsHistory, error) {
	if err := hphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	hphc.mutation.id = &_node.ID
	hphc.mutation.done = true
	return _node, nil
}

func (hphc *HyperParamsHistoryCreate) createSpec() (*HyperParamsHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &HyperParamsHistory{config: hphc.config}
		_spec = sqlgraph.NewCreateSpec(hyperparamshistory.Table, sqlgraph.NewFieldSpec(hyperparamshistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = hphc.conflict
	if id, ok := hphc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hphc.mutation.TrialID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialID, field.TypeInt, value)
		_node.TrialID = value
	}
	if value, ok := hphc.mutation.TrialUUID(); ok {
		_spec.SetField(hyperparamshistory.FieldTrialUUID, field.TypeString, value)
		_node.TrialUUID = value
	}
	if value, ok := hphc.mutation.Model(); ok {
		_spec.SetField(hyperparamshistory.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := hphc.mutation.ModelNum(); ok {
		_spec.SetField(hyperparamshistory.FieldModelNum, field.TypeInt, value)
		_node.ModelNum = value
	}
	if value, ok := hphc.mutation.Params(); ok {
		_spec.SetField(hyperparamshistory.FieldParams, field.TypeString, value)
		_node.Params = value
	}
	if value, ok := hphc.mutation.CreatedAt(); ok {
		_spec.SetField(hyperparamshistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HyperParamsHistory.Create().
//		SetTrialID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HyperParamsHistoryUpsert) {
//			SetTrialID(v+v).
//		}).
//		Exec(ctx)
func (hphc *HyperParamsHistoryCreate) OnConflict(opts ...sql.ConflictOption) *HyperParamsHistoryUpsertOne {
	hphc.conflict = opts
	return &HyperParamsHistoryUpsertOne{
		create: hphc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hphc *HyperParamsHistoryCreate) OnConflictColumns(columns ...string) *HyperParamsHistoryUpsertOne {
	hphc.conflict = append(hphc.conflict, sql.ConflictColumns(columns...))
	return &HyperParamsHistoryUpsertOne{
		create: hphc,
	}
}

type (
	// HyperParamsHistoryUpsertOne is the builder for "upsert"-ing
	//  one HyperParamsHistory node.
	HyperParamsHistoryUpsertOne struct {
		create *HyperParamsHistoryCreate
	}

	// HyperParamsHistoryUpsert is the "OnConflict" setter.
	HyperParamsHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTrialID sets the "trial_id" field.
func (u *HyperParamsHistoryUpsert) SetTrialID(v int) *HyperParamsHistoryUpsert {
	u.Set(hyperparamshistory.FieldTrialID, v)
	return u
}

// UpdateTrialID sets the "trial_id" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsert) UpdateTrialID() *HyperParamsHistoryUpsert {
	u.SetExcluded(hyperparamshistory.FieldTrialID)
	return u
}

// AddTrialID adds v to the "trial_id" field.
func (u *HyperParamsHistoryUpsert) AddTrialID(v int) *HyperParamsHistoryUpsert {
	u.Add(hyperparamshistory.FieldTrialID, v)
	return u
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *HyperParamsHistoryUpsert) SetTrialUUID(v string) *HyperParamsHistoryUpsert {
	u.Set(hyperparamshistory.FieldTrialUUID, v)
	return u
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsert) UpdateTrialUUID() *HyperParamsHistoryUpsert {
	u.SetExcluded(hyperparamshistory.FieldTrialUUID)
	return u
}

// SetModel sets the "model" field.
func (u *HyperParamsHistoryUpsert) SetModel(v string) *HyperParamsHistoryUpsert {
	u.Set(hyperparamshistory.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsert) UpdateModel() *HyperParamsHistoryUpsert {
	u.SetExcluded(hyperparamshistory.FieldModel)
	return u
}

// SetModelNum sets the "model_num" field.
func (u *HyperParamsHistoryUpsert) SetModelNum(v int) *HyperParamsHistoryUpsert {
	u.Set(hyperparamshistory.FieldModelNum, v)
	return u
}

// UpdateModelNum sets the "model_num" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsert) UpdateModelNum() *HyperParamsHistoryUpsert {
	u.SetExcluded(hyperparamshistory.FieldModelNum)
	return u
}

// AddModelNum adds v to the "model_num" field.
func (u *HyperParamsHistoryUpsert) AddModelNum(v int) *HyperParamsHistoryUpsert {
	u.Add(hyperparamshistory.FieldModelNum, v)
	return u
}

// SetParams sets the "params" field.
func (u *HyperParamsHistoryUpsert) SetParams(v string) *HyperParamsHistoryUpsert {
	u.Set(hyperparamshistory.FieldParams, v)
	return u
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsert) UpdateParams() *HyperParamsHistoryUpsert {
	u.SetExcluded(hyperparamshistory.FieldParams)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hyperparamshistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HyperParamsHistoryUpsertOne) UpdateNewValues() *HyperParamsHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hyperparamshistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hyperparamshistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HyperParamsHistoryUpsertOne) Ignore() *HyperParamsHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HyperParamsHistoryUpsertOne) DoNothing() *HyperParamsHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HyperParamsHistoryCreate.OnConflict
// documentation for more info.
func (u *HyperParamsHistoryUpsertOne) Update(set func(*HyperParamsHistoryUpsert)) *HyperParamsHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HyperParamsHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialID sets the "trial_id" field.
func (u *HyperParamsHistoryUpsertOne) SetTrialID(v int) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetTrialID(v)
	})
}

// AddTrialID adds v to the "trial_id" field.
func (u *HyperParamsHistoryUpsertOne) AddTrialID(v int) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.AddTrialID(v)
	})
}

// UpdateTrialID sets the "trial_id" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertOne) UpdateTrialID() *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateTrialID()
	})
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *HyperParamsHistoryUpsertOne) SetTrialUUID(v string) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertOne) UpdateTrialUUID() *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateTrialUUID()
	})
}

// SetModel sets the "model" field.
func (u *HyperParamsHistoryUpsertOne) SetModel(v string) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertOne) UpdateModel() *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateModel()
	})
}

// SetModelNum sets the "model_num" field.
func (u *HyperParamsHistoryUpsertOne) SetModelNum(v int) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetModelNum(v)
	})
}

// AddModelNum adds v to the "model_num" field.
func (u *HyperParamsHistoryUpsertOne) AddModelNum(v int) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.AddModelNum(v)
	})
}

// UpdateModelNum sets the "model_num" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertOne) UpdateModelNum() *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateModelNum()
	})
}

// SetParams sets the "params" field.
func (u *HyperParamsHistoryUpsertOne) SetParams(v string) *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertOne) UpdateParams() *HyperParamsHistoryUpsertOne {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateParams()
	})
}

// Exec executes the query.
func (u *HyperParamsHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HyperParamsHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HyperParamsHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HyperParamsHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HyperParamsHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HyperParamsHistoryCreateBulk is the builder for creating many HyperParamsHistory entities in bulk.
type HyperParamsHistoryCreateBulk struct {
	config
	err      error
	builders []*HyperParamsHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the HyperParamsHistory entities in the database.
func (hphcb *HyperParamsHistoryCreateBulk) Save(ctx context.Context) ([]*HyperParamsHistory, error) {
	if hphcb.err != nil {
		return nil, hphcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hphcb.builders))
	nodes := make([]*HyperParamsHistory, len(hphcb.builders))
	mutators := make([]Mutator, len(hphcb.builders))
	for i := range hphcb.builders {
		func(i int, root context.Context) {
			builder := hphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HyperParamsHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hphcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hphcb *HyperParamsHistoryCreateBulk) SaveX(ctx context.Context) []*HyperParamsHistory {
	v, err := hphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hphcb *HyperParamsHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hphcb *HyperParamsHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hphcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HyperParamsHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HyperParamsHistoryUpsert) {
//			SetTrialID(v+v).
//		}).
//		Exec(ctx)
func (hphcb *HyperParamsHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *HyperParamsHistoryUpsertBulk {
	hphcb.conflict = opts
	return &HyperParamsHistoryUpsertBulk{
		create: hphcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hphcb *HyperParamsHistoryCreateBulk) OnConflictColumns(columns ...string) *HyperParamsHistoryUpsertBulk {
	hphcb.conflict = append(hphcb.conflict, sql.ConflictColumns(columns...))
	return &HyperParamsHistoryUpsertBulk{
		create: hphcb,
	}
}

// HyperParamsHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of HyperParamsHistory nodes.
type HyperParamsHistoryUpsertBulk struct {
	create *HyperParamsHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hyperparamshistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HyperParamsHistoryUpsertBulk) UpdateNewValues() *HyperParamsHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hyperparamshistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hyperparamshistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HyperParamsHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HyperParamsHistoryUpsertBulk) Ignore() *HyperParamsHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HyperParamsHistoryUpsertBulk) DoNothing() *HyperParamsHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HyperParamsHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *HyperParamsHistoryUpsertBulk) Update(set func(*HyperParamsHistoryUpsert)) *HyperParamsHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HyperParamsHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialID sets the "trial_id" field.
func (u *HyperParamsHistoryUpsertBulk) SetTrialID(v int) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetTrialID(v)
	})
}

// AddTrialID adds v to the "trial_id" field.
func (u *HyperParamsHistoryUpsertBulk) AddTrialID(v int) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.AddTrialID(v)
	})
}

// UpdateTrialID sets the "trial_id" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertBulk) UpdateTrialID() *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateTrialID()
	})
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *HyperParamsHistoryUpsertBulk) SetTrialUUID(v string) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertBulk) UpdateTrialUUID() *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateTrialUUID()
	})
}

// SetModel sets the "model" field.
func (u *HyperParamsHistoryUpsertBulk) SetModel(v string) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertBulk) UpdateModel() *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateModel()
	})
}

// SetModelNum sets the "model_num" field.
func (u *HyperParamsHistoryUpsertBulk) SetModelNum(v int) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetModelNum(v)
	})
}

// AddModelNum adds v to the "model_num" field.
func (u *HyperParamsHistoryUpsertBulk) AddModelNum(v int) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.AddModelNum(v)
	})
}

// UpdateModelNum sets the "model_num" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertBulk) UpdateModelNum() *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateModelNum()
	})
}

// SetParams sets the "params" field.
func (u *HyperParamsHistoryUpsertBulk) SetParams(v string) *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *HyperParamsHistoryUpsertBulk) UpdateParams() *HyperParamsHistoryUpsertBulk {
	return u.Update(func(s *HyperParamsHistoryUpsert) {
		s.UpdateParams()
	})
}

// Exec executes the query.
func (u *HyperParamsHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HyperParamsHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HyperParamsHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HyperParamsHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
