// Code generated by ent, DO NOT EDIT.

package enginelog

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldID, id))
}

// ModelingID applies equality check predicate on the "modeling_id" field. It's identical to ModelingIDEQ.
func ModelingID(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldModelingID, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldLevel, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldFilename, v))
}

// Line applies equality check predicate on the "line" field. It's identical to LineEQ.
func Line(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldLine, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldCreatedAt, v))
}

// ModelingIDEQ applies the EQ predicate on the "modeling_id" field.
func ModelingIDEQ(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldModelingID, v))
}

// ModelingIDNEQ applies the NEQ predicate on the "modeling_id" field.
func ModelingIDNEQ(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldModelingID, v))
}

// ModelingIDIn applies the In predicate on the "modeling_id" field.
func ModelingIDIn(vs ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldModelingID, vs...))
}

// ModelingIDNotIn applies the NotIn predicate on the "modeling_id" field.
func ModelingIDNotIn(vs ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldModelingID, vs...))
}

// ModelingIDGT applies the GT predicate on the "modeling_id" field.
func ModelingIDGT(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldModelingID, v))
}

// ModelingIDGTE applies the GTE predicate on the "modeling_id" field.
func ModelingIDGTE(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldModelingID, v))
}

// ModelingIDLT applies the LT predicate on the "modeling_id" field.
func ModelingIDLT(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldModelingID, v))
}

// ModelingIDLTE applies the LTE predicate on the "modeling_id" field.
func ModelingIDLTE(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldModelingID, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldLevel, v))
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContains(FieldLevel, v))
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasPrefix(FieldLevel, v))
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasSuffix(FieldLevel, v))
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEqualFold(FieldLevel, v))
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContainsFold(FieldLevel, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContainsFold(FieldFilename, v))
}

// LineEQ applies the EQ predicate on the "line" field.
func LineEQ(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldLine, v))
}

// LineNEQ applies the NEQ predicate on the "line" field.
func LineNEQ(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldLine, v))
}

// LineIn applies the In predicate on the "line" field.
func LineIn(vs ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldLine, vs...))
}

// LineNotIn applies the NotIn predicate on the "line" field.
func LineNotIn(vs ...int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldLine, vs...))
}

// LineGT applies the GT predicate on the "line" field.
func LineGT(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldLine, v))
}

// LineGTE applies the GTE predicate on the "line" field.
func LineGTE(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldLine, v))
}

// LineLT applies the LT predicate on the "line" field.
func LineLT(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldLine, v))
}

// LineLTE applies the LTE predicate on the "line" field.
func LineLTE(v int) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldLine, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldContainsFold(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EngineLog {
	return predicate.EngineLog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EngineLog) predicate.EngineLog {
	return predicate.EngineLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EngineLog) predicate.EngineLog {
	return predicate.EngineLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EngineLog) predicate.EngineLog {
	return predicate.EngineLog(sql.NotPredicates(p))
}
