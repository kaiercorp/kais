// Code generated by ent, DO NOT EDIT.

package enginelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the enginelog type in the database.
	Label = "engine_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelingID holds the string denoting the modeling_id field in the database.
	FieldModelingID = "modeling_id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldLine holds the string denoting the line field in the database.
	FieldLine = "line"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the enginelog in the database.
	Table = "enginelog"
)

// Columns holds all SQL columns for enginelog fields.
var Columns = []string{
	FieldID,
	FieldModelingID,
	FieldLevel,
	FieldFilename,
	FieldLine,
	FieldMessage,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelingID holds the default value on creation for the "modeling_id" field.
	DefaultModelingID int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the EngineLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelingID orders the results by the modeling_id field.
func ByModelingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelingID, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByLine orders the results by the line field.
func ByLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
