// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/trial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrialCreate is the builder for creating a Trial entity.
type TrialCreate struct {
	config
	mutation *TrialMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModelingID sets the "modeling_id" field.
func (tc *TrialCreate) SetModelingID(i int) *TrialCreate {
	tc.mutation.SetModelingID(i)
	return tc
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (tc *TrialCreate) SetNillableModelingID(i *int) *TrialCreate {
	if i != nil {
		tc.SetModelingID(*i)
	}
	return tc
}

// SetUUID sets the "uuid" field.
func (tc *TrialCreate) SetUUID(s string) *TrialCreate {
	tc.mutation.SetUUID(s)
	return tc
}

// SetState sets the "state" field.
func (tc *TrialCreate) SetState(s string) *TrialCreate {
	tc.mutation.SetState(s)
	return tc
}

// SetSavePath sets the "save_path" field.
func (tc *TrialCreate) SetSavePath(s string) *TrialCreate {
	tc.mutation.SetSavePath(s)
	return tc
}

// SetTargetMetric sets the "target_metric" field.
func (tc *TrialCreate) SetTargetMetric(s string) *TrialCreate {
	tc.mutation.SetTargetMetric(s)
	return tc
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tc *TrialCreate) SetNillableTargetMetric(s *string) *TrialCreate {
	if s != nil {
		tc.SetTargetMetric(*s)
	}
	return tc
}

// SetProgress sets the "progress" field.
func (tc *TrialCreate) SetProgress(f float64) *TrialCreate {
	tc.mutation.SetProgress(f)
	return tc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tc *TrialCreate) SetNillableProgress(f *float64) *TrialCreate {
	if f != nil {
		tc.SetProgress(*f)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TrialCreate) SetCreatedAt(t time.Time) *TrialCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TrialCreate) SetNillableCreatedAt(t *time.Time) *TrialCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TrialCreate) SetUpdatedAt(t time.Time) *TrialCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TrialCreate) SetNillableUpdatedAt(t *time.Time) *TrialCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TrialCreate) SetID(i int) *TrialCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (tc *TrialCreate) SetModeling(m *Modeling) *TrialCreate {
	return tc.SetModelingID(m.ID)
}

// Mutation returns the TrialMutation object of the builder.
func (tc *TrialCreate) Mutation() *TrialMutation {
	return tc.mutation
}

// Save creates the Trial in the database.
func (tc *TrialCreate) Save(ctx context.Context) (*Trial, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrialCreate) SaveX(ctx context.Context) *Trial {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrialCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrialCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrialCreate) defaults() {
	if _, ok := tc.mutation.ModelingID(); !ok {
		v := trial.DefaultModelingID
		tc.mutation.SetModelingID(v)
	}
	if _, ok := tc.mutation.TargetMetric(); !ok {
		v := trial.DefaultTargetMetric
		tc.mutation.SetTargetMetric(v)
	}
	if _, ok := tc.mutation.Progress(); !ok {
		v := trial.DefaultProgress
		tc.mutation.SetProgress(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trial.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := trial.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrialCreate) check() error {
	if _, ok := tc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Trial.uuid"`)}
	}
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Trial.state"`)}
	}
	if _, ok := tc.mutation.SavePath(); !ok {
		return &ValidationError{Name: "save_path", err: errors.New(`ent: missing required field "Trial.save_path"`)}
	}
	if _, ok := tc.mutation.TargetMetric(); !ok {
		return &ValidationError{Name: "target_metric", err: errors.New(`ent: missing required field "Trial.target_metric"`)}
	}
	if _, ok := tc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Trial.progress"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trial.created_at"`)}
	}
	return nil
}

func (tc *TrialCreate) sqlSave(ctx context.Context) (*Trial, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrialCreate) createSpec() (*Trial, *sqlgraph.CreateSpec) {
	var (
		_node = &Trial{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trial.Table, sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.UUID(); ok {
		_spec.SetField(trial.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := tc.mutation.State(); ok {
		_spec.SetField(trial.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := tc.mutation.SavePath(); ok {
		_spec.SetField(trial.FieldSavePath, field.TypeString, value)
		_node.SavePath = value
	}
	if value, ok := tc.mutation.TargetMetric(); ok {
		_spec.SetField(trial.FieldTargetMetric, field.TypeString, value)
		_node.TargetMetric = value
	}
	if value, ok := tc.mutation.Progress(); ok {
		_spec.SetField(trial.FieldProgress, field.TypeFloat64, value)
		_node.Progress = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trial.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(trial.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trial.ModelingTable,
			Columns: []string{trial.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trial.Create().
//		SetModelingID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (tc *TrialCreate) OnConflict(opts ...sql.ConflictOption) *TrialUpsertOne {
	tc.conflict = opts
	return &TrialUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trial.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TrialCreate) OnConflictColumns(columns ...string) *TrialUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TrialUpsertOne{
		create: tc,
	}
}

type (
	// TrialUpsertOne is the builder for "upsert"-ing
	//  one Trial node.
	TrialUpsertOne struct {
		create *TrialCreate
	}

	// TrialUpsert is the "OnConflict" setter.
	TrialUpsert struct {
		*sql.UpdateSet
	}
)

// SetModelingID sets the "modeling_id" field.
func (u *TrialUpsert) SetModelingID(v int) *TrialUpsert {
	u.Set(trial.FieldModelingID, v)
	return u
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *TrialUpsert) UpdateModelingID() *TrialUpsert {
	u.SetExcluded(trial.FieldModelingID)
	return u
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *TrialUpsert) ClearModelingID() *TrialUpsert {
	u.SetNull(trial.FieldModelingID)
	return u
}

// SetUUID sets the "uuid" field.
func (u *TrialUpsert) SetUUID(v string) *TrialUpsert {
	u.Set(trial.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *TrialUpsert) UpdateUUID() *TrialUpsert {
	u.SetExcluded(trial.FieldUUID)
	return u
}

// SetState sets the "state" field.
func (u *TrialUpsert) SetState(v string) *TrialUpsert {
	u.Set(trial.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TrialUpsert) UpdateState() *TrialUpsert {
	u.SetExcluded(trial.FieldState)
	return u
}

// SetSavePath sets the "save_path" field.
func (u *TrialUpsert) SetSavePath(v string) *TrialUpsert {
	u.Set(trial.FieldSavePath, v)
	return u
}

// UpdateSavePath sets the "save_path" field to the value that was provided on create.
func (u *TrialUpsert) UpdateSavePath() *TrialUpsert {
	u.SetExcluded(trial.FieldSavePath)
	return u
}

// SetTargetMetric sets the "target_metric" field.
func (u *TrialUpsert) SetTargetMetric(v string) *TrialUpsert {
	u.Set(trial.FieldTargetMetric, v)
	return u
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TrialUpsert) UpdateTargetMetric() *TrialUpsert {
	u.SetExcluded(trial.FieldTargetMetric)
	return u
}

// SetProgress sets the "progress" field.
func (u *TrialUpsert) SetProgress(v float64) *TrialUpsert {
	u.Set(trial.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TrialUpsert) UpdateProgress() *TrialUpsert {
	u.SetExcluded(trial.FieldProgress)
	return u
}

// AddProgress adds v to the "progress" field.
func (u *TrialUpsert) AddProgress(v float64) *TrialUpsert {
	u.Add(trial.FieldProgress, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrialUpsert) SetUpdatedAt(v time.Time) *TrialUpsert {
	u.Set(trial.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrialUpsert) UpdateUpdatedAt() *TrialUpsert {
	u.SetExcluded(trial.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TrialUpsert) ClearUpdatedAt() *TrialUpsert {
	u.SetNull(trial.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Trial.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trial.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialUpsertOne) UpdateNewValues() *TrialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trial.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trial.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trial.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrialUpsertOne) Ignore() *TrialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialUpsertOne) DoNothing() *TrialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialCreate.OnConflict
// documentation for more info.
func (u *TrialUpsertOne) Update(set func(*TrialUpsert)) *TrialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *TrialUpsertOne) SetModelingID(v int) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateModelingID() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *TrialUpsertOne) ClearModelingID() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.ClearModelingID()
	})
}

// SetUUID sets the "uuid" field.
func (u *TrialUpsertOne) SetUUID(v string) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateUUID() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateUUID()
	})
}

// SetState sets the "state" field.
func (u *TrialUpsertOne) SetState(v string) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateState() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateState()
	})
}

// SetSavePath sets the "save_path" field.
func (u *TrialUpsertOne) SetSavePath(v string) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetSavePath(v)
	})
}

// UpdateSavePath sets the "save_path" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateSavePath() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateSavePath()
	})
}

// SetTargetMetric sets the "target_metric" field.
func (u *TrialUpsertOne) SetTargetMetric(v string) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetTargetMetric(v)
	})
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateTargetMetric() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateTargetMetric()
	})
}

// SetProgress sets the "progress" field.
func (u *TrialUpsertOne) SetProgress(v float64) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *TrialUpsertOne) AddProgress(v float64) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateProgress() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateProgress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrialUpsertOne) SetUpdatedAt(v time.Time) *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrialUpsertOne) UpdateUpdatedAt() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TrialUpsertOne) ClearUpdatedAt() *TrialUpsertOne {
	return u.Update(func(s *TrialUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *TrialUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrialUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrialUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrialCreateBulk is the builder for creating many Trial entities in bulk.
type TrialCreateBulk struct {
	config
	err      error
	builders []*TrialCreate
	conflict []sql.ConflictOption
}

// Save creates the Trial entities in the database.
func (tcb *TrialCreateBulk) Save(ctx context.Context) ([]*Trial, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trial, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrialCreateBulk) SaveX(ctx context.Context) []*Trial {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrialCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrialCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trial.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TrialCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrialUpsertBulk {
	tcb.conflict = opts
	return &TrialUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trial.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TrialCreateBulk) OnConflictColumns(columns ...string) *TrialUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TrialUpsertBulk{
		create: tcb,
	}
}

// TrialUpsertBulk is the builder for "upsert"-ing
// a bulk of Trial nodes.
type TrialUpsertBulk struct {
	create *TrialCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Trial.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trial.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialUpsertBulk) UpdateNewValues() *TrialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trial.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trial.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trial.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrialUpsertBulk) Ignore() *TrialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialUpsertBulk) DoNothing() *TrialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialCreateBulk.OnConflict
// documentation for more info.
func (u *TrialUpsertBulk) Update(set func(*TrialUpsert)) *TrialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *TrialUpsertBulk) SetModelingID(v int) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateModelingID() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *TrialUpsertBulk) ClearModelingID() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.ClearModelingID()
	})
}

// SetUUID sets the "uuid" field.
func (u *TrialUpsertBulk) SetUUID(v string) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateUUID() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateUUID()
	})
}

// SetState sets the "state" field.
func (u *TrialUpsertBulk) SetState(v string) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateState() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateState()
	})
}

// SetSavePath sets the "save_path" field.
func (u *TrialUpsertBulk) SetSavePath(v string) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetSavePath(v)
	})
}

// UpdateSavePath sets the "save_path" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateSavePath() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateSavePath()
	})
}

// SetTargetMetric sets the "target_metric" field.
func (u *TrialUpsertBulk) SetTargetMetric(v string) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetTargetMetric(v)
	})
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateTargetMetric() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateTargetMetric()
	})
}

// SetProgress sets the "progress" field.
func (u *TrialUpsertBulk) SetProgress(v float64) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *TrialUpsertBulk) AddProgress(v float64) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateProgress() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateProgress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrialUpsertBulk) SetUpdatedAt(v time.Time) *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrialUpsertBulk) UpdateUpdatedAt() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TrialUpsertBulk) ClearUpdatedAt() *TrialUpsertBulk {
	return u.Update(func(s *TrialUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *TrialUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrialCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
