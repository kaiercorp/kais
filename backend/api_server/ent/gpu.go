// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/device"
	"api_server/ent/gpu"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Gpu is the model entity for the Gpu schema.
type Gpu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// IsUse holds the value of the "is_use" field.
	IsUse bool `json:"is_use,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID int `json:"device_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GpuQuery when eager-loading is set.
	Edges        GpuEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GpuEdges holds the relations/edges for other nodes in the graph.
type GpuEdges struct {
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GpuEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gpu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gpu.FieldIsUse:
			values[i] = new(sql.NullBool)
		case gpu.FieldID, gpu.FieldIndex, gpu.FieldDeviceID:
			values[i] = new(sql.NullInt64)
		case gpu.FieldUUID, gpu.FieldName, gpu.FieldState:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gpu fields.
func (gp *Gpu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gpu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gp.ID = int(value.Int64)
		case gpu.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				gp.UUID = value.String
			}
		case gpu.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				gp.Index = int(value.Int64)
			}
		case gpu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gp.Name = value.String
			}
		case gpu.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gp.State = value.String
			}
		case gpu.FieldIsUse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_use", values[i])
			} else if value.Valid {
				gp.IsUse = value.Bool
			}
		case gpu.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				gp.DeviceID = int(value.Int64)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Gpu.
// This includes values selected through modifiers, order, etc.
func (gp *Gpu) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// QueryDevice queries the "device" edge of the Gpu entity.
func (gp *Gpu) QueryDevice() *DeviceQuery {
	return NewGpuClient(gp.config).QueryDevice(gp)
}

// Update returns a builder for updating this Gpu.
// Note that you need to call Gpu.Unwrap() before calling this method if this Gpu
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *Gpu) Update() *GpuUpdateOne {
	return NewGpuClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the Gpu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *Gpu) Unwrap() *Gpu {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gpu is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *Gpu) String() string {
	var builder strings.Builder
	builder.WriteString("Gpu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("uuid=")
	builder.WriteString(gp.UUID)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", gp.Index))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gp.Name)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(gp.State)
	builder.WriteString(", ")
	builder.WriteString("is_use=")
	builder.WriteString(fmt.Sprintf("%v", gp.IsUse))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.DeviceID))
	builder.WriteByte(')')
	return builder.String()
}

// Gpus is a parsable slice of Gpu.
type Gpus []*Gpu
