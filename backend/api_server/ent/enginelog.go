// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/enginelog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EngineLog is the model entity for the EngineLog schema.
type EngineLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ModelingID holds the value of the "modeling_id" field.
	ModelingID int `json:"modeling_id,omitempty"`
	// Level holds the value of the "level" field.
	Level string `json:"level,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Line holds the value of the "line" field.
	Line int `json:"line,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EngineLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enginelog.FieldID, enginelog.FieldModelingID, enginelog.FieldLine:
			values[i] = new(sql.NullInt64)
		case enginelog.FieldLevel, enginelog.FieldFilename, enginelog.FieldMessage:
			values[i] = new(sql.NullString)
		case enginelog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EngineLog fields.
func (el *EngineLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enginelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int(value.Int64)
		case enginelog.FieldModelingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modeling_id", values[i])
			} else if value.Valid {
				el.ModelingID = int(value.Int64)
			}
		case enginelog.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				el.Level = value.String
			}
		case enginelog.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				el.Filename = value.String
			}
		case enginelog.FieldLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field line", values[i])
			} else if value.Valid {
				el.Line = int(value.Int64)
			}
		case enginelog.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				el.Message = value.String
			}
		case enginelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				el.CreatedAt = value.Time
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EngineLog.
// This includes values selected through modifiers, order, etc.
func (el *EngineLog) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// Update returns a builder for updating this EngineLog.
// Note that you need to call EngineLog.Unwrap() before calling this method if this EngineLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EngineLog) Update() *EngineLogUpdateOne {
	return NewEngineLogClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EngineLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EngineLog) Unwrap() *EngineLog {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EngineLog is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EngineLog) String() string {
	var builder strings.Builder
	builder.WriteString("EngineLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("modeling_id=")
	builder.WriteString(fmt.Sprintf("%v", el.ModelingID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(el.Level)
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(el.Filename)
	builder.WriteString(", ")
	builder.WriteString("line=")
	builder.WriteString(fmt.Sprintf("%v", el.Line))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(el.Message)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(el.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EngineLogs is a parsable slice of EngineLog.
type EngineLogs []*EngineLog
