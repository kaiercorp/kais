// Code generated by ent, DO NOT EDIT.

package trial

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trial type in the database.
	Label = "trial"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelingID holds the string denoting the modeling_id field in the database.
	FieldModelingID = "modeling_id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldSavePath holds the string denoting the save_path field in the database.
	FieldSavePath = "save_path"
	// FieldTargetMetric holds the string denoting the target_metric field in the database.
	FieldTargetMetric = "target_metric"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeModeling holds the string denoting the modeling edge name in mutations.
	EdgeModeling = "modeling"
	// Table holds the table name of the trial in the database.
	Table = "trial"
	// ModelingTable is the table that holds the modeling relation/edge.
	ModelingTable = "trial"
	// ModelingInverseTable is the table name for the Modeling entity.
	// It exists in this package in order to avoid circular dependency with the "modeling" package.
	ModelingInverseTable = "modeling"
	// ModelingColumn is the table column denoting the modeling relation/edge.
	ModelingColumn = "modeling_id"
)

// Columns holds all SQL columns for trial fields.
var Columns = []string{
	FieldID,
	FieldModelingID,
	FieldUUID,
	FieldState,
	FieldSavePath,
	FieldTargetMetric,
	FieldProgress,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelingID holds the default value on creation for the "modeling_id" field.
	DefaultModelingID int
	// DefaultTargetMetric holds the default value on creation for the "target_metric" field.
	DefaultTargetMetric string
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Trial queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelingID orders the results by the modeling_id field.
func ByModelingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelingID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// BySavePath orders the results by the save_path field.
func BySavePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSavePath, opts...).ToFunc()
}

// ByTargetMetric orders the results by the target_metric field.
func ByTargetMetric(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetMetric, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByModelingField orders the results by modeling field.
func ByModelingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelingStep(), sql.OrderByField(field, opts...))
	}
}
func newModelingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelingTable, ModelingColumn),
	)
}
