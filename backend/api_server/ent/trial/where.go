// Code generated by ent, DO NOT EDIT.

package trial

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldID, id))
}

// ModelingID applies equality check predicate on the "modeling_id" field. It's identical to ModelingIDEQ.
func ModelingID(v int) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldModelingID, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldUUID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldState, v))
}

// SavePath applies equality check predicate on the "save_path" field. It's identical to SavePathEQ.
func SavePath(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldSavePath, v))
}

// TargetMetric applies equality check predicate on the "target_metric" field. It's identical to TargetMetricEQ.
func TargetMetric(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldTargetMetric, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldProgress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldUpdatedAt, v))
}

// ModelingIDEQ applies the EQ predicate on the "modeling_id" field.
func ModelingIDEQ(v int) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldModelingID, v))
}

// ModelingIDNEQ applies the NEQ predicate on the "modeling_id" field.
func ModelingIDNEQ(v int) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldModelingID, v))
}

// ModelingIDIn applies the In predicate on the "modeling_id" field.
func ModelingIDIn(vs ...int) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldModelingID, vs...))
}

// ModelingIDNotIn applies the NotIn predicate on the "modeling_id" field.
func ModelingIDNotIn(vs ...int) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldModelingID, vs...))
}

// ModelingIDIsNil applies the IsNil predicate on the "modeling_id" field.
func ModelingIDIsNil() predicate.Trial {
	return predicate.Trial(sql.FieldIsNull(FieldModelingID))
}

// ModelingIDNotNil applies the NotNil predicate on the "modeling_id" field.
func ModelingIDNotNil() predicate.Trial {
	return predicate.Trial(sql.FieldNotNull(FieldModelingID))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContainsFold(FieldUUID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContainsFold(FieldState, v))
}

// SavePathEQ applies the EQ predicate on the "save_path" field.
func SavePathEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldSavePath, v))
}

// SavePathNEQ applies the NEQ predicate on the "save_path" field.
func SavePathNEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldSavePath, v))
}

// SavePathIn applies the In predicate on the "save_path" field.
func SavePathIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldSavePath, vs...))
}

// SavePathNotIn applies the NotIn predicate on the "save_path" field.
func SavePathNotIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldSavePath, vs...))
}

// SavePathGT applies the GT predicate on the "save_path" field.
func SavePathGT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldSavePath, v))
}

// SavePathGTE applies the GTE predicate on the "save_path" field.
func SavePathGTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldSavePath, v))
}

// SavePathLT applies the LT predicate on the "save_path" field.
func SavePathLT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldSavePath, v))
}

// SavePathLTE applies the LTE predicate on the "save_path" field.
func SavePathLTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldSavePath, v))
}

// SavePathContains applies the Contains predicate on the "save_path" field.
func SavePathContains(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContains(FieldSavePath, v))
}

// SavePathHasPrefix applies the HasPrefix predicate on the "save_path" field.
func SavePathHasPrefix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasPrefix(FieldSavePath, v))
}

// SavePathHasSuffix applies the HasSuffix predicate on the "save_path" field.
func SavePathHasSuffix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasSuffix(FieldSavePath, v))
}

// SavePathEqualFold applies the EqualFold predicate on the "save_path" field.
func SavePathEqualFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEqualFold(FieldSavePath, v))
}

// SavePathContainsFold applies the ContainsFold predicate on the "save_path" field.
func SavePathContainsFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContainsFold(FieldSavePath, v))
}

// TargetMetricEQ applies the EQ predicate on the "target_metric" field.
func TargetMetricEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldTargetMetric, v))
}

// TargetMetricNEQ applies the NEQ predicate on the "target_metric" field.
func TargetMetricNEQ(v string) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldTargetMetric, v))
}

// TargetMetricIn applies the In predicate on the "target_metric" field.
func TargetMetricIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldTargetMetric, vs...))
}

// TargetMetricNotIn applies the NotIn predicate on the "target_metric" field.
func TargetMetricNotIn(vs ...string) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldTargetMetric, vs...))
}

// TargetMetricGT applies the GT predicate on the "target_metric" field.
func TargetMetricGT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldTargetMetric, v))
}

// TargetMetricGTE applies the GTE predicate on the "target_metric" field.
func TargetMetricGTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldTargetMetric, v))
}

// TargetMetricLT applies the LT predicate on the "target_metric" field.
func TargetMetricLT(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldTargetMetric, v))
}

// TargetMetricLTE applies the LTE predicate on the "target_metric" field.
func TargetMetricLTE(v string) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldTargetMetric, v))
}

// TargetMetricContains applies the Contains predicate on the "target_metric" field.
func TargetMetricContains(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContains(FieldTargetMetric, v))
}

// TargetMetricHasPrefix applies the HasPrefix predicate on the "target_metric" field.
func TargetMetricHasPrefix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasPrefix(FieldTargetMetric, v))
}

// TargetMetricHasSuffix applies the HasSuffix predicate on the "target_metric" field.
func TargetMetricHasSuffix(v string) predicate.Trial {
	return predicate.Trial(sql.FieldHasSuffix(FieldTargetMetric, v))
}

// TargetMetricEqualFold applies the EqualFold predicate on the "target_metric" field.
func TargetMetricEqualFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldEqualFold(FieldTargetMetric, v))
}

// TargetMetricContainsFold applies the ContainsFold predicate on the "target_metric" field.
func TargetMetricContainsFold(v string) predicate.Trial {
	return predicate.Trial(sql.FieldContainsFold(FieldTargetMetric, v))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...float64) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...float64) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v float64) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldProgress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Trial {
	return predicate.Trial(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Trial {
	return predicate.Trial(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Trial {
	return predicate.Trial(sql.FieldNotNull(FieldUpdatedAt))
}

// HasModeling applies the HasEdge predicate on the "modeling" edge.
func HasModeling() predicate.Trial {
	return predicate.Trial(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelingTable, ModelingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelingWith applies the HasEdge predicate on the "modeling" edge with a given conditions (other predicates).
func HasModelingWith(preds ...predicate.Modeling) predicate.Trial {
	return predicate.Trial(func(s *sql.Selector) {
		step := newModelingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Trial) predicate.Trial {
	return predicate.Trial(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Trial) predicate.Trial {
	return predicate.Trial(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Trial) predicate.Trial {
	return predicate.Trial(sql.NotPredicates(p))
}
