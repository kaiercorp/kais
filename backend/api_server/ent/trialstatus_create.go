// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/trialstatus"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrialStatusCreate is the builder for creating a TrialStatus entity.
type TrialStatusCreate struct {
	config
	mutation *TrialStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTrialUUID sets the "trial_uuid" field.
func (tsc *TrialStatusCreate) SetTrialUUID(s string) *TrialStatusCreate {
	tsc.mutation.SetTrialUUID(s)
	return tsc
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tsc *TrialStatusCreate) SetNillableTrialUUID(s *string) *TrialStatusCreate {
	if s != nil {
		tsc.SetTrialUUID(*s)
	}
	return tsc
}

// SetStatusJSON sets the "status_json" field.
func (tsc *TrialStatusCreate) SetStatusJSON(s []string) *TrialStatusCreate {
	tsc.mutation.SetStatusJSON(s)
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TrialStatusCreate) SetCreatedAt(t time.Time) *TrialStatusCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TrialStatusCreate) SetNillableCreatedAt(t *time.Time) *TrialStatusCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TrialStatusCreate) SetID(i int) *TrialStatusCreate {
	tsc.mutation.SetID(i)
	return tsc
}

// Mutation returns the TrialStatusMutation object of the builder.
func (tsc *TrialStatusCreate) Mutation() *TrialStatusMutation {
	return tsc.mutation
}

// Save creates the TrialStatus in the database.
func (tsc *TrialStatusCreate) Save(ctx context.Context) (*TrialStatus, error) {
	tsc.defaults()
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TrialStatusCreate) SaveX(ctx context.Context) *TrialStatus {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TrialStatusCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TrialStatusCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TrialStatusCreate) defaults() {
	if _, ok := tsc.mutation.StatusJSON(); !ok {
		v := trialstatus.DefaultStatusJSON
		tsc.mutation.SetStatusJSON(v)
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := trialstatus.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TrialStatusCreate) check() error {
	if _, ok := tsc.mutation.StatusJSON(); !ok {
		return &ValidationError{Name: "status_json", err: errors.New(`ent: missing required field "TrialStatus.status_json"`)}
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TrialStatus.created_at"`)}
	}
	return nil
}

func (tsc *TrialStatusCreate) sqlSave(ctx context.Context) (*TrialStatus, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TrialStatusCreate) createSpec() (*TrialStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &TrialStatus{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(trialstatus.Table, sqlgraph.NewFieldSpec(trialstatus.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tsc.conflict
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.TrialUUID(); ok {
		_spec.SetField(trialstatus.FieldTrialUUID, field.TypeString, value)
		_node.TrialUUID = value
	}
	if value, ok := tsc.mutation.StatusJSON(); ok {
		_spec.SetField(trialstatus.FieldStatusJSON, field.TypeJSON, value)
		_node.StatusJSON = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(trialstatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrialStatus.Create().
//		SetTrialUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialStatusUpsert) {
//			SetTrialUUID(v+v).
//		}).
//		Exec(ctx)
func (tsc *TrialStatusCreate) OnConflict(opts ...sql.ConflictOption) *TrialStatusUpsertOne {
	tsc.conflict = opts
	return &TrialStatusUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TrialStatusCreate) OnConflictColumns(columns ...string) *TrialStatusUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TrialStatusUpsertOne{
		create: tsc,
	}
}

type (
	// TrialStatusUpsertOne is the builder for "upsert"-ing
	//  one TrialStatus node.
	TrialStatusUpsertOne struct {
		create *TrialStatusCreate
	}

	// TrialStatusUpsert is the "OnConflict" setter.
	TrialStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialStatusUpsert) SetTrialUUID(v string) *TrialStatusUpsert {
	u.Set(trialstatus.FieldTrialUUID, v)
	return u
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialStatusUpsert) UpdateTrialUUID() *TrialStatusUpsert {
	u.SetExcluded(trialstatus.FieldTrialUUID)
	return u
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialStatusUpsert) ClearTrialUUID() *TrialStatusUpsert {
	u.SetNull(trialstatus.FieldTrialUUID)
	return u
}

// SetStatusJSON sets the "status_json" field.
func (u *TrialStatusUpsert) SetStatusJSON(v []string) *TrialStatusUpsert {
	u.Set(trialstatus.FieldStatusJSON, v)
	return u
}

// UpdateStatusJSON sets the "status_json" field to the value that was provided on create.
func (u *TrialStatusUpsert) UpdateStatusJSON() *TrialStatusUpsert {
	u.SetExcluded(trialstatus.FieldStatusJSON)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trialstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialStatusUpsertOne) UpdateNewValues() *TrialStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trialstatus.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trialstatus.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrialStatusUpsertOne) Ignore() *TrialStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialStatusUpsertOne) DoNothing() *TrialStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialStatusCreate.OnConflict
// documentation for more info.
func (u *TrialStatusUpsertOne) Update(set func(*TrialStatusUpsert)) *TrialStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialStatusUpsertOne) SetTrialUUID(v string) *TrialStatusUpsertOne {
	return u.Update(func(s *TrialStatusUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialStatusUpsertOne) UpdateTrialUUID() *TrialStatusUpsertOne {
	return u.Update(func(s *TrialStatusUpsert) {
		s.UpdateTrialUUID()
	})
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialStatusUpsertOne) ClearTrialUUID() *TrialStatusUpsertOne {
	return u.Update(func(s *TrialStatusUpsert) {
		s.ClearTrialUUID()
	})
}

// SetStatusJSON sets the "status_json" field.
func (u *TrialStatusUpsertOne) SetStatusJSON(v []string) *TrialStatusUpsertOne {
	return u.Update(func(s *TrialStatusUpsert) {
		s.SetStatusJSON(v)
	})
}

// UpdateStatusJSON sets the "status_json" field to the value that was provided on create.
func (u *TrialStatusUpsertOne) UpdateStatusJSON() *TrialStatusUpsertOne {
	return u.Update(func(s *TrialStatusUpsert) {
		s.UpdateStatusJSON()
	})
}

// Exec executes the query.
func (u *TrialStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrialStatusUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrialStatusUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrialStatusCreateBulk is the builder for creating many TrialStatus entities in bulk.
type TrialStatusCreateBulk struct {
	config
	err      error
	builders []*TrialStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the TrialStatus entities in the database.
func (tscb *TrialStatusCreateBulk) Save(ctx context.Context) ([]*TrialStatus, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TrialStatus, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrialStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TrialStatusCreateBulk) SaveX(ctx context.Context) []*TrialStatus {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TrialStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TrialStatusCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrialStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialStatusUpsert) {
//			SetTrialUUID(v+v).
//		}).
//		Exec(ctx)
func (tscb *TrialStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrialStatusUpsertBulk {
	tscb.conflict = opts
	return &TrialStatusUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TrialStatusCreateBulk) OnConflictColumns(columns ...string) *TrialStatusUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TrialStatusUpsertBulk{
		create: tscb,
	}
}

// TrialStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of TrialStatus nodes.
type TrialStatusUpsertBulk struct {
	create *TrialStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trialstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialStatusUpsertBulk) UpdateNewValues() *TrialStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trialstatus.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trialstatus.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrialStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrialStatusUpsertBulk) Ignore() *TrialStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialStatusUpsertBulk) DoNothing() *TrialStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialStatusCreateBulk.OnConflict
// documentation for more info.
func (u *TrialStatusUpsertBulk) Update(set func(*TrialStatusUpsert)) *TrialStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialStatusUpsertBulk) SetTrialUUID(v string) *TrialStatusUpsertBulk {
	return u.Update(func(s *TrialStatusUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialStatusUpsertBulk) UpdateTrialUUID() *TrialStatusUpsertBulk {
	return u.Update(func(s *TrialStatusUpsert) {
		s.UpdateTrialUUID()
	})
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialStatusUpsertBulk) ClearTrialUUID() *TrialStatusUpsertBulk {
	return u.Update(func(s *TrialStatusUpsert) {
		s.ClearTrialUUID()
	})
}

// SetStatusJSON sets the "status_json" field.
func (u *TrialStatusUpsertBulk) SetStatusJSON(v []string) *TrialStatusUpsertBulk {
	return u.Update(func(s *TrialStatusUpsert) {
		s.SetStatusJSON(v)
	})
}

// UpdateStatusJSON sets the "status_json" field to the value that was provided on create.
func (u *TrialStatusUpsertBulk) UpdateStatusJSON() *TrialStatusUpsertBulk {
	return u.Update(func(s *TrialStatusUpsert) {
		s.UpdateStatusJSON()
	})
}

// Exec executes the query.
func (u *TrialStatusUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrialStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
