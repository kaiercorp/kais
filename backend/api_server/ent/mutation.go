// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/configuration"
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"api_server/ent/device"
	"api_server/ent/enginelog"
	"api_server/ent/gpu"
	"api_server/ent/hyperparamshistory"
	"api_server/ent/menu"
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"api_server/ent/modelingmodels"
	"api_server/ent/predicate"
	"api_server/ent/project"
	"api_server/ent/task"
	"api_server/ent/trial"
	"api_server/ent/trialdetails"
	"api_server/ent/trialstatus"
	"api_server/ent/user"
	"api_server/ent/usergroup"
	"api_server/ent/userproject"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeConfiguration      = "Configuration"
	TypeDataset            = "Dataset"
	TypeDatasetRoot        = "DatasetRoot"
	TypeDevice             = "Device"
	TypeEngineLog          = "EngineLog"
	TypeGpu                = "Gpu"
	TypeHyperParamsHistory = "HyperParamsHistory"
	TypeMenu               = "Menu"
	TypeModeling           = "Modeling"
	TypeModelingDetails    = "ModelingDetails"
	TypeModelingModels     = "ModelingModels"
	TypeProject            = "Project"
	TypeTask               = "Task"
	TypeTrial              = "Trial"
	TypeTrialDetails       = "TrialDetails"
	TypeTrialStatus        = "TrialStatus"
	TypeUser               = "User"
	TypeUserGroup          = "UserGroup"
	TypeUserProject        = "UserProject"
)

// ConfigurationMutation represents an operation that mutates the Configuration nodes in the graph.
type ConfigurationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	config_type   *string
	config_key    *string
	config_val    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Configuration, error)
	predicates    []predicate.Configuration
}

var _ ent.Mutation = (*ConfigurationMutation)(nil)

// configurationOption allows management of the mutation configuration using functional options.
type configurationOption func(*ConfigurationMutation)

// newConfigurationMutation creates new mutation for the Configuration entity.
func newConfigurationMutation(c config, op Op, opts ...configurationOption) *ConfigurationMutation {
	m := &ConfigurationMutation{
		config:        c,
		op:            op,
		typ:           TypeConfiguration,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConfigurationID sets the ID field of the mutation.
func withConfigurationID(id int) configurationOption {
	return func(m *ConfigurationMutation) {
		var (
			err   error
			once  sync.Once
			value *Configuration
		)
		m.oldValue = func(ctx context.Context) (*Configuration, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Configuration.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConfiguration sets the old Configuration of the mutation.
func withConfiguration(node *Configuration) configurationOption {
	return func(m *ConfigurationMutation) {
		m.oldValue = func(context.Context) (*Configuration, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConfigurationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConfigurationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Configuration entities.
func (m *ConfigurationMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConfigurationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConfigurationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Configuration.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetConfigType sets the "config_type" field.
func (m *ConfigurationMutation) SetConfigType(s string) {
	m.config_type = &s
}

// ConfigType returns the value of the "config_type" field in the mutation.
func (m *ConfigurationMutation) ConfigType() (r string, exists bool) {
	v := m.config_type
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigType returns the old "config_type" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldConfigType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigType: %w", err)
	}
	return oldValue.ConfigType, nil
}

// ResetConfigType resets all changes to the "config_type" field.
func (m *ConfigurationMutation) ResetConfigType() {
	m.config_type = nil
}

// SetConfigKey sets the "config_key" field.
func (m *ConfigurationMutation) SetConfigKey(s string) {
	m.config_key = &s
}

// ConfigKey returns the value of the "config_key" field in the mutation.
func (m *ConfigurationMutation) ConfigKey() (r string, exists bool) {
	v := m.config_key
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigKey returns the old "config_key" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldConfigKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigKey: %w", err)
	}
	return oldValue.ConfigKey, nil
}

// ResetConfigKey resets all changes to the "config_key" field.
func (m *ConfigurationMutation) ResetConfigKey() {
	m.config_key = nil
}

// SetConfigVal sets the "config_val" field.
func (m *ConfigurationMutation) SetConfigVal(s string) {
	m.config_val = &s
}

// ConfigVal returns the value of the "config_val" field in the mutation.
func (m *ConfigurationMutation) ConfigVal() (r string, exists bool) {
	v := m.config_val
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigVal returns the old "config_val" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldConfigVal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigVal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigVal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigVal: %w", err)
	}
	return oldValue.ConfigVal, nil
}

// ResetConfigVal resets all changes to the "config_val" field.
func (m *ConfigurationMutation) ResetConfigVal() {
	m.config_val = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ConfigurationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConfigurationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConfigurationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ConfigurationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ConfigurationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Configuration entity.
// If the Configuration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConfigurationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ConfigurationMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[configuration.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ConfigurationMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[configuration.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ConfigurationMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, configuration.FieldUpdatedAt)
}

// Where appends a list predicates to the ConfigurationMutation builder.
func (m *ConfigurationMutation) Where(ps ...predicate.Configuration) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConfigurationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConfigurationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Configuration, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConfigurationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConfigurationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Configuration).
func (m *ConfigurationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConfigurationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.config_type != nil {
		fields = append(fields, configuration.FieldConfigType)
	}
	if m.config_key != nil {
		fields = append(fields, configuration.FieldConfigKey)
	}
	if m.config_val != nil {
		fields = append(fields, configuration.FieldConfigVal)
	}
	if m.created_at != nil {
		fields = append(fields, configuration.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, configuration.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConfigurationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case configuration.FieldConfigType:
		return m.ConfigType()
	case configuration.FieldConfigKey:
		return m.ConfigKey()
	case configuration.FieldConfigVal:
		return m.ConfigVal()
	case configuration.FieldCreatedAt:
		return m.CreatedAt()
	case configuration.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConfigurationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case configuration.FieldConfigType:
		return m.OldConfigType(ctx)
	case configuration.FieldConfigKey:
		return m.OldConfigKey(ctx)
	case configuration.FieldConfigVal:
		return m.OldConfigVal(ctx)
	case configuration.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case configuration.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Configuration field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case configuration.FieldConfigType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigType(v)
		return nil
	case configuration.FieldConfigKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigKey(v)
		return nil
	case configuration.FieldConfigVal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigVal(v)
		return nil
	case configuration.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case configuration.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Configuration field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConfigurationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConfigurationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConfigurationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Configuration numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConfigurationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(configuration.FieldUpdatedAt) {
		fields = append(fields, configuration.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConfigurationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConfigurationMutation) ClearField(name string) error {
	switch name {
	case configuration.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Configuration nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConfigurationMutation) ResetField(name string) error {
	switch name {
	case configuration.FieldConfigType:
		m.ResetConfigType()
		return nil
	case configuration.FieldConfigKey:
		m.ResetConfigKey()
		return nil
	case configuration.FieldConfigVal:
		m.ResetConfigVal()
		return nil
	case configuration.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case configuration.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Configuration field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConfigurationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConfigurationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConfigurationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConfigurationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConfigurationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConfigurationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConfigurationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Configuration unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConfigurationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Configuration edge %s", name)
}

// DatasetMutation represents an operation that mutates the Dataset nodes in the graph.
type DatasetMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	parent_id          *int
	addparent_id       *int
	description        *string
	_path              *string
	is_valid           *bool
	is_trainable       *bool
	is_testable        *bool
	is_leaf            *bool
	is_deleted         *bool
	is_use             *bool
	stat               *[]string
	appendstat         []string
	stat_path          *string
	engine             *[]string
	appendengine       []string
	data_type          *string
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	dr_id              *int
	adddr_id           *int
	clearedFields      map[string]struct{}
	datasetroot        *int
	cleareddatasetroot bool
	done               bool
	oldValue           func(context.Context) (*Dataset, error)
	predicates         []predicate.Dataset
}

var _ ent.Mutation = (*DatasetMutation)(nil)

// datasetOption allows management of the mutation configuration using functional options.
type datasetOption func(*DatasetMutation)

// newDatasetMutation creates new mutation for the Dataset entity.
func newDatasetMutation(c config, op Op, opts ...datasetOption) *DatasetMutation {
	m := &DatasetMutation{
		config:        c,
		op:            op,
		typ:           TypeDataset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatasetID sets the ID field of the mutation.
func withDatasetID(id int) datasetOption {
	return func(m *DatasetMutation) {
		var (
			err   error
			once  sync.Once
			value *Dataset
		)
		m.oldValue = func(ctx context.Context) (*Dataset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dataset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataset sets the old Dataset of the mutation.
func withDataset(node *Dataset) datasetOption {
	return func(m *DatasetMutation) {
		m.oldValue = func(context.Context) (*Dataset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatasetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatasetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatasetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatasetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dataset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DatasetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DatasetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DatasetMutation) ResetName() {
	m.name = nil
}

// SetParentID sets the "parent_id" field.
func (m *DatasetMutation) SetParentID(i int) {
	m.parent_id = &i
	m.addparent_id = nil
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *DatasetMutation) ParentID() (r int, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// AddParentID adds i to the "parent_id" field.
func (m *DatasetMutation) AddParentID(i int) {
	if m.addparent_id != nil {
		*m.addparent_id += i
	} else {
		m.addparent_id = &i
	}
}

// AddedParentID returns the value that was added to the "parent_id" field in this mutation.
func (m *DatasetMutation) AddedParentID() (r int, exists bool) {
	v := m.addparent_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearParentID clears the value of the "parent_id" field.
func (m *DatasetMutation) ClearParentID() {
	m.parent_id = nil
	m.addparent_id = nil
	m.clearedFields[dataset.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *DatasetMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[dataset.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *DatasetMutation) ResetParentID() {
	m.parent_id = nil
	m.addparent_id = nil
	delete(m.clearedFields, dataset.FieldParentID)
}

// SetDescription sets the "description" field.
func (m *DatasetMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DatasetMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DatasetMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[dataset.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DatasetMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[dataset.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DatasetMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, dataset.FieldDescription)
}

// SetPath sets the "path" field.
func (m *DatasetMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *DatasetMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *DatasetMutation) ResetPath() {
	m._path = nil
}

// SetIsValid sets the "is_valid" field.
func (m *DatasetMutation) SetIsValid(b bool) {
	m.is_valid = &b
}

// IsValid returns the value of the "is_valid" field in the mutation.
func (m *DatasetMutation) IsValid() (r bool, exists bool) {
	v := m.is_valid
	if v == nil {
		return
	}
	return *v, true
}

// OldIsValid returns the old "is_valid" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsValid: %w", err)
	}
	return oldValue.IsValid, nil
}

// ResetIsValid resets all changes to the "is_valid" field.
func (m *DatasetMutation) ResetIsValid() {
	m.is_valid = nil
}

// SetIsTrainable sets the "is_trainable" field.
func (m *DatasetMutation) SetIsTrainable(b bool) {
	m.is_trainable = &b
}

// IsTrainable returns the value of the "is_trainable" field in the mutation.
func (m *DatasetMutation) IsTrainable() (r bool, exists bool) {
	v := m.is_trainable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTrainable returns the old "is_trainable" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsTrainable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTrainable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTrainable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTrainable: %w", err)
	}
	return oldValue.IsTrainable, nil
}

// ResetIsTrainable resets all changes to the "is_trainable" field.
func (m *DatasetMutation) ResetIsTrainable() {
	m.is_trainable = nil
}

// SetIsTestable sets the "is_testable" field.
func (m *DatasetMutation) SetIsTestable(b bool) {
	m.is_testable = &b
}

// IsTestable returns the value of the "is_testable" field in the mutation.
func (m *DatasetMutation) IsTestable() (r bool, exists bool) {
	v := m.is_testable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTestable returns the old "is_testable" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsTestable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTestable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTestable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTestable: %w", err)
	}
	return oldValue.IsTestable, nil
}

// ResetIsTestable resets all changes to the "is_testable" field.
func (m *DatasetMutation) ResetIsTestable() {
	m.is_testable = nil
}

// SetIsLeaf sets the "is_leaf" field.
func (m *DatasetMutation) SetIsLeaf(b bool) {
	m.is_leaf = &b
}

// IsLeaf returns the value of the "is_leaf" field in the mutation.
func (m *DatasetMutation) IsLeaf() (r bool, exists bool) {
	v := m.is_leaf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeaf returns the old "is_leaf" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsLeaf(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeaf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeaf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeaf: %w", err)
	}
	return oldValue.IsLeaf, nil
}

// ResetIsLeaf resets all changes to the "is_leaf" field.
func (m *DatasetMutation) ResetIsLeaf() {
	m.is_leaf = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *DatasetMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *DatasetMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *DatasetMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetIsUse sets the "is_use" field.
func (m *DatasetMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *DatasetMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *DatasetMutation) ResetIsUse() {
	m.is_use = nil
}

// SetStat sets the "stat" field.
func (m *DatasetMutation) SetStat(s []string) {
	m.stat = &s
	m.appendstat = nil
}

// Stat returns the value of the "stat" field in the mutation.
func (m *DatasetMutation) Stat() (r []string, exists bool) {
	v := m.stat
	if v == nil {
		return
	}
	return *v, true
}

// OldStat returns the old "stat" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldStat(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStat: %w", err)
	}
	return oldValue.Stat, nil
}

// AppendStat adds s to the "stat" field.
func (m *DatasetMutation) AppendStat(s []string) {
	m.appendstat = append(m.appendstat, s...)
}

// AppendedStat returns the list of values that were appended to the "stat" field in this mutation.
func (m *DatasetMutation) AppendedStat() ([]string, bool) {
	if len(m.appendstat) == 0 {
		return nil, false
	}
	return m.appendstat, true
}

// ResetStat resets all changes to the "stat" field.
func (m *DatasetMutation) ResetStat() {
	m.stat = nil
	m.appendstat = nil
}

// SetStatPath sets the "stat_path" field.
func (m *DatasetMutation) SetStatPath(s string) {
	m.stat_path = &s
}

// StatPath returns the value of the "stat_path" field in the mutation.
func (m *DatasetMutation) StatPath() (r string, exists bool) {
	v := m.stat_path
	if v == nil {
		return
	}
	return *v, true
}

// OldStatPath returns the old "stat_path" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldStatPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatPath: %w", err)
	}
	return oldValue.StatPath, nil
}

// ClearStatPath clears the value of the "stat_path" field.
func (m *DatasetMutation) ClearStatPath() {
	m.stat_path = nil
	m.clearedFields[dataset.FieldStatPath] = struct{}{}
}

// StatPathCleared returns if the "stat_path" field was cleared in this mutation.
func (m *DatasetMutation) StatPathCleared() bool {
	_, ok := m.clearedFields[dataset.FieldStatPath]
	return ok
}

// ResetStatPath resets all changes to the "stat_path" field.
func (m *DatasetMutation) ResetStatPath() {
	m.stat_path = nil
	delete(m.clearedFields, dataset.FieldStatPath)
}

// SetEngine sets the "engine" field.
func (m *DatasetMutation) SetEngine(s []string) {
	m.engine = &s
	m.appendengine = nil
}

// Engine returns the value of the "engine" field in the mutation.
func (m *DatasetMutation) Engine() (r []string, exists bool) {
	v := m.engine
	if v == nil {
		return
	}
	return *v, true
}

// OldEngine returns the old "engine" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldEngine(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngine: %w", err)
	}
	return oldValue.Engine, nil
}

// AppendEngine adds s to the "engine" field.
func (m *DatasetMutation) AppendEngine(s []string) {
	m.appendengine = append(m.appendengine, s...)
}

// AppendedEngine returns the list of values that were appended to the "engine" field in this mutation.
func (m *DatasetMutation) AppendedEngine() ([]string, bool) {
	if len(m.appendengine) == 0 {
		return nil, false
	}
	return m.appendengine, true
}

// ClearEngine clears the value of the "engine" field.
func (m *DatasetMutation) ClearEngine() {
	m.engine = nil
	m.appendengine = nil
	m.clearedFields[dataset.FieldEngine] = struct{}{}
}

// EngineCleared returns if the "engine" field was cleared in this mutation.
func (m *DatasetMutation) EngineCleared() bool {
	_, ok := m.clearedFields[dataset.FieldEngine]
	return ok
}

// ResetEngine resets all changes to the "engine" field.
func (m *DatasetMutation) ResetEngine() {
	m.engine = nil
	m.appendengine = nil
	delete(m.clearedFields, dataset.FieldEngine)
}

// SetDataType sets the "data_type" field.
func (m *DatasetMutation) SetDataType(s string) {
	m.data_type = &s
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *DatasetMutation) DataType() (r string, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *DatasetMutation) ResetDataType() {
	m.data_type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DatasetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatasetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatasetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DatasetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DatasetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DatasetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DatasetMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DatasetMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DatasetMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetDrID sets the "dr_id" field.
func (m *DatasetMutation) SetDrID(i int) {
	m.dr_id = &i
	m.adddr_id = nil
}

// DrID returns the value of the "dr_id" field in the mutation.
func (m *DatasetMutation) DrID() (r int, exists bool) {
	v := m.dr_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDrID returns the old "dr_id" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldDrID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDrID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDrID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrID: %w", err)
	}
	return oldValue.DrID, nil
}

// AddDrID adds i to the "dr_id" field.
func (m *DatasetMutation) AddDrID(i int) {
	if m.adddr_id != nil {
		*m.adddr_id += i
	} else {
		m.adddr_id = &i
	}
}

// AddedDrID returns the value that was added to the "dr_id" field in this mutation.
func (m *DatasetMutation) AddedDrID() (r int, exists bool) {
	v := m.adddr_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDrID clears the value of the "dr_id" field.
func (m *DatasetMutation) ClearDrID() {
	m.dr_id = nil
	m.adddr_id = nil
	m.clearedFields[dataset.FieldDrID] = struct{}{}
}

// DrIDCleared returns if the "dr_id" field was cleared in this mutation.
func (m *DatasetMutation) DrIDCleared() bool {
	_, ok := m.clearedFields[dataset.FieldDrID]
	return ok
}

// ResetDrID resets all changes to the "dr_id" field.
func (m *DatasetMutation) ResetDrID() {
	m.dr_id = nil
	m.adddr_id = nil
	delete(m.clearedFields, dataset.FieldDrID)
}

// SetDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by id.
func (m *DatasetMutation) SetDatasetrootID(id int) {
	m.datasetroot = &id
}

// ClearDatasetroot clears the "datasetroot" edge to the DatasetRoot entity.
func (m *DatasetMutation) ClearDatasetroot() {
	m.cleareddatasetroot = true
}

// DatasetrootCleared reports if the "datasetroot" edge to the DatasetRoot entity was cleared.
func (m *DatasetMutation) DatasetrootCleared() bool {
	return m.cleareddatasetroot
}

// DatasetrootID returns the "datasetroot" edge ID in the mutation.
func (m *DatasetMutation) DatasetrootID() (id int, exists bool) {
	if m.datasetroot != nil {
		return *m.datasetroot, true
	}
	return
}

// DatasetrootIDs returns the "datasetroot" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DatasetrootID instead. It exists only for internal usage by the builders.
func (m *DatasetMutation) DatasetrootIDs() (ids []int) {
	if id := m.datasetroot; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDatasetroot resets all changes to the "datasetroot" edge.
func (m *DatasetMutation) ResetDatasetroot() {
	m.datasetroot = nil
	m.cleareddatasetroot = false
}

// Where appends a list predicates to the DatasetMutation builder.
func (m *DatasetMutation) Where(ps ...predicate.Dataset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatasetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatasetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dataset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatasetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatasetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dataset).
func (m *DatasetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatasetMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.name != nil {
		fields = append(fields, dataset.FieldName)
	}
	if m.parent_id != nil {
		fields = append(fields, dataset.FieldParentID)
	}
	if m.description != nil {
		fields = append(fields, dataset.FieldDescription)
	}
	if m._path != nil {
		fields = append(fields, dataset.FieldPath)
	}
	if m.is_valid != nil {
		fields = append(fields, dataset.FieldIsValid)
	}
	if m.is_trainable != nil {
		fields = append(fields, dataset.FieldIsTrainable)
	}
	if m.is_testable != nil {
		fields = append(fields, dataset.FieldIsTestable)
	}
	if m.is_leaf != nil {
		fields = append(fields, dataset.FieldIsLeaf)
	}
	if m.is_deleted != nil {
		fields = append(fields, dataset.FieldIsDeleted)
	}
	if m.is_use != nil {
		fields = append(fields, dataset.FieldIsUse)
	}
	if m.stat != nil {
		fields = append(fields, dataset.FieldStat)
	}
	if m.stat_path != nil {
		fields = append(fields, dataset.FieldStatPath)
	}
	if m.engine != nil {
		fields = append(fields, dataset.FieldEngine)
	}
	if m.data_type != nil {
		fields = append(fields, dataset.FieldDataType)
	}
	if m.created_at != nil {
		fields = append(fields, dataset.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dataset.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, dataset.FieldDeletedAt)
	}
	if m.dr_id != nil {
		fields = append(fields, dataset.FieldDrID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatasetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldName:
		return m.Name()
	case dataset.FieldParentID:
		return m.ParentID()
	case dataset.FieldDescription:
		return m.Description()
	case dataset.FieldPath:
		return m.Path()
	case dataset.FieldIsValid:
		return m.IsValid()
	case dataset.FieldIsTrainable:
		return m.IsTrainable()
	case dataset.FieldIsTestable:
		return m.IsTestable()
	case dataset.FieldIsLeaf:
		return m.IsLeaf()
	case dataset.FieldIsDeleted:
		return m.IsDeleted()
	case dataset.FieldIsUse:
		return m.IsUse()
	case dataset.FieldStat:
		return m.Stat()
	case dataset.FieldStatPath:
		return m.StatPath()
	case dataset.FieldEngine:
		return m.Engine()
	case dataset.FieldDataType:
		return m.DataType()
	case dataset.FieldCreatedAt:
		return m.CreatedAt()
	case dataset.FieldUpdatedAt:
		return m.UpdatedAt()
	case dataset.FieldDeletedAt:
		return m.DeletedAt()
	case dataset.FieldDrID:
		return m.DrID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatasetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dataset.FieldName:
		return m.OldName(ctx)
	case dataset.FieldParentID:
		return m.OldParentID(ctx)
	case dataset.FieldDescription:
		return m.OldDescription(ctx)
	case dataset.FieldPath:
		return m.OldPath(ctx)
	case dataset.FieldIsValid:
		return m.OldIsValid(ctx)
	case dataset.FieldIsTrainable:
		return m.OldIsTrainable(ctx)
	case dataset.FieldIsTestable:
		return m.OldIsTestable(ctx)
	case dataset.FieldIsLeaf:
		return m.OldIsLeaf(ctx)
	case dataset.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case dataset.FieldIsUse:
		return m.OldIsUse(ctx)
	case dataset.FieldStat:
		return m.OldStat(ctx)
	case dataset.FieldStatPath:
		return m.OldStatPath(ctx)
	case dataset.FieldEngine:
		return m.OldEngine(ctx)
	case dataset.FieldDataType:
		return m.OldDataType(ctx)
	case dataset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dataset.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dataset.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case dataset.FieldDrID:
		return m.OldDrID(ctx)
	}
	return nil, fmt.Errorf("unknown Dataset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case dataset.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case dataset.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case dataset.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case dataset.FieldIsValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsValid(v)
		return nil
	case dataset.FieldIsTrainable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTrainable(v)
		return nil
	case dataset.FieldIsTestable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTestable(v)
		return nil
	case dataset.FieldIsLeaf:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeaf(v)
		return nil
	case dataset.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case dataset.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case dataset.FieldStat:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStat(v)
		return nil
	case dataset.FieldStatPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatPath(v)
		return nil
	case dataset.FieldEngine:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngine(v)
		return nil
	case dataset.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case dataset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dataset.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dataset.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case dataset.FieldDrID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrID(v)
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatasetMutation) AddedFields() []string {
	var fields []string
	if m.addparent_id != nil {
		fields = append(fields, dataset.FieldParentID)
	}
	if m.adddr_id != nil {
		fields = append(fields, dataset.FieldDrID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatasetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldParentID:
		return m.AddedParentID()
	case dataset.FieldDrID:
		return m.AddedDrID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentID(v)
		return nil
	case dataset.FieldDrID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDrID(v)
		return nil
	}
	return fmt.Errorf("unknown Dataset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatasetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dataset.FieldParentID) {
		fields = append(fields, dataset.FieldParentID)
	}
	if m.FieldCleared(dataset.FieldDescription) {
		fields = append(fields, dataset.FieldDescription)
	}
	if m.FieldCleared(dataset.FieldStatPath) {
		fields = append(fields, dataset.FieldStatPath)
	}
	if m.FieldCleared(dataset.FieldEngine) {
		fields = append(fields, dataset.FieldEngine)
	}
	if m.FieldCleared(dataset.FieldDrID) {
		fields = append(fields, dataset.FieldDrID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatasetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatasetMutation) ClearField(name string) error {
	switch name {
	case dataset.FieldParentID:
		m.ClearParentID()
		return nil
	case dataset.FieldDescription:
		m.ClearDescription()
		return nil
	case dataset.FieldStatPath:
		m.ClearStatPath()
		return nil
	case dataset.FieldEngine:
		m.ClearEngine()
		return nil
	case dataset.FieldDrID:
		m.ClearDrID()
		return nil
	}
	return fmt.Errorf("unknown Dataset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatasetMutation) ResetField(name string) error {
	switch name {
	case dataset.FieldName:
		m.ResetName()
		return nil
	case dataset.FieldParentID:
		m.ResetParentID()
		return nil
	case dataset.FieldDescription:
		m.ResetDescription()
		return nil
	case dataset.FieldPath:
		m.ResetPath()
		return nil
	case dataset.FieldIsValid:
		m.ResetIsValid()
		return nil
	case dataset.FieldIsTrainable:
		m.ResetIsTrainable()
		return nil
	case dataset.FieldIsTestable:
		m.ResetIsTestable()
		return nil
	case dataset.FieldIsLeaf:
		m.ResetIsLeaf()
		return nil
	case dataset.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case dataset.FieldIsUse:
		m.ResetIsUse()
		return nil
	case dataset.FieldStat:
		m.ResetStat()
		return nil
	case dataset.FieldStatPath:
		m.ResetStatPath()
		return nil
	case dataset.FieldEngine:
		m.ResetEngine()
		return nil
	case dataset.FieldDataType:
		m.ResetDataType()
		return nil
	case dataset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dataset.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dataset.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case dataset.FieldDrID:
		m.ResetDrID()
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatasetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.datasetroot != nil {
		edges = append(edges, dataset.EdgeDatasetroot)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatasetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeDatasetroot:
		if id := m.datasetroot; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatasetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatasetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatasetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddatasetroot {
		edges = append(edges, dataset.EdgeDatasetroot)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatasetMutation) EdgeCleared(name string) bool {
	switch name {
	case dataset.EdgeDatasetroot:
		return m.cleareddatasetroot
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatasetMutation) ClearEdge(name string) error {
	switch name {
	case dataset.EdgeDatasetroot:
		m.ClearDatasetroot()
		return nil
	}
	return fmt.Errorf("unknown Dataset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatasetMutation) ResetEdge(name string) error {
	switch name {
	case dataset.EdgeDatasetroot:
		m.ResetDatasetroot()
		return nil
	}
	return fmt.Errorf("unknown Dataset edge %s", name)
}

// DatasetRootMutation represents an operation that mutates the DatasetRoot nodes in the graph.
type DatasetRootMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	_path           *string
	is_use          *bool
	clearedFields   map[string]struct{}
	datasets        map[int]struct{}
	removeddatasets map[int]struct{}
	cleareddatasets bool
	done            bool
	oldValue        func(context.Context) (*DatasetRoot, error)
	predicates      []predicate.DatasetRoot
}

var _ ent.Mutation = (*DatasetRootMutation)(nil)

// datasetrootOption allows management of the mutation configuration using functional options.
type datasetrootOption func(*DatasetRootMutation)

// newDatasetRootMutation creates new mutation for the DatasetRoot entity.
func newDatasetRootMutation(c config, op Op, opts ...datasetrootOption) *DatasetRootMutation {
	m := &DatasetRootMutation{
		config:        c,
		op:            op,
		typ:           TypeDatasetRoot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatasetRootID sets the ID field of the mutation.
func withDatasetRootID(id int) datasetrootOption {
	return func(m *DatasetRootMutation) {
		var (
			err   error
			once  sync.Once
			value *DatasetRoot
		)
		m.oldValue = func(ctx context.Context) (*DatasetRoot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DatasetRoot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatasetRoot sets the old DatasetRoot of the mutation.
func withDatasetRoot(node *DatasetRoot) datasetrootOption {
	return func(m *DatasetRootMutation) {
		m.oldValue = func(context.Context) (*DatasetRoot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatasetRootMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatasetRootMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DatasetRoot entities.
func (m *DatasetRootMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatasetRootMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatasetRootMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DatasetRoot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DatasetRootMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DatasetRootMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DatasetRoot entity.
// If the DatasetRoot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetRootMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DatasetRootMutation) ResetName() {
	m.name = nil
}

// SetPath sets the "path" field.
func (m *DatasetRootMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *DatasetRootMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the DatasetRoot entity.
// If the DatasetRoot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetRootMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *DatasetRootMutation) ResetPath() {
	m._path = nil
}

// SetIsUse sets the "is_use" field.
func (m *DatasetRootMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *DatasetRootMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the DatasetRoot entity.
// If the DatasetRoot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetRootMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *DatasetRootMutation) ResetIsUse() {
	m.is_use = nil
}

// AddDatasetIDs adds the "datasets" edge to the Dataset entity by ids.
func (m *DatasetRootMutation) AddDatasetIDs(ids ...int) {
	if m.datasets == nil {
		m.datasets = make(map[int]struct{})
	}
	for i := range ids {
		m.datasets[ids[i]] = struct{}{}
	}
}

// ClearDatasets clears the "datasets" edge to the Dataset entity.
func (m *DatasetRootMutation) ClearDatasets() {
	m.cleareddatasets = true
}

// DatasetsCleared reports if the "datasets" edge to the Dataset entity was cleared.
func (m *DatasetRootMutation) DatasetsCleared() bool {
	return m.cleareddatasets
}

// RemoveDatasetIDs removes the "datasets" edge to the Dataset entity by IDs.
func (m *DatasetRootMutation) RemoveDatasetIDs(ids ...int) {
	if m.removeddatasets == nil {
		m.removeddatasets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.datasets, ids[i])
		m.removeddatasets[ids[i]] = struct{}{}
	}
}

// RemovedDatasets returns the removed IDs of the "datasets" edge to the Dataset entity.
func (m *DatasetRootMutation) RemovedDatasetsIDs() (ids []int) {
	for id := range m.removeddatasets {
		ids = append(ids, id)
	}
	return
}

// DatasetsIDs returns the "datasets" edge IDs in the mutation.
func (m *DatasetRootMutation) DatasetsIDs() (ids []int) {
	for id := range m.datasets {
		ids = append(ids, id)
	}
	return
}

// ResetDatasets resets all changes to the "datasets" edge.
func (m *DatasetRootMutation) ResetDatasets() {
	m.datasets = nil
	m.cleareddatasets = false
	m.removeddatasets = nil
}

// Where appends a list predicates to the DatasetRootMutation builder.
func (m *DatasetRootMutation) Where(ps ...predicate.DatasetRoot) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatasetRootMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatasetRootMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DatasetRoot, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatasetRootMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatasetRootMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DatasetRoot).
func (m *DatasetRootMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatasetRootMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, datasetroot.FieldName)
	}
	if m._path != nil {
		fields = append(fields, datasetroot.FieldPath)
	}
	if m.is_use != nil {
		fields = append(fields, datasetroot.FieldIsUse)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatasetRootMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case datasetroot.FieldName:
		return m.Name()
	case datasetroot.FieldPath:
		return m.Path()
	case datasetroot.FieldIsUse:
		return m.IsUse()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatasetRootMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case datasetroot.FieldName:
		return m.OldName(ctx)
	case datasetroot.FieldPath:
		return m.OldPath(ctx)
	case datasetroot.FieldIsUse:
		return m.OldIsUse(ctx)
	}
	return nil, fmt.Errorf("unknown DatasetRoot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetRootMutation) SetField(name string, value ent.Value) error {
	switch name {
	case datasetroot.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case datasetroot.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case datasetroot.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	}
	return fmt.Errorf("unknown DatasetRoot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatasetRootMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatasetRootMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetRootMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DatasetRoot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatasetRootMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatasetRootMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatasetRootMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DatasetRoot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatasetRootMutation) ResetField(name string) error {
	switch name {
	case datasetroot.FieldName:
		m.ResetName()
		return nil
	case datasetroot.FieldPath:
		m.ResetPath()
		return nil
	case datasetroot.FieldIsUse:
		m.ResetIsUse()
		return nil
	}
	return fmt.Errorf("unknown DatasetRoot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatasetRootMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.datasets != nil {
		edges = append(edges, datasetroot.EdgeDatasets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatasetRootMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case datasetroot.EdgeDatasets:
		ids := make([]ent.Value, 0, len(m.datasets))
		for id := range m.datasets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatasetRootMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddatasets != nil {
		edges = append(edges, datasetroot.EdgeDatasets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatasetRootMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case datasetroot.EdgeDatasets:
		ids := make([]ent.Value, 0, len(m.removeddatasets))
		for id := range m.removeddatasets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatasetRootMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddatasets {
		edges = append(edges, datasetroot.EdgeDatasets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatasetRootMutation) EdgeCleared(name string) bool {
	switch name {
	case datasetroot.EdgeDatasets:
		return m.cleareddatasets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatasetRootMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DatasetRoot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatasetRootMutation) ResetEdge(name string) error {
	switch name {
	case datasetroot.EdgeDatasets:
		m.ResetDatasets()
		return nil
	}
	return fmt.Errorf("unknown DatasetRoot edge %s", name)
}

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	ip            *string
	port          *int
	addport       *int
	is_use        *bool
	_type         *string
	connection    *string
	available     *string
	clearedFields map[string]struct{}
	gpu           map[int]struct{}
	removedgpu    map[int]struct{}
	clearedgpu    bool
	done          bool
	oldValue      func(context.Context) (*Device, error)
	predicates    []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Device entities.
func (m *DeviceMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DeviceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeviceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DeviceMutation) ResetName() {
	m.name = nil
}

// SetIP sets the "ip" field.
func (m *DeviceMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *DeviceMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *DeviceMutation) ResetIP() {
	m.ip = nil
}

// SetPort sets the "port" field.
func (m *DeviceMutation) SetPort(i int) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *DeviceMutation) Port() (r int, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldPort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *DeviceMutation) AddPort(i int) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *DeviceMutation) AddedPort() (r int, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *DeviceMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetIsUse sets the "is_use" field.
func (m *DeviceMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *DeviceMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *DeviceMutation) ResetIsUse() {
	m.is_use = nil
}

// SetType sets the "type" field.
func (m *DeviceMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeviceMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeviceMutation) ResetType() {
	m._type = nil
}

// SetConnection sets the "connection" field.
func (m *DeviceMutation) SetConnection(s string) {
	m.connection = &s
}

// Connection returns the value of the "connection" field in the mutation.
func (m *DeviceMutation) Connection() (r string, exists bool) {
	v := m.connection
	if v == nil {
		return
	}
	return *v, true
}

// OldConnection returns the old "connection" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldConnection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConnection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConnection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConnection: %w", err)
	}
	return oldValue.Connection, nil
}

// ResetConnection resets all changes to the "connection" field.
func (m *DeviceMutation) ResetConnection() {
	m.connection = nil
}

// SetAvailable sets the "available" field.
func (m *DeviceMutation) SetAvailable(s string) {
	m.available = &s
}

// Available returns the value of the "available" field in the mutation.
func (m *DeviceMutation) Available() (r string, exists bool) {
	v := m.available
	if v == nil {
		return
	}
	return *v, true
}

// OldAvailable returns the old "available" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldAvailable(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvailable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvailable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvailable: %w", err)
	}
	return oldValue.Available, nil
}

// ResetAvailable resets all changes to the "available" field.
func (m *DeviceMutation) ResetAvailable() {
	m.available = nil
}

// AddGpuIDs adds the "gpu" edge to the Gpu entity by ids.
func (m *DeviceMutation) AddGpuIDs(ids ...int) {
	if m.gpu == nil {
		m.gpu = make(map[int]struct{})
	}
	for i := range ids {
		m.gpu[ids[i]] = struct{}{}
	}
}

// ClearGpu clears the "gpu" edge to the Gpu entity.
func (m *DeviceMutation) ClearGpu() {
	m.clearedgpu = true
}

// GpuCleared reports if the "gpu" edge to the Gpu entity was cleared.
func (m *DeviceMutation) GpuCleared() bool {
	return m.clearedgpu
}

// RemoveGpuIDs removes the "gpu" edge to the Gpu entity by IDs.
func (m *DeviceMutation) RemoveGpuIDs(ids ...int) {
	if m.removedgpu == nil {
		m.removedgpu = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.gpu, ids[i])
		m.removedgpu[ids[i]] = struct{}{}
	}
}

// RemovedGpu returns the removed IDs of the "gpu" edge to the Gpu entity.
func (m *DeviceMutation) RemovedGpuIDs() (ids []int) {
	for id := range m.removedgpu {
		ids = append(ids, id)
	}
	return
}

// GpuIDs returns the "gpu" edge IDs in the mutation.
func (m *DeviceMutation) GpuIDs() (ids []int) {
	for id := range m.gpu {
		ids = append(ids, id)
	}
	return
}

// ResetGpu resets all changes to the "gpu" edge.
func (m *DeviceMutation) ResetGpu() {
	m.gpu = nil
	m.clearedgpu = false
	m.removedgpu = nil
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Device, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, device.FieldName)
	}
	if m.ip != nil {
		fields = append(fields, device.FieldIP)
	}
	if m.port != nil {
		fields = append(fields, device.FieldPort)
	}
	if m.is_use != nil {
		fields = append(fields, device.FieldIsUse)
	}
	if m._type != nil {
		fields = append(fields, device.FieldType)
	}
	if m.connection != nil {
		fields = append(fields, device.FieldConnection)
	}
	if m.available != nil {
		fields = append(fields, device.FieldAvailable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldName:
		return m.Name()
	case device.FieldIP:
		return m.IP()
	case device.FieldPort:
		return m.Port()
	case device.FieldIsUse:
		return m.IsUse()
	case device.FieldType:
		return m.GetType()
	case device.FieldConnection:
		return m.Connection()
	case device.FieldAvailable:
		return m.Available()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldName:
		return m.OldName(ctx)
	case device.FieldIP:
		return m.OldIP(ctx)
	case device.FieldPort:
		return m.OldPort(ctx)
	case device.FieldIsUse:
		return m.OldIsUse(ctx)
	case device.FieldType:
		return m.OldType(ctx)
	case device.FieldConnection:
		return m.OldConnection(ctx)
	case device.FieldAvailable:
		return m.OldAvailable(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case device.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case device.FieldPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case device.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case device.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case device.FieldConnection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConnection(v)
		return nil
	case device.FieldAvailable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvailable(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, device.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case device.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case device.FieldPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldName:
		m.ResetName()
		return nil
	case device.FieldIP:
		m.ResetIP()
		return nil
	case device.FieldPort:
		m.ResetPort()
		return nil
	case device.FieldIsUse:
		m.ResetIsUse()
		return nil
	case device.FieldType:
		m.ResetType()
		return nil
	case device.FieldConnection:
		m.ResetConnection()
		return nil
	case device.FieldAvailable:
		m.ResetAvailable()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.gpu != nil {
		edges = append(edges, device.EdgeGpu)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeGpu:
		ids := make([]ent.Value, 0, len(m.gpu))
		for id := range m.gpu {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgpu != nil {
		edges = append(edges, device.EdgeGpu)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeGpu:
		ids := make([]ent.Value, 0, len(m.removedgpu))
		for id := range m.removedgpu {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgpu {
		edges = append(edges, device.EdgeGpu)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeGpu:
		return m.clearedgpu
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeGpu:
		m.ResetGpu()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// EngineLogMutation represents an operation that mutates the EngineLog nodes in the graph.
type EngineLogMutation struct {
	config
	op             Op
	typ            string
	id             *int
	modeling_id    *int
	addmodeling_id *int
	level          *string
	filename       *string
	line           *int
	addline        *int
	message        *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*EngineLog, error)
	predicates     []predicate.EngineLog
}

var _ ent.Mutation = (*EngineLogMutation)(nil)

// enginelogOption allows management of the mutation configuration using functional options.
type enginelogOption func(*EngineLogMutation)

// newEngineLogMutation creates new mutation for the EngineLog entity.
func newEngineLogMutation(c config, op Op, opts ...enginelogOption) *EngineLogMutation {
	m := &EngineLogMutation{
		config:        c,
		op:            op,
		typ:           TypeEngineLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEngineLogID sets the ID field of the mutation.
func withEngineLogID(id int) enginelogOption {
	return func(m *EngineLogMutation) {
		var (
			err   error
			once  sync.Once
			value *EngineLog
		)
		m.oldValue = func(ctx context.Context) (*EngineLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EngineLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEngineLog sets the old EngineLog of the mutation.
func withEngineLog(node *EngineLog) enginelogOption {
	return func(m *EngineLogMutation) {
		m.oldValue = func(context.Context) (*EngineLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EngineLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EngineLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EngineLog entities.
func (m *EngineLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EngineLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EngineLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EngineLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModelingID sets the "modeling_id" field.
func (m *EngineLogMutation) SetModelingID(i int) {
	m.modeling_id = &i
	m.addmodeling_id = nil
}

// ModelingID returns the value of the "modeling_id" field in the mutation.
func (m *EngineLogMutation) ModelingID() (r int, exists bool) {
	v := m.modeling_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingID returns the old "modeling_id" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldModelingID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingID: %w", err)
	}
	return oldValue.ModelingID, nil
}

// AddModelingID adds i to the "modeling_id" field.
func (m *EngineLogMutation) AddModelingID(i int) {
	if m.addmodeling_id != nil {
		*m.addmodeling_id += i
	} else {
		m.addmodeling_id = &i
	}
}

// AddedModelingID returns the value that was added to the "modeling_id" field in this mutation.
func (m *EngineLogMutation) AddedModelingID() (r int, exists bool) {
	v := m.addmodeling_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetModelingID resets all changes to the "modeling_id" field.
func (m *EngineLogMutation) ResetModelingID() {
	m.modeling_id = nil
	m.addmodeling_id = nil
}

// SetLevel sets the "level" field.
func (m *EngineLogMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *EngineLogMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *EngineLogMutation) ResetLevel() {
	m.level = nil
}

// SetFilename sets the "filename" field.
func (m *EngineLogMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *EngineLogMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *EngineLogMutation) ResetFilename() {
	m.filename = nil
}

// SetLine sets the "line" field.
func (m *EngineLogMutation) SetLine(i int) {
	m.line = &i
	m.addline = nil
}

// Line returns the value of the "line" field in the mutation.
func (m *EngineLogMutation) Line() (r int, exists bool) {
	v := m.line
	if v == nil {
		return
	}
	return *v, true
}

// OldLine returns the old "line" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldLine(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLine: %w", err)
	}
	return oldValue.Line, nil
}

// AddLine adds i to the "line" field.
func (m *EngineLogMutation) AddLine(i int) {
	if m.addline != nil {
		*m.addline += i
	} else {
		m.addline = &i
	}
}

// AddedLine returns the value that was added to the "line" field in this mutation.
func (m *EngineLogMutation) AddedLine() (r int, exists bool) {
	v := m.addline
	if v == nil {
		return
	}
	return *v, true
}

// ResetLine resets all changes to the "line" field.
func (m *EngineLogMutation) ResetLine() {
	m.line = nil
	m.addline = nil
}

// SetMessage sets the "message" field.
func (m *EngineLogMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *EngineLogMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *EngineLogMutation) ResetMessage() {
	m.message = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EngineLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EngineLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EngineLog entity.
// If the EngineLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EngineLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EngineLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the EngineLogMutation builder.
func (m *EngineLogMutation) Where(ps ...predicate.EngineLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EngineLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EngineLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EngineLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EngineLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EngineLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EngineLog).
func (m *EngineLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EngineLogMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.modeling_id != nil {
		fields = append(fields, enginelog.FieldModelingID)
	}
	if m.level != nil {
		fields = append(fields, enginelog.FieldLevel)
	}
	if m.filename != nil {
		fields = append(fields, enginelog.FieldFilename)
	}
	if m.line != nil {
		fields = append(fields, enginelog.FieldLine)
	}
	if m.message != nil {
		fields = append(fields, enginelog.FieldMessage)
	}
	if m.created_at != nil {
		fields = append(fields, enginelog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EngineLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enginelog.FieldModelingID:
		return m.ModelingID()
	case enginelog.FieldLevel:
		return m.Level()
	case enginelog.FieldFilename:
		return m.Filename()
	case enginelog.FieldLine:
		return m.Line()
	case enginelog.FieldMessage:
		return m.Message()
	case enginelog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EngineLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enginelog.FieldModelingID:
		return m.OldModelingID(ctx)
	case enginelog.FieldLevel:
		return m.OldLevel(ctx)
	case enginelog.FieldFilename:
		return m.OldFilename(ctx)
	case enginelog.FieldLine:
		return m.OldLine(ctx)
	case enginelog.FieldMessage:
		return m.OldMessage(ctx)
	case enginelog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown EngineLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EngineLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enginelog.FieldModelingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingID(v)
		return nil
	case enginelog.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case enginelog.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case enginelog.FieldLine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLine(v)
		return nil
	case enginelog.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case enginelog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown EngineLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EngineLogMutation) AddedFields() []string {
	var fields []string
	if m.addmodeling_id != nil {
		fields = append(fields, enginelog.FieldModelingID)
	}
	if m.addline != nil {
		fields = append(fields, enginelog.FieldLine)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EngineLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enginelog.FieldModelingID:
		return m.AddedModelingID()
	case enginelog.FieldLine:
		return m.AddedLine()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EngineLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enginelog.FieldModelingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModelingID(v)
		return nil
	case enginelog.FieldLine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLine(v)
		return nil
	}
	return fmt.Errorf("unknown EngineLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EngineLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EngineLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EngineLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EngineLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EngineLogMutation) ResetField(name string) error {
	switch name {
	case enginelog.FieldModelingID:
		m.ResetModelingID()
		return nil
	case enginelog.FieldLevel:
		m.ResetLevel()
		return nil
	case enginelog.FieldFilename:
		m.ResetFilename()
		return nil
	case enginelog.FieldLine:
		m.ResetLine()
		return nil
	case enginelog.FieldMessage:
		m.ResetMessage()
		return nil
	case enginelog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown EngineLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EngineLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EngineLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EngineLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EngineLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EngineLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EngineLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EngineLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EngineLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EngineLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EngineLog edge %s", name)
}

// GpuMutation represents an operation that mutates the Gpu nodes in the graph.
type GpuMutation struct {
	config
	op            Op
	typ           string
	id            *int
	uuid          *string
	index         *int
	addindex      *int
	name          *string
	state         *string
	is_use        *bool
	clearedFields map[string]struct{}
	device        *int
	cleareddevice bool
	done          bool
	oldValue      func(context.Context) (*Gpu, error)
	predicates    []predicate.Gpu
}

var _ ent.Mutation = (*GpuMutation)(nil)

// gpuOption allows management of the mutation configuration using functional options.
type gpuOption func(*GpuMutation)

// newGpuMutation creates new mutation for the Gpu entity.
func newGpuMutation(c config, op Op, opts ...gpuOption) *GpuMutation {
	m := &GpuMutation{
		config:        c,
		op:            op,
		typ:           TypeGpu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGpuID sets the ID field of the mutation.
func withGpuID(id int) gpuOption {
	return func(m *GpuMutation) {
		var (
			err   error
			once  sync.Once
			value *Gpu
		)
		m.oldValue = func(ctx context.Context) (*Gpu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gpu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGpu sets the old Gpu of the mutation.
func withGpu(node *Gpu) gpuOption {
	return func(m *GpuMutation) {
		m.oldValue = func(context.Context) (*Gpu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GpuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GpuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GpuMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GpuMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gpu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *GpuMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *GpuMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *GpuMutation) ResetUUID() {
	m.uuid = nil
}

// SetIndex sets the "index" field.
func (m *GpuMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *GpuMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *GpuMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *GpuMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *GpuMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetName sets the "name" field.
func (m *GpuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GpuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GpuMutation) ResetName() {
	m.name = nil
}

// SetState sets the "state" field.
func (m *GpuMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *GpuMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *GpuMutation) ResetState() {
	m.state = nil
}

// SetIsUse sets the "is_use" field.
func (m *GpuMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *GpuMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *GpuMutation) ResetIsUse() {
	m.is_use = nil
}

// SetDeviceID sets the "device_id" field.
func (m *GpuMutation) SetDeviceID(i int) {
	m.device = &i
}

// DeviceID returns the value of the "device_id" field in the mutation.
func (m *GpuMutation) DeviceID() (r int, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceID returns the old "device_id" field's value of the Gpu entity.
// If the Gpu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GpuMutation) OldDeviceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceID: %w", err)
	}
	return oldValue.DeviceID, nil
}

// ClearDeviceID clears the value of the "device_id" field.
func (m *GpuMutation) ClearDeviceID() {
	m.device = nil
	m.clearedFields[gpu.FieldDeviceID] = struct{}{}
}

// DeviceIDCleared returns if the "device_id" field was cleared in this mutation.
func (m *GpuMutation) DeviceIDCleared() bool {
	_, ok := m.clearedFields[gpu.FieldDeviceID]
	return ok
}

// ResetDeviceID resets all changes to the "device_id" field.
func (m *GpuMutation) ResetDeviceID() {
	m.device = nil
	delete(m.clearedFields, gpu.FieldDeviceID)
}

// ClearDevice clears the "device" edge to the Device entity.
func (m *GpuMutation) ClearDevice() {
	m.cleareddevice = true
	m.clearedFields[gpu.FieldDeviceID] = struct{}{}
}

// DeviceCleared reports if the "device" edge to the Device entity was cleared.
func (m *GpuMutation) DeviceCleared() bool {
	return m.DeviceIDCleared() || m.cleareddevice
}

// DeviceIDs returns the "device" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeviceID instead. It exists only for internal usage by the builders.
func (m *GpuMutation) DeviceIDs() (ids []int) {
	if id := m.device; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDevice resets all changes to the "device" edge.
func (m *GpuMutation) ResetDevice() {
	m.device = nil
	m.cleareddevice = false
}

// Where appends a list predicates to the GpuMutation builder.
func (m *GpuMutation) Where(ps ...predicate.Gpu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GpuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GpuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Gpu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GpuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GpuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Gpu).
func (m *GpuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GpuMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.uuid != nil {
		fields = append(fields, gpu.FieldUUID)
	}
	if m.index != nil {
		fields = append(fields, gpu.FieldIndex)
	}
	if m.name != nil {
		fields = append(fields, gpu.FieldName)
	}
	if m.state != nil {
		fields = append(fields, gpu.FieldState)
	}
	if m.is_use != nil {
		fields = append(fields, gpu.FieldIsUse)
	}
	if m.device != nil {
		fields = append(fields, gpu.FieldDeviceID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GpuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gpu.FieldUUID:
		return m.UUID()
	case gpu.FieldIndex:
		return m.Index()
	case gpu.FieldName:
		return m.Name()
	case gpu.FieldState:
		return m.State()
	case gpu.FieldIsUse:
		return m.IsUse()
	case gpu.FieldDeviceID:
		return m.DeviceID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GpuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gpu.FieldUUID:
		return m.OldUUID(ctx)
	case gpu.FieldIndex:
		return m.OldIndex(ctx)
	case gpu.FieldName:
		return m.OldName(ctx)
	case gpu.FieldState:
		return m.OldState(ctx)
	case gpu.FieldIsUse:
		return m.OldIsUse(ctx)
	case gpu.FieldDeviceID:
		return m.OldDeviceID(ctx)
	}
	return nil, fmt.Errorf("unknown Gpu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GpuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gpu.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case gpu.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case gpu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case gpu.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case gpu.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case gpu.FieldDeviceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceID(v)
		return nil
	}
	return fmt.Errorf("unknown Gpu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GpuMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, gpu.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GpuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gpu.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GpuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gpu.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Gpu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GpuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(gpu.FieldDeviceID) {
		fields = append(fields, gpu.FieldDeviceID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GpuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GpuMutation) ClearField(name string) error {
	switch name {
	case gpu.FieldDeviceID:
		m.ClearDeviceID()
		return nil
	}
	return fmt.Errorf("unknown Gpu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GpuMutation) ResetField(name string) error {
	switch name {
	case gpu.FieldUUID:
		m.ResetUUID()
		return nil
	case gpu.FieldIndex:
		m.ResetIndex()
		return nil
	case gpu.FieldName:
		m.ResetName()
		return nil
	case gpu.FieldState:
		m.ResetState()
		return nil
	case gpu.FieldIsUse:
		m.ResetIsUse()
		return nil
	case gpu.FieldDeviceID:
		m.ResetDeviceID()
		return nil
	}
	return fmt.Errorf("unknown Gpu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GpuMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.device != nil {
		edges = append(edges, gpu.EdgeDevice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GpuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gpu.EdgeDevice:
		if id := m.device; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GpuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GpuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GpuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddevice {
		edges = append(edges, gpu.EdgeDevice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GpuMutation) EdgeCleared(name string) bool {
	switch name {
	case gpu.EdgeDevice:
		return m.cleareddevice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GpuMutation) ClearEdge(name string) error {
	switch name {
	case gpu.EdgeDevice:
		m.ClearDevice()
		return nil
	}
	return fmt.Errorf("unknown Gpu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GpuMutation) ResetEdge(name string) error {
	switch name {
	case gpu.EdgeDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown Gpu edge %s", name)
}

// HyperParamsHistoryMutation represents an operation that mutates the HyperParamsHistory nodes in the graph.
type HyperParamsHistoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	trial_id      *int
	addtrial_id   *int
	trial_uuid    *string
	model         *string
	model_num     *int
	addmodel_num  *int
	params        *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HyperParamsHistory, error)
	predicates    []predicate.HyperParamsHistory
}

var _ ent.Mutation = (*HyperParamsHistoryMutation)(nil)

// hyperparamshistoryOption allows management of the mutation configuration using functional options.
type hyperparamshistoryOption func(*HyperParamsHistoryMutation)

// newHyperParamsHistoryMutation creates new mutation for the HyperParamsHistory entity.
func newHyperParamsHistoryMutation(c config, op Op, opts ...hyperparamshistoryOption) *HyperParamsHistoryMutation {
	m := &HyperParamsHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeHyperParamsHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHyperParamsHistoryID sets the ID field of the mutation.
func withHyperParamsHistoryID(id int) hyperparamshistoryOption {
	return func(m *HyperParamsHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *HyperParamsHistory
		)
		m.oldValue = func(ctx context.Context) (*HyperParamsHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HyperParamsHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHyperParamsHistory sets the old HyperParamsHistory of the mutation.
func withHyperParamsHistory(node *HyperParamsHistory) hyperparamshistoryOption {
	return func(m *HyperParamsHistoryMutation) {
		m.oldValue = func(context.Context) (*HyperParamsHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HyperParamsHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HyperParamsHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HyperParamsHistory entities.
func (m *HyperParamsHistoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HyperParamsHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HyperParamsHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HyperParamsHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTrialID sets the "trial_id" field.
func (m *HyperParamsHistoryMutation) SetTrialID(i int) {
	m.trial_id = &i
	m.addtrial_id = nil
}

// TrialID returns the value of the "trial_id" field in the mutation.
func (m *HyperParamsHistoryMutation) TrialID() (r int, exists bool) {
	v := m.trial_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialID returns the old "trial_id" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldTrialID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialID: %w", err)
	}
	return oldValue.TrialID, nil
}

// AddTrialID adds i to the "trial_id" field.
func (m *HyperParamsHistoryMutation) AddTrialID(i int) {
	if m.addtrial_id != nil {
		*m.addtrial_id += i
	} else {
		m.addtrial_id = &i
	}
}

// AddedTrialID returns the value that was added to the "trial_id" field in this mutation.
func (m *HyperParamsHistoryMutation) AddedTrialID() (r int, exists bool) {
	v := m.addtrial_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrialID resets all changes to the "trial_id" field.
func (m *HyperParamsHistoryMutation) ResetTrialID() {
	m.trial_id = nil
	m.addtrial_id = nil
}

// SetTrialUUID sets the "trial_uuid" field.
func (m *HyperParamsHistoryMutation) SetTrialUUID(s string) {
	m.trial_uuid = &s
}

// TrialUUID returns the value of the "trial_uuid" field in the mutation.
func (m *HyperParamsHistoryMutation) TrialUUID() (r string, exists bool) {
	v := m.trial_uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialUUID returns the old "trial_uuid" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldTrialUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialUUID: %w", err)
	}
	return oldValue.TrialUUID, nil
}

// ResetTrialUUID resets all changes to the "trial_uuid" field.
func (m *HyperParamsHistoryMutation) ResetTrialUUID() {
	m.trial_uuid = nil
}

// SetModel sets the "model" field.
func (m *HyperParamsHistoryMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *HyperParamsHistoryMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *HyperParamsHistoryMutation) ResetModel() {
	m.model = nil
}

// SetModelNum sets the "model_num" field.
func (m *HyperParamsHistoryMutation) SetModelNum(i int) {
	m.model_num = &i
	m.addmodel_num = nil
}

// ModelNum returns the value of the "model_num" field in the mutation.
func (m *HyperParamsHistoryMutation) ModelNum() (r int, exists bool) {
	v := m.model_num
	if v == nil {
		return
	}
	return *v, true
}

// OldModelNum returns the old "model_num" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldModelNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelNum: %w", err)
	}
	return oldValue.ModelNum, nil
}

// AddModelNum adds i to the "model_num" field.
func (m *HyperParamsHistoryMutation) AddModelNum(i int) {
	if m.addmodel_num != nil {
		*m.addmodel_num += i
	} else {
		m.addmodel_num = &i
	}
}

// AddedModelNum returns the value that was added to the "model_num" field in this mutation.
func (m *HyperParamsHistoryMutation) AddedModelNum() (r int, exists bool) {
	v := m.addmodel_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetModelNum resets all changes to the "model_num" field.
func (m *HyperParamsHistoryMutation) ResetModelNum() {
	m.model_num = nil
	m.addmodel_num = nil
}

// SetParams sets the "params" field.
func (m *HyperParamsHistoryMutation) SetParams(s string) {
	m.params = &s
}

// Params returns the value of the "params" field in the mutation.
func (m *HyperParamsHistoryMutation) Params() (r string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldParams(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// ResetParams resets all changes to the "params" field.
func (m *HyperParamsHistoryMutation) ResetParams() {
	m.params = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *HyperParamsHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HyperParamsHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the HyperParamsHistory entity.
// If the HyperParamsHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HyperParamsHistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HyperParamsHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the HyperParamsHistoryMutation builder.
func (m *HyperParamsHistoryMutation) Where(ps ...predicate.HyperParamsHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HyperParamsHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HyperParamsHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HyperParamsHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HyperParamsHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HyperParamsHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HyperParamsHistory).
func (m *HyperParamsHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HyperParamsHistoryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.trial_id != nil {
		fields = append(fields, hyperparamshistory.FieldTrialID)
	}
	if m.trial_uuid != nil {
		fields = append(fields, hyperparamshistory.FieldTrialUUID)
	}
	if m.model != nil {
		fields = append(fields, hyperparamshistory.FieldModel)
	}
	if m.model_num != nil {
		fields = append(fields, hyperparamshistory.FieldModelNum)
	}
	if m.params != nil {
		fields = append(fields, hyperparamshistory.FieldParams)
	}
	if m.created_at != nil {
		fields = append(fields, hyperparamshistory.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HyperParamsHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hyperparamshistory.FieldTrialID:
		return m.TrialID()
	case hyperparamshistory.FieldTrialUUID:
		return m.TrialUUID()
	case hyperparamshistory.FieldModel:
		return m.Model()
	case hyperparamshistory.FieldModelNum:
		return m.ModelNum()
	case hyperparamshistory.FieldParams:
		return m.Params()
	case hyperparamshistory.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HyperParamsHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hyperparamshistory.FieldTrialID:
		return m.OldTrialID(ctx)
	case hyperparamshistory.FieldTrialUUID:
		return m.OldTrialUUID(ctx)
	case hyperparamshistory.FieldModel:
		return m.OldModel(ctx)
	case hyperparamshistory.FieldModelNum:
		return m.OldModelNum(ctx)
	case hyperparamshistory.FieldParams:
		return m.OldParams(ctx)
	case hyperparamshistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown HyperParamsHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HyperParamsHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hyperparamshistory.FieldTrialID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialID(v)
		return nil
	case hyperparamshistory.FieldTrialUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialUUID(v)
		return nil
	case hyperparamshistory.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case hyperparamshistory.FieldModelNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelNum(v)
		return nil
	case hyperparamshistory.FieldParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case hyperparamshistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown HyperParamsHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HyperParamsHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addtrial_id != nil {
		fields = append(fields, hyperparamshistory.FieldTrialID)
	}
	if m.addmodel_num != nil {
		fields = append(fields, hyperparamshistory.FieldModelNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HyperParamsHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hyperparamshistory.FieldTrialID:
		return m.AddedTrialID()
	case hyperparamshistory.FieldModelNum:
		return m.AddedModelNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HyperParamsHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hyperparamshistory.FieldTrialID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrialID(v)
		return nil
	case hyperparamshistory.FieldModelNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModelNum(v)
		return nil
	}
	return fmt.Errorf("unknown HyperParamsHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HyperParamsHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HyperParamsHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HyperParamsHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HyperParamsHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HyperParamsHistoryMutation) ResetField(name string) error {
	switch name {
	case hyperparamshistory.FieldTrialID:
		m.ResetTrialID()
		return nil
	case hyperparamshistory.FieldTrialUUID:
		m.ResetTrialUUID()
		return nil
	case hyperparamshistory.FieldModel:
		m.ResetModel()
		return nil
	case hyperparamshistory.FieldModelNum:
		m.ResetModelNum()
		return nil
	case hyperparamshistory.FieldParams:
		m.ResetParams()
		return nil
	case hyperparamshistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown HyperParamsHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HyperParamsHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HyperParamsHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HyperParamsHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HyperParamsHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HyperParamsHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HyperParamsHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HyperParamsHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HyperParamsHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HyperParamsHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HyperParamsHistory edge %s", name)
}

// MenuMutation represents an operation that mutates the Menu nodes in the graph.
type MenuMutation struct {
	config
	op              Op
	typ             string
	id              *string
	label           *string
	icon            *string
	url             *string
	is_use          *bool
	is_title        *bool
	menu_order      *int
	addmenu_order   *int
	group           *int
	addgroup        *int
	clearedFields   map[string]struct{}
	parent          *string
	clearedparent   bool
	children        map[string]struct{}
	removedchildren map[string]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Menu, error)
	predicates      []predicate.Menu
}

var _ ent.Mutation = (*MenuMutation)(nil)

// menuOption allows management of the mutation configuration using functional options.
type menuOption func(*MenuMutation)

// newMenuMutation creates new mutation for the Menu entity.
func newMenuMutation(c config, op Op, opts ...menuOption) *MenuMutation {
	m := &MenuMutation{
		config:        c,
		op:            op,
		typ:           TypeMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuID sets the ID field of the mutation.
func withMenuID(id string) menuOption {
	return func(m *MenuMutation) {
		var (
			err   error
			once  sync.Once
			value *Menu
		)
		m.oldValue = func(ctx context.Context) (*Menu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Menu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenu sets the old Menu of the mutation.
func withMenu(node *Menu) menuOption {
	return func(m *MenuMutation) {
		m.oldValue = func(context.Context) (*Menu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Menu entities.
func (m *MenuMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MenuMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MenuMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Menu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *MenuMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *MenuMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *MenuMutation) ResetLabel() {
	m.label = nil
}

// SetIcon sets the "icon" field.
func (m *MenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *MenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *MenuMutation) ResetIcon() {
	m.icon = nil
}

// SetURL sets the "url" field.
func (m *MenuMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MenuMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *MenuMutation) ClearURL() {
	m.url = nil
	m.clearedFields[menu.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *MenuMutation) URLCleared() bool {
	_, ok := m.clearedFields[menu.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *MenuMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, menu.FieldURL)
}

// SetIsUse sets the "is_use" field.
func (m *MenuMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *MenuMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ClearIsUse clears the value of the "is_use" field.
func (m *MenuMutation) ClearIsUse() {
	m.is_use = nil
	m.clearedFields[menu.FieldIsUse] = struct{}{}
}

// IsUseCleared returns if the "is_use" field was cleared in this mutation.
func (m *MenuMutation) IsUseCleared() bool {
	_, ok := m.clearedFields[menu.FieldIsUse]
	return ok
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *MenuMutation) ResetIsUse() {
	m.is_use = nil
	delete(m.clearedFields, menu.FieldIsUse)
}

// SetIsTitle sets the "is_title" field.
func (m *MenuMutation) SetIsTitle(b bool) {
	m.is_title = &b
}

// IsTitle returns the value of the "is_title" field in the mutation.
func (m *MenuMutation) IsTitle() (r bool, exists bool) {
	v := m.is_title
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTitle returns the old "is_title" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldIsTitle(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTitle: %w", err)
	}
	return oldValue.IsTitle, nil
}

// ClearIsTitle clears the value of the "is_title" field.
func (m *MenuMutation) ClearIsTitle() {
	m.is_title = nil
	m.clearedFields[menu.FieldIsTitle] = struct{}{}
}

// IsTitleCleared returns if the "is_title" field was cleared in this mutation.
func (m *MenuMutation) IsTitleCleared() bool {
	_, ok := m.clearedFields[menu.FieldIsTitle]
	return ok
}

// ResetIsTitle resets all changes to the "is_title" field.
func (m *MenuMutation) ResetIsTitle() {
	m.is_title = nil
	delete(m.clearedFields, menu.FieldIsTitle)
}

// SetMenuOrder sets the "menu_order" field.
func (m *MenuMutation) SetMenuOrder(i int) {
	m.menu_order = &i
	m.addmenu_order = nil
}

// MenuOrder returns the value of the "menu_order" field in the mutation.
func (m *MenuMutation) MenuOrder() (r int, exists bool) {
	v := m.menu_order
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuOrder returns the old "menu_order" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldMenuOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuOrder: %w", err)
	}
	return oldValue.MenuOrder, nil
}

// AddMenuOrder adds i to the "menu_order" field.
func (m *MenuMutation) AddMenuOrder(i int) {
	if m.addmenu_order != nil {
		*m.addmenu_order += i
	} else {
		m.addmenu_order = &i
	}
}

// AddedMenuOrder returns the value that was added to the "menu_order" field in this mutation.
func (m *MenuMutation) AddedMenuOrder() (r int, exists bool) {
	v := m.addmenu_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetMenuOrder resets all changes to the "menu_order" field.
func (m *MenuMutation) ResetMenuOrder() {
	m.menu_order = nil
	m.addmenu_order = nil
}

// SetParentKey sets the "parent_key" field.
func (m *MenuMutation) SetParentKey(s string) {
	m.parent = &s
}

// ParentKey returns the value of the "parent_key" field in the mutation.
func (m *MenuMutation) ParentKey() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentKey returns the old "parent_key" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldParentKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentKey: %w", err)
	}
	return oldValue.ParentKey, nil
}

// ClearParentKey clears the value of the "parent_key" field.
func (m *MenuMutation) ClearParentKey() {
	m.parent = nil
	m.clearedFields[menu.FieldParentKey] = struct{}{}
}

// ParentKeyCleared returns if the "parent_key" field was cleared in this mutation.
func (m *MenuMutation) ParentKeyCleared() bool {
	_, ok := m.clearedFields[menu.FieldParentKey]
	return ok
}

// ResetParentKey resets all changes to the "parent_key" field.
func (m *MenuMutation) ResetParentKey() {
	m.parent = nil
	delete(m.clearedFields, menu.FieldParentKey)
}

// SetGroup sets the "group" field.
func (m *MenuMutation) SetGroup(i int) {
	m.group = &i
	m.addgroup = nil
}

// Group returns the value of the "group" field in the mutation.
func (m *MenuMutation) Group() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroup returns the old "group" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldGroup(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroup: %w", err)
	}
	return oldValue.Group, nil
}

// AddGroup adds i to the "group" field.
func (m *MenuMutation) AddGroup(i int) {
	if m.addgroup != nil {
		*m.addgroup += i
	} else {
		m.addgroup = &i
	}
}

// AddedGroup returns the value that was added to the "group" field in this mutation.
func (m *MenuMutation) AddedGroup() (r int, exists bool) {
	v := m.addgroup
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroup resets all changes to the "group" field.
func (m *MenuMutation) ResetGroup() {
	m.group = nil
	m.addgroup = nil
}

// SetParentID sets the "parent" edge to the Menu entity by id.
func (m *MenuMutation) SetParentID(id string) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Menu entity.
func (m *MenuMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[menu.FieldParentKey] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Menu entity was cleared.
func (m *MenuMutation) ParentCleared() bool {
	return m.ParentKeyCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *MenuMutation) ParentID() (id string, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MenuMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *MenuMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Menu entity by ids.
func (m *MenuMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Menu entity.
func (m *MenuMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Menu entity was cleared.
func (m *MenuMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Menu entity by IDs.
func (m *MenuMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Menu entity.
func (m *MenuMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *MenuMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *MenuMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the MenuMutation builder.
func (m *MenuMutation) Where(ps ...predicate.Menu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Menu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Menu).
func (m *MenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.label != nil {
		fields = append(fields, menu.FieldLabel)
	}
	if m.icon != nil {
		fields = append(fields, menu.FieldIcon)
	}
	if m.url != nil {
		fields = append(fields, menu.FieldURL)
	}
	if m.is_use != nil {
		fields = append(fields, menu.FieldIsUse)
	}
	if m.is_title != nil {
		fields = append(fields, menu.FieldIsTitle)
	}
	if m.menu_order != nil {
		fields = append(fields, menu.FieldMenuOrder)
	}
	if m.parent != nil {
		fields = append(fields, menu.FieldParentKey)
	}
	if m.group != nil {
		fields = append(fields, menu.FieldGroup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldLabel:
		return m.Label()
	case menu.FieldIcon:
		return m.Icon()
	case menu.FieldURL:
		return m.URL()
	case menu.FieldIsUse:
		return m.IsUse()
	case menu.FieldIsTitle:
		return m.IsTitle()
	case menu.FieldMenuOrder:
		return m.MenuOrder()
	case menu.FieldParentKey:
		return m.ParentKey()
	case menu.FieldGroup:
		return m.Group()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menu.FieldLabel:
		return m.OldLabel(ctx)
	case menu.FieldIcon:
		return m.OldIcon(ctx)
	case menu.FieldURL:
		return m.OldURL(ctx)
	case menu.FieldIsUse:
		return m.OldIsUse(ctx)
	case menu.FieldIsTitle:
		return m.OldIsTitle(ctx)
	case menu.FieldMenuOrder:
		return m.OldMenuOrder(ctx)
	case menu.FieldParentKey:
		return m.OldParentKey(ctx)
	case menu.FieldGroup:
		return m.OldGroup(ctx)
	}
	return nil, fmt.Errorf("unknown Menu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menu.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case menu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case menu.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case menu.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case menu.FieldIsTitle:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTitle(v)
		return nil
	case menu.FieldMenuOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuOrder(v)
		return nil
	case menu.FieldParentKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentKey(v)
		return nil
	case menu.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroup(v)
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuMutation) AddedFields() []string {
	var fields []string
	if m.addmenu_order != nil {
		fields = append(fields, menu.FieldMenuOrder)
	}
	if m.addgroup != nil {
		fields = append(fields, menu.FieldGroup)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldMenuOrder:
		return m.AddedMenuOrder()
	case menu.FieldGroup:
		return m.AddedGroup()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menu.FieldMenuOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMenuOrder(v)
		return nil
	case menu.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroup(v)
		return nil
	}
	return fmt.Errorf("unknown Menu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(menu.FieldURL) {
		fields = append(fields, menu.FieldURL)
	}
	if m.FieldCleared(menu.FieldIsUse) {
		fields = append(fields, menu.FieldIsUse)
	}
	if m.FieldCleared(menu.FieldIsTitle) {
		fields = append(fields, menu.FieldIsTitle)
	}
	if m.FieldCleared(menu.FieldParentKey) {
		fields = append(fields, menu.FieldParentKey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuMutation) ClearField(name string) error {
	switch name {
	case menu.FieldURL:
		m.ClearURL()
		return nil
	case menu.FieldIsUse:
		m.ClearIsUse()
		return nil
	case menu.FieldIsTitle:
		m.ClearIsTitle()
		return nil
	case menu.FieldParentKey:
		m.ClearParentKey()
		return nil
	}
	return fmt.Errorf("unknown Menu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuMutation) ResetField(name string) error {
	switch name {
	case menu.FieldLabel:
		m.ResetLabel()
		return nil
	case menu.FieldIcon:
		m.ResetIcon()
		return nil
	case menu.FieldURL:
		m.ResetURL()
		return nil
	case menu.FieldIsUse:
		m.ResetIsUse()
		return nil
	case menu.FieldIsTitle:
		m.ResetIsTitle()
		return nil
	case menu.FieldMenuOrder:
		m.ResetMenuOrder()
		return nil
	case menu.FieldParentKey:
		m.ResetParentKey()
		return nil
	case menu.FieldGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, menu.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, menu.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuMutation) EdgeCleared(name string) bool {
	switch name {
	case menu.EdgeParent:
		return m.clearedparent
	case menu.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuMutation) ClearEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Menu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuMutation) ResetEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ResetParent()
		return nil
	case menu.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Menu edge %s", name)
}

// ModelingMutation represents an operation that mutates the Modeling nodes in the graph.
type ModelingMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	local_id                *int
	addlocal_id             *int
	parent_id               *int
	addparent_id            *int
	parent_local_id         *int
	addparent_local_id      *int
	dataset_id              *int
	adddataset_id           *int
	params                  *[]string
	appendparams            []string
	dataset_stat            *[]string
	appenddataset_stat      []string
	modeling_type           *string
	modeling_step           *string
	performance             *[]string
	appendperformance       []string
	progress                *float64
	addprogress             *float64
	created_at              *time.Time
	updated_at              *time.Time
	started_at              *time.Time
	clearedFields           map[string]struct{}
	task                    *int
	clearedtask             bool
	modeling_details        map[int]struct{}
	removedmodeling_details map[int]struct{}
	clearedmodeling_details bool
	modeling_models         map[int]struct{}
	removedmodeling_models  map[int]struct{}
	clearedmodeling_models  bool
	trials                  map[int]struct{}
	removedtrials           map[int]struct{}
	clearedtrials           bool
	done                    bool
	oldValue                func(context.Context) (*Modeling, error)
	predicates              []predicate.Modeling
}

var _ ent.Mutation = (*ModelingMutation)(nil)

// modelingOption allows management of the mutation configuration using functional options.
type modelingOption func(*ModelingMutation)

// newModelingMutation creates new mutation for the Modeling entity.
func newModelingMutation(c config, op Op, opts ...modelingOption) *ModelingMutation {
	m := &ModelingMutation{
		config:        c,
		op:            op,
		typ:           TypeModeling,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModelingID sets the ID field of the mutation.
func withModelingID(id int) modelingOption {
	return func(m *ModelingMutation) {
		var (
			err   error
			once  sync.Once
			value *Modeling
		)
		m.oldValue = func(ctx context.Context) (*Modeling, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Modeling.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModeling sets the old Modeling of the mutation.
func withModeling(node *Modeling) modelingOption {
	return func(m *ModelingMutation) {
		m.oldValue = func(context.Context) (*Modeling, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModelingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModelingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Modeling entities.
func (m *ModelingMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ModelingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ModelingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Modeling.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLocalID sets the "local_id" field.
func (m *ModelingMutation) SetLocalID(i int) {
	m.local_id = &i
	m.addlocal_id = nil
}

// LocalID returns the value of the "local_id" field in the mutation.
func (m *ModelingMutation) LocalID() (r int, exists bool) {
	v := m.local_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalID returns the old "local_id" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldLocalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalID: %w", err)
	}
	return oldValue.LocalID, nil
}

// AddLocalID adds i to the "local_id" field.
func (m *ModelingMutation) AddLocalID(i int) {
	if m.addlocal_id != nil {
		*m.addlocal_id += i
	} else {
		m.addlocal_id = &i
	}
}

// AddedLocalID returns the value that was added to the "local_id" field in this mutation.
func (m *ModelingMutation) AddedLocalID() (r int, exists bool) {
	v := m.addlocal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetLocalID resets all changes to the "local_id" field.
func (m *ModelingMutation) ResetLocalID() {
	m.local_id = nil
	m.addlocal_id = nil
}

// SetTaskID sets the "task_id" field.
func (m *ModelingMutation) SetTaskID(i int) {
	m.task = &i
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *ModelingMutation) TaskID() (r int, exists bool) {
	v := m.task
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldTaskID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ClearTaskID clears the value of the "task_id" field.
func (m *ModelingMutation) ClearTaskID() {
	m.task = nil
	m.clearedFields[modeling.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "task_id" field was cleared in this mutation.
func (m *ModelingMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[modeling.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *ModelingMutation) ResetTaskID() {
	m.task = nil
	delete(m.clearedFields, modeling.FieldTaskID)
}

// SetParentID sets the "parent_id" field.
func (m *ModelingMutation) SetParentID(i int) {
	m.parent_id = &i
	m.addparent_id = nil
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *ModelingMutation) ParentID() (r int, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// AddParentID adds i to the "parent_id" field.
func (m *ModelingMutation) AddParentID(i int) {
	if m.addparent_id != nil {
		*m.addparent_id += i
	} else {
		m.addparent_id = &i
	}
}

// AddedParentID returns the value that was added to the "parent_id" field in this mutation.
func (m *ModelingMutation) AddedParentID() (r int, exists bool) {
	v := m.addparent_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearParentID clears the value of the "parent_id" field.
func (m *ModelingMutation) ClearParentID() {
	m.parent_id = nil
	m.addparent_id = nil
	m.clearedFields[modeling.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *ModelingMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[modeling.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *ModelingMutation) ResetParentID() {
	m.parent_id = nil
	m.addparent_id = nil
	delete(m.clearedFields, modeling.FieldParentID)
}

// SetParentLocalID sets the "parent_local_id" field.
func (m *ModelingMutation) SetParentLocalID(i int) {
	m.parent_local_id = &i
	m.addparent_local_id = nil
}

// ParentLocalID returns the value of the "parent_local_id" field in the mutation.
func (m *ModelingMutation) ParentLocalID() (r int, exists bool) {
	v := m.parent_local_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentLocalID returns the old "parent_local_id" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldParentLocalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentLocalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentLocalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentLocalID: %w", err)
	}
	return oldValue.ParentLocalID, nil
}

// AddParentLocalID adds i to the "parent_local_id" field.
func (m *ModelingMutation) AddParentLocalID(i int) {
	if m.addparent_local_id != nil {
		*m.addparent_local_id += i
	} else {
		m.addparent_local_id = &i
	}
}

// AddedParentLocalID returns the value that was added to the "parent_local_id" field in this mutation.
func (m *ModelingMutation) AddedParentLocalID() (r int, exists bool) {
	v := m.addparent_local_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (m *ModelingMutation) ClearParentLocalID() {
	m.parent_local_id = nil
	m.addparent_local_id = nil
	m.clearedFields[modeling.FieldParentLocalID] = struct{}{}
}

// ParentLocalIDCleared returns if the "parent_local_id" field was cleared in this mutation.
func (m *ModelingMutation) ParentLocalIDCleared() bool {
	_, ok := m.clearedFields[modeling.FieldParentLocalID]
	return ok
}

// ResetParentLocalID resets all changes to the "parent_local_id" field.
func (m *ModelingMutation) ResetParentLocalID() {
	m.parent_local_id = nil
	m.addparent_local_id = nil
	delete(m.clearedFields, modeling.FieldParentLocalID)
}

// SetDatasetID sets the "dataset_id" field.
func (m *ModelingMutation) SetDatasetID(i int) {
	m.dataset_id = &i
	m.adddataset_id = nil
}

// DatasetID returns the value of the "dataset_id" field in the mutation.
func (m *ModelingMutation) DatasetID() (r int, exists bool) {
	v := m.dataset_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetID returns the old "dataset_id" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldDatasetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetID: %w", err)
	}
	return oldValue.DatasetID, nil
}

// AddDatasetID adds i to the "dataset_id" field.
func (m *ModelingMutation) AddDatasetID(i int) {
	if m.adddataset_id != nil {
		*m.adddataset_id += i
	} else {
		m.adddataset_id = &i
	}
}

// AddedDatasetID returns the value that was added to the "dataset_id" field in this mutation.
func (m *ModelingMutation) AddedDatasetID() (r int, exists bool) {
	v := m.adddataset_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (m *ModelingMutation) ClearDatasetID() {
	m.dataset_id = nil
	m.adddataset_id = nil
	m.clearedFields[modeling.FieldDatasetID] = struct{}{}
}

// DatasetIDCleared returns if the "dataset_id" field was cleared in this mutation.
func (m *ModelingMutation) DatasetIDCleared() bool {
	_, ok := m.clearedFields[modeling.FieldDatasetID]
	return ok
}

// ResetDatasetID resets all changes to the "dataset_id" field.
func (m *ModelingMutation) ResetDatasetID() {
	m.dataset_id = nil
	m.adddataset_id = nil
	delete(m.clearedFields, modeling.FieldDatasetID)
}

// SetParams sets the "params" field.
func (m *ModelingMutation) SetParams(s []string) {
	m.params = &s
	m.appendparams = nil
}

// Params returns the value of the "params" field in the mutation.
func (m *ModelingMutation) Params() (r []string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldParams(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// AppendParams adds s to the "params" field.
func (m *ModelingMutation) AppendParams(s []string) {
	m.appendparams = append(m.appendparams, s...)
}

// AppendedParams returns the list of values that were appended to the "params" field in this mutation.
func (m *ModelingMutation) AppendedParams() ([]string, bool) {
	if len(m.appendparams) == 0 {
		return nil, false
	}
	return m.appendparams, true
}

// ResetParams resets all changes to the "params" field.
func (m *ModelingMutation) ResetParams() {
	m.params = nil
	m.appendparams = nil
}

// SetDatasetStat sets the "dataset_stat" field.
func (m *ModelingMutation) SetDatasetStat(s []string) {
	m.dataset_stat = &s
	m.appenddataset_stat = nil
}

// DatasetStat returns the value of the "dataset_stat" field in the mutation.
func (m *ModelingMutation) DatasetStat() (r []string, exists bool) {
	v := m.dataset_stat
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetStat returns the old "dataset_stat" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldDatasetStat(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetStat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetStat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetStat: %w", err)
	}
	return oldValue.DatasetStat, nil
}

// AppendDatasetStat adds s to the "dataset_stat" field.
func (m *ModelingMutation) AppendDatasetStat(s []string) {
	m.appenddataset_stat = append(m.appenddataset_stat, s...)
}

// AppendedDatasetStat returns the list of values that were appended to the "dataset_stat" field in this mutation.
func (m *ModelingMutation) AppendedDatasetStat() ([]string, bool) {
	if len(m.appenddataset_stat) == 0 {
		return nil, false
	}
	return m.appenddataset_stat, true
}

// ResetDatasetStat resets all changes to the "dataset_stat" field.
func (m *ModelingMutation) ResetDatasetStat() {
	m.dataset_stat = nil
	m.appenddataset_stat = nil
}

// SetModelingType sets the "modeling_type" field.
func (m *ModelingMutation) SetModelingType(s string) {
	m.modeling_type = &s
}

// ModelingType returns the value of the "modeling_type" field in the mutation.
func (m *ModelingMutation) ModelingType() (r string, exists bool) {
	v := m.modeling_type
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingType returns the old "modeling_type" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldModelingType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingType: %w", err)
	}
	return oldValue.ModelingType, nil
}

// ResetModelingType resets all changes to the "modeling_type" field.
func (m *ModelingMutation) ResetModelingType() {
	m.modeling_type = nil
}

// SetModelingStep sets the "modeling_step" field.
func (m *ModelingMutation) SetModelingStep(s string) {
	m.modeling_step = &s
}

// ModelingStep returns the value of the "modeling_step" field in the mutation.
func (m *ModelingMutation) ModelingStep() (r string, exists bool) {
	v := m.modeling_step
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingStep returns the old "modeling_step" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldModelingStep(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingStep: %w", err)
	}
	return oldValue.ModelingStep, nil
}

// ResetModelingStep resets all changes to the "modeling_step" field.
func (m *ModelingMutation) ResetModelingStep() {
	m.modeling_step = nil
}

// SetPerformance sets the "performance" field.
func (m *ModelingMutation) SetPerformance(s []string) {
	m.performance = &s
	m.appendperformance = nil
}

// Performance returns the value of the "performance" field in the mutation.
func (m *ModelingMutation) Performance() (r []string, exists bool) {
	v := m.performance
	if v == nil {
		return
	}
	return *v, true
}

// OldPerformance returns the old "performance" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldPerformance(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPerformance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPerformance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPerformance: %w", err)
	}
	return oldValue.Performance, nil
}

// AppendPerformance adds s to the "performance" field.
func (m *ModelingMutation) AppendPerformance(s []string) {
	m.appendperformance = append(m.appendperformance, s...)
}

// AppendedPerformance returns the list of values that were appended to the "performance" field in this mutation.
func (m *ModelingMutation) AppendedPerformance() ([]string, bool) {
	if len(m.appendperformance) == 0 {
		return nil, false
	}
	return m.appendperformance, true
}

// ResetPerformance resets all changes to the "performance" field.
func (m *ModelingMutation) ResetPerformance() {
	m.performance = nil
	m.appendperformance = nil
}

// SetProgress sets the "progress" field.
func (m *ModelingMutation) SetProgress(f float64) {
	m.progress = &f
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *ModelingMutation) Progress() (r float64, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldProgress(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds f to the "progress" field.
func (m *ModelingMutation) AddProgress(f float64) {
	if m.addprogress != nil {
		*m.addprogress += f
	} else {
		m.addprogress = &f
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *ModelingMutation) AddedProgress() (r float64, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *ModelingMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ModelingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ModelingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ModelingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ModelingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ModelingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ModelingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStartedAt sets the "started_at" field.
func (m *ModelingMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *ModelingMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the Modeling entity.
// If the Modeling object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingMutation) OldStartedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *ModelingMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[modeling.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *ModelingMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[modeling.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *ModelingMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, modeling.FieldStartedAt)
}

// ClearTask clears the "task" edge to the Task entity.
func (m *ModelingMutation) ClearTask() {
	m.clearedtask = true
	m.clearedFields[modeling.FieldTaskID] = struct{}{}
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *ModelingMutation) TaskCleared() bool {
	return m.TaskIDCleared() || m.clearedtask
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *ModelingMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *ModelingMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// AddModelingDetailIDs adds the "modeling_details" edge to the ModelingDetails entity by ids.
func (m *ModelingMutation) AddModelingDetailIDs(ids ...int) {
	if m.modeling_details == nil {
		m.modeling_details = make(map[int]struct{})
	}
	for i := range ids {
		m.modeling_details[ids[i]] = struct{}{}
	}
}

// ClearModelingDetails clears the "modeling_details" edge to the ModelingDetails entity.
func (m *ModelingMutation) ClearModelingDetails() {
	m.clearedmodeling_details = true
}

// ModelingDetailsCleared reports if the "modeling_details" edge to the ModelingDetails entity was cleared.
func (m *ModelingMutation) ModelingDetailsCleared() bool {
	return m.clearedmodeling_details
}

// RemoveModelingDetailIDs removes the "modeling_details" edge to the ModelingDetails entity by IDs.
func (m *ModelingMutation) RemoveModelingDetailIDs(ids ...int) {
	if m.removedmodeling_details == nil {
		m.removedmodeling_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.modeling_details, ids[i])
		m.removedmodeling_details[ids[i]] = struct{}{}
	}
}

// RemovedModelingDetails returns the removed IDs of the "modeling_details" edge to the ModelingDetails entity.
func (m *ModelingMutation) RemovedModelingDetailsIDs() (ids []int) {
	for id := range m.removedmodeling_details {
		ids = append(ids, id)
	}
	return
}

// ModelingDetailsIDs returns the "modeling_details" edge IDs in the mutation.
func (m *ModelingMutation) ModelingDetailsIDs() (ids []int) {
	for id := range m.modeling_details {
		ids = append(ids, id)
	}
	return
}

// ResetModelingDetails resets all changes to the "modeling_details" edge.
func (m *ModelingMutation) ResetModelingDetails() {
	m.modeling_details = nil
	m.clearedmodeling_details = false
	m.removedmodeling_details = nil
}

// AddModelingModelIDs adds the "modeling_models" edge to the ModelingModels entity by ids.
func (m *ModelingMutation) AddModelingModelIDs(ids ...int) {
	if m.modeling_models == nil {
		m.modeling_models = make(map[int]struct{})
	}
	for i := range ids {
		m.modeling_models[ids[i]] = struct{}{}
	}
}

// ClearModelingModels clears the "modeling_models" edge to the ModelingModels entity.
func (m *ModelingMutation) ClearModelingModels() {
	m.clearedmodeling_models = true
}

// ModelingModelsCleared reports if the "modeling_models" edge to the ModelingModels entity was cleared.
func (m *ModelingMutation) ModelingModelsCleared() bool {
	return m.clearedmodeling_models
}

// RemoveModelingModelIDs removes the "modeling_models" edge to the ModelingModels entity by IDs.
func (m *ModelingMutation) RemoveModelingModelIDs(ids ...int) {
	if m.removedmodeling_models == nil {
		m.removedmodeling_models = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.modeling_models, ids[i])
		m.removedmodeling_models[ids[i]] = struct{}{}
	}
}

// RemovedModelingModels returns the removed IDs of the "modeling_models" edge to the ModelingModels entity.
func (m *ModelingMutation) RemovedModelingModelsIDs() (ids []int) {
	for id := range m.removedmodeling_models {
		ids = append(ids, id)
	}
	return
}

// ModelingModelsIDs returns the "modeling_models" edge IDs in the mutation.
func (m *ModelingMutation) ModelingModelsIDs() (ids []int) {
	for id := range m.modeling_models {
		ids = append(ids, id)
	}
	return
}

// ResetModelingModels resets all changes to the "modeling_models" edge.
func (m *ModelingMutation) ResetModelingModels() {
	m.modeling_models = nil
	m.clearedmodeling_models = false
	m.removedmodeling_models = nil
}

// AddTrialIDs adds the "trials" edge to the Trial entity by ids.
func (m *ModelingMutation) AddTrialIDs(ids ...int) {
	if m.trials == nil {
		m.trials = make(map[int]struct{})
	}
	for i := range ids {
		m.trials[ids[i]] = struct{}{}
	}
}

// ClearTrials clears the "trials" edge to the Trial entity.
func (m *ModelingMutation) ClearTrials() {
	m.clearedtrials = true
}

// TrialsCleared reports if the "trials" edge to the Trial entity was cleared.
func (m *ModelingMutation) TrialsCleared() bool {
	return m.clearedtrials
}

// RemoveTrialIDs removes the "trials" edge to the Trial entity by IDs.
func (m *ModelingMutation) RemoveTrialIDs(ids ...int) {
	if m.removedtrials == nil {
		m.removedtrials = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trials, ids[i])
		m.removedtrials[ids[i]] = struct{}{}
	}
}

// RemovedTrials returns the removed IDs of the "trials" edge to the Trial entity.
func (m *ModelingMutation) RemovedTrialsIDs() (ids []int) {
	for id := range m.removedtrials {
		ids = append(ids, id)
	}
	return
}

// TrialsIDs returns the "trials" edge IDs in the mutation.
func (m *ModelingMutation) TrialsIDs() (ids []int) {
	for id := range m.trials {
		ids = append(ids, id)
	}
	return
}

// ResetTrials resets all changes to the "trials" edge.
func (m *ModelingMutation) ResetTrials() {
	m.trials = nil
	m.clearedtrials = false
	m.removedtrials = nil
}

// Where appends a list predicates to the ModelingMutation builder.
func (m *ModelingMutation) Where(ps ...predicate.Modeling) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ModelingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ModelingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Modeling, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ModelingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ModelingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Modeling).
func (m *ModelingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModelingMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.local_id != nil {
		fields = append(fields, modeling.FieldLocalID)
	}
	if m.task != nil {
		fields = append(fields, modeling.FieldTaskID)
	}
	if m.parent_id != nil {
		fields = append(fields, modeling.FieldParentID)
	}
	if m.parent_local_id != nil {
		fields = append(fields, modeling.FieldParentLocalID)
	}
	if m.dataset_id != nil {
		fields = append(fields, modeling.FieldDatasetID)
	}
	if m.params != nil {
		fields = append(fields, modeling.FieldParams)
	}
	if m.dataset_stat != nil {
		fields = append(fields, modeling.FieldDatasetStat)
	}
	if m.modeling_type != nil {
		fields = append(fields, modeling.FieldModelingType)
	}
	if m.modeling_step != nil {
		fields = append(fields, modeling.FieldModelingStep)
	}
	if m.performance != nil {
		fields = append(fields, modeling.FieldPerformance)
	}
	if m.progress != nil {
		fields = append(fields, modeling.FieldProgress)
	}
	if m.created_at != nil {
		fields = append(fields, modeling.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, modeling.FieldUpdatedAt)
	}
	if m.started_at != nil {
		fields = append(fields, modeling.FieldStartedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModelingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case modeling.FieldLocalID:
		return m.LocalID()
	case modeling.FieldTaskID:
		return m.TaskID()
	case modeling.FieldParentID:
		return m.ParentID()
	case modeling.FieldParentLocalID:
		return m.ParentLocalID()
	case modeling.FieldDatasetID:
		return m.DatasetID()
	case modeling.FieldParams:
		return m.Params()
	case modeling.FieldDatasetStat:
		return m.DatasetStat()
	case modeling.FieldModelingType:
		return m.ModelingType()
	case modeling.FieldModelingStep:
		return m.ModelingStep()
	case modeling.FieldPerformance:
		return m.Performance()
	case modeling.FieldProgress:
		return m.Progress()
	case modeling.FieldCreatedAt:
		return m.CreatedAt()
	case modeling.FieldUpdatedAt:
		return m.UpdatedAt()
	case modeling.FieldStartedAt:
		return m.StartedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModelingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case modeling.FieldLocalID:
		return m.OldLocalID(ctx)
	case modeling.FieldTaskID:
		return m.OldTaskID(ctx)
	case modeling.FieldParentID:
		return m.OldParentID(ctx)
	case modeling.FieldParentLocalID:
		return m.OldParentLocalID(ctx)
	case modeling.FieldDatasetID:
		return m.OldDatasetID(ctx)
	case modeling.FieldParams:
		return m.OldParams(ctx)
	case modeling.FieldDatasetStat:
		return m.OldDatasetStat(ctx)
	case modeling.FieldModelingType:
		return m.OldModelingType(ctx)
	case modeling.FieldModelingStep:
		return m.OldModelingStep(ctx)
	case modeling.FieldPerformance:
		return m.OldPerformance(ctx)
	case modeling.FieldProgress:
		return m.OldProgress(ctx)
	case modeling.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case modeling.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case modeling.FieldStartedAt:
		return m.OldStartedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Modeling field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case modeling.FieldLocalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalID(v)
		return nil
	case modeling.FieldTaskID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case modeling.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case modeling.FieldParentLocalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentLocalID(v)
		return nil
	case modeling.FieldDatasetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetID(v)
		return nil
	case modeling.FieldParams:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case modeling.FieldDatasetStat:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetStat(v)
		return nil
	case modeling.FieldModelingType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingType(v)
		return nil
	case modeling.FieldModelingStep:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingStep(v)
		return nil
	case modeling.FieldPerformance:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPerformance(v)
		return nil
	case modeling.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	case modeling.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case modeling.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case modeling.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Modeling field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModelingMutation) AddedFields() []string {
	var fields []string
	if m.addlocal_id != nil {
		fields = append(fields, modeling.FieldLocalID)
	}
	if m.addparent_id != nil {
		fields = append(fields, modeling.FieldParentID)
	}
	if m.addparent_local_id != nil {
		fields = append(fields, modeling.FieldParentLocalID)
	}
	if m.adddataset_id != nil {
		fields = append(fields, modeling.FieldDatasetID)
	}
	if m.addprogress != nil {
		fields = append(fields, modeling.FieldProgress)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModelingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case modeling.FieldLocalID:
		return m.AddedLocalID()
	case modeling.FieldParentID:
		return m.AddedParentID()
	case modeling.FieldParentLocalID:
		return m.AddedParentLocalID()
	case modeling.FieldDatasetID:
		return m.AddedDatasetID()
	case modeling.FieldProgress:
		return m.AddedProgress()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case modeling.FieldLocalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLocalID(v)
		return nil
	case modeling.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentID(v)
		return nil
	case modeling.FieldParentLocalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentLocalID(v)
		return nil
	case modeling.FieldDatasetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDatasetID(v)
		return nil
	case modeling.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	}
	return fmt.Errorf("unknown Modeling numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModelingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(modeling.FieldTaskID) {
		fields = append(fields, modeling.FieldTaskID)
	}
	if m.FieldCleared(modeling.FieldParentID) {
		fields = append(fields, modeling.FieldParentID)
	}
	if m.FieldCleared(modeling.FieldParentLocalID) {
		fields = append(fields, modeling.FieldParentLocalID)
	}
	if m.FieldCleared(modeling.FieldDatasetID) {
		fields = append(fields, modeling.FieldDatasetID)
	}
	if m.FieldCleared(modeling.FieldStartedAt) {
		fields = append(fields, modeling.FieldStartedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModelingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModelingMutation) ClearField(name string) error {
	switch name {
	case modeling.FieldTaskID:
		m.ClearTaskID()
		return nil
	case modeling.FieldParentID:
		m.ClearParentID()
		return nil
	case modeling.FieldParentLocalID:
		m.ClearParentLocalID()
		return nil
	case modeling.FieldDatasetID:
		m.ClearDatasetID()
		return nil
	case modeling.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	}
	return fmt.Errorf("unknown Modeling nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModelingMutation) ResetField(name string) error {
	switch name {
	case modeling.FieldLocalID:
		m.ResetLocalID()
		return nil
	case modeling.FieldTaskID:
		m.ResetTaskID()
		return nil
	case modeling.FieldParentID:
		m.ResetParentID()
		return nil
	case modeling.FieldParentLocalID:
		m.ResetParentLocalID()
		return nil
	case modeling.FieldDatasetID:
		m.ResetDatasetID()
		return nil
	case modeling.FieldParams:
		m.ResetParams()
		return nil
	case modeling.FieldDatasetStat:
		m.ResetDatasetStat()
		return nil
	case modeling.FieldModelingType:
		m.ResetModelingType()
		return nil
	case modeling.FieldModelingStep:
		m.ResetModelingStep()
		return nil
	case modeling.FieldPerformance:
		m.ResetPerformance()
		return nil
	case modeling.FieldProgress:
		m.ResetProgress()
		return nil
	case modeling.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case modeling.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case modeling.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	}
	return fmt.Errorf("unknown Modeling field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModelingMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.task != nil {
		edges = append(edges, modeling.EdgeTask)
	}
	if m.modeling_details != nil {
		edges = append(edges, modeling.EdgeModelingDetails)
	}
	if m.modeling_models != nil {
		edges = append(edges, modeling.EdgeModelingModels)
	}
	if m.trials != nil {
		edges = append(edges, modeling.EdgeTrials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModelingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case modeling.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case modeling.EdgeModelingDetails:
		ids := make([]ent.Value, 0, len(m.modeling_details))
		for id := range m.modeling_details {
			ids = append(ids, id)
		}
		return ids
	case modeling.EdgeModelingModels:
		ids := make([]ent.Value, 0, len(m.modeling_models))
		for id := range m.modeling_models {
			ids = append(ids, id)
		}
		return ids
	case modeling.EdgeTrials:
		ids := make([]ent.Value, 0, len(m.trials))
		for id := range m.trials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModelingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmodeling_details != nil {
		edges = append(edges, modeling.EdgeModelingDetails)
	}
	if m.removedmodeling_models != nil {
		edges = append(edges, modeling.EdgeModelingModels)
	}
	if m.removedtrials != nil {
		edges = append(edges, modeling.EdgeTrials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModelingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case modeling.EdgeModelingDetails:
		ids := make([]ent.Value, 0, len(m.removedmodeling_details))
		for id := range m.removedmodeling_details {
			ids = append(ids, id)
		}
		return ids
	case modeling.EdgeModelingModels:
		ids := make([]ent.Value, 0, len(m.removedmodeling_models))
		for id := range m.removedmodeling_models {
			ids = append(ids, id)
		}
		return ids
	case modeling.EdgeTrials:
		ids := make([]ent.Value, 0, len(m.removedtrials))
		for id := range m.removedtrials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModelingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtask {
		edges = append(edges, modeling.EdgeTask)
	}
	if m.clearedmodeling_details {
		edges = append(edges, modeling.EdgeModelingDetails)
	}
	if m.clearedmodeling_models {
		edges = append(edges, modeling.EdgeModelingModels)
	}
	if m.clearedtrials {
		edges = append(edges, modeling.EdgeTrials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModelingMutation) EdgeCleared(name string) bool {
	switch name {
	case modeling.EdgeTask:
		return m.clearedtask
	case modeling.EdgeModelingDetails:
		return m.clearedmodeling_details
	case modeling.EdgeModelingModels:
		return m.clearedmodeling_models
	case modeling.EdgeTrials:
		return m.clearedtrials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModelingMutation) ClearEdge(name string) error {
	switch name {
	case modeling.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown Modeling unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModelingMutation) ResetEdge(name string) error {
	switch name {
	case modeling.EdgeTask:
		m.ResetTask()
		return nil
	case modeling.EdgeModelingDetails:
		m.ResetModelingDetails()
		return nil
	case modeling.EdgeModelingModels:
		m.ResetModelingModels()
		return nil
	case modeling.EdgeTrials:
		m.ResetTrials()
		return nil
	}
	return fmt.Errorf("unknown Modeling edge %s", name)
}

// ModelingDetailsMutation represents an operation that mutates the ModelingDetails nodes in the graph.
type ModelingDetailsMutation struct {
	config
	op              Op
	typ             string
	id              *int
	model           *string
	data_type       *string
	data            *[]string
	appenddata      []string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	modeling        *int
	clearedmodeling bool
	done            bool
	oldValue        func(context.Context) (*ModelingDetails, error)
	predicates      []predicate.ModelingDetails
}

var _ ent.Mutation = (*ModelingDetailsMutation)(nil)

// modelingdetailsOption allows management of the mutation configuration using functional options.
type modelingdetailsOption func(*ModelingDetailsMutation)

// newModelingDetailsMutation creates new mutation for the ModelingDetails entity.
func newModelingDetailsMutation(c config, op Op, opts ...modelingdetailsOption) *ModelingDetailsMutation {
	m := &ModelingDetailsMutation{
		config:        c,
		op:            op,
		typ:           TypeModelingDetails,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModelingDetailsID sets the ID field of the mutation.
func withModelingDetailsID(id int) modelingdetailsOption {
	return func(m *ModelingDetailsMutation) {
		var (
			err   error
			once  sync.Once
			value *ModelingDetails
		)
		m.oldValue = func(ctx context.Context) (*ModelingDetails, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ModelingDetails.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModelingDetails sets the old ModelingDetails of the mutation.
func withModelingDetails(node *ModelingDetails) modelingdetailsOption {
	return func(m *ModelingDetailsMutation) {
		m.oldValue = func(context.Context) (*ModelingDetails, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModelingDetailsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModelingDetailsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ModelingDetails entities.
func (m *ModelingDetailsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ModelingDetailsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ModelingDetailsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ModelingDetails.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModelingID sets the "modeling_id" field.
func (m *ModelingDetailsMutation) SetModelingID(i int) {
	m.modeling = &i
}

// ModelingID returns the value of the "modeling_id" field in the mutation.
func (m *ModelingDetailsMutation) ModelingID() (r int, exists bool) {
	v := m.modeling
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingID returns the old "modeling_id" field's value of the ModelingDetails entity.
// If the ModelingDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingDetailsMutation) OldModelingID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingID: %w", err)
	}
	return oldValue.ModelingID, nil
}

// ClearModelingID clears the value of the "modeling_id" field.
func (m *ModelingDetailsMutation) ClearModelingID() {
	m.modeling = nil
	m.clearedFields[modelingdetails.FieldModelingID] = struct{}{}
}

// ModelingIDCleared returns if the "modeling_id" field was cleared in this mutation.
func (m *ModelingDetailsMutation) ModelingIDCleared() bool {
	_, ok := m.clearedFields[modelingdetails.FieldModelingID]
	return ok
}

// ResetModelingID resets all changes to the "modeling_id" field.
func (m *ModelingDetailsMutation) ResetModelingID() {
	m.modeling = nil
	delete(m.clearedFields, modelingdetails.FieldModelingID)
}

// SetModel sets the "model" field.
func (m *ModelingDetailsMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *ModelingDetailsMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the ModelingDetails entity.
// If the ModelingDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingDetailsMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *ModelingDetailsMutation) ResetModel() {
	m.model = nil
}

// SetDataType sets the "data_type" field.
func (m *ModelingDetailsMutation) SetDataType(s string) {
	m.data_type = &s
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *ModelingDetailsMutation) DataType() (r string, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the ModelingDetails entity.
// If the ModelingDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingDetailsMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *ModelingDetailsMutation) ResetDataType() {
	m.data_type = nil
}

// SetData sets the "data" field.
func (m *ModelingDetailsMutation) SetData(s []string) {
	m.data = &s
	m.appenddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *ModelingDetailsMutation) Data() (r []string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the ModelingDetails entity.
// If the ModelingDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingDetailsMutation) OldData(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AppendData adds s to the "data" field.
func (m *ModelingDetailsMutation) AppendData(s []string) {
	m.appenddata = append(m.appenddata, s...)
}

// AppendedData returns the list of values that were appended to the "data" field in this mutation.
func (m *ModelingDetailsMutation) AppendedData() ([]string, bool) {
	if len(m.appenddata) == 0 {
		return nil, false
	}
	return m.appenddata, true
}

// ResetData resets all changes to the "data" field.
func (m *ModelingDetailsMutation) ResetData() {
	m.data = nil
	m.appenddata = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ModelingDetailsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ModelingDetailsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ModelingDetails entity.
// If the ModelingDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingDetailsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ModelingDetailsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (m *ModelingDetailsMutation) ClearModeling() {
	m.clearedmodeling = true
	m.clearedFields[modelingdetails.FieldModelingID] = struct{}{}
}

// ModelingCleared reports if the "modeling" edge to the Modeling entity was cleared.
func (m *ModelingDetailsMutation) ModelingCleared() bool {
	return m.ModelingIDCleared() || m.clearedmodeling
}

// ModelingIDs returns the "modeling" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ModelingID instead. It exists only for internal usage by the builders.
func (m *ModelingDetailsMutation) ModelingIDs() (ids []int) {
	if id := m.modeling; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetModeling resets all changes to the "modeling" edge.
func (m *ModelingDetailsMutation) ResetModeling() {
	m.modeling = nil
	m.clearedmodeling = false
}

// Where appends a list predicates to the ModelingDetailsMutation builder.
func (m *ModelingDetailsMutation) Where(ps ...predicate.ModelingDetails) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ModelingDetailsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ModelingDetailsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ModelingDetails, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ModelingDetailsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ModelingDetailsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ModelingDetails).
func (m *ModelingDetailsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModelingDetailsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.modeling != nil {
		fields = append(fields, modelingdetails.FieldModelingID)
	}
	if m.model != nil {
		fields = append(fields, modelingdetails.FieldModel)
	}
	if m.data_type != nil {
		fields = append(fields, modelingdetails.FieldDataType)
	}
	if m.data != nil {
		fields = append(fields, modelingdetails.FieldData)
	}
	if m.created_at != nil {
		fields = append(fields, modelingdetails.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModelingDetailsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case modelingdetails.FieldModelingID:
		return m.ModelingID()
	case modelingdetails.FieldModel:
		return m.Model()
	case modelingdetails.FieldDataType:
		return m.DataType()
	case modelingdetails.FieldData:
		return m.Data()
	case modelingdetails.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModelingDetailsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case modelingdetails.FieldModelingID:
		return m.OldModelingID(ctx)
	case modelingdetails.FieldModel:
		return m.OldModel(ctx)
	case modelingdetails.FieldDataType:
		return m.OldDataType(ctx)
	case modelingdetails.FieldData:
		return m.OldData(ctx)
	case modelingdetails.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ModelingDetails field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingDetailsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case modelingdetails.FieldModelingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingID(v)
		return nil
	case modelingdetails.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case modelingdetails.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case modelingdetails.FieldData:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case modelingdetails.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ModelingDetails field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModelingDetailsMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModelingDetailsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingDetailsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ModelingDetails numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModelingDetailsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(modelingdetails.FieldModelingID) {
		fields = append(fields, modelingdetails.FieldModelingID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModelingDetailsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModelingDetailsMutation) ClearField(name string) error {
	switch name {
	case modelingdetails.FieldModelingID:
		m.ClearModelingID()
		return nil
	}
	return fmt.Errorf("unknown ModelingDetails nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModelingDetailsMutation) ResetField(name string) error {
	switch name {
	case modelingdetails.FieldModelingID:
		m.ResetModelingID()
		return nil
	case modelingdetails.FieldModel:
		m.ResetModel()
		return nil
	case modelingdetails.FieldDataType:
		m.ResetDataType()
		return nil
	case modelingdetails.FieldData:
		m.ResetData()
		return nil
	case modelingdetails.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ModelingDetails field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModelingDetailsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.modeling != nil {
		edges = append(edges, modelingdetails.EdgeModeling)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModelingDetailsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case modelingdetails.EdgeModeling:
		if id := m.modeling; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModelingDetailsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModelingDetailsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModelingDetailsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmodeling {
		edges = append(edges, modelingdetails.EdgeModeling)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModelingDetailsMutation) EdgeCleared(name string) bool {
	switch name {
	case modelingdetails.EdgeModeling:
		return m.clearedmodeling
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModelingDetailsMutation) ClearEdge(name string) error {
	switch name {
	case modelingdetails.EdgeModeling:
		m.ClearModeling()
		return nil
	}
	return fmt.Errorf("unknown ModelingDetails unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModelingDetailsMutation) ResetEdge(name string) error {
	switch name {
	case modelingdetails.EdgeModeling:
		m.ResetModeling()
		return nil
	}
	return fmt.Errorf("unknown ModelingDetails edge %s", name)
}

// ModelingModelsMutation represents an operation that mutates the ModelingModels nodes in the graph.
type ModelingModelsMutation struct {
	config
	op              Op
	typ             string
	id              *int
	data_type       *string
	data            *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	modeling        *int
	clearedmodeling bool
	done            bool
	oldValue        func(context.Context) (*ModelingModels, error)
	predicates      []predicate.ModelingModels
}

var _ ent.Mutation = (*ModelingModelsMutation)(nil)

// modelingmodelsOption allows management of the mutation configuration using functional options.
type modelingmodelsOption func(*ModelingModelsMutation)

// newModelingModelsMutation creates new mutation for the ModelingModels entity.
func newModelingModelsMutation(c config, op Op, opts ...modelingmodelsOption) *ModelingModelsMutation {
	m := &ModelingModelsMutation{
		config:        c,
		op:            op,
		typ:           TypeModelingModels,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModelingModelsID sets the ID field of the mutation.
func withModelingModelsID(id int) modelingmodelsOption {
	return func(m *ModelingModelsMutation) {
		var (
			err   error
			once  sync.Once
			value *ModelingModels
		)
		m.oldValue = func(ctx context.Context) (*ModelingModels, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ModelingModels.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModelingModels sets the old ModelingModels of the mutation.
func withModelingModels(node *ModelingModels) modelingmodelsOption {
	return func(m *ModelingModelsMutation) {
		m.oldValue = func(context.Context) (*ModelingModels, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModelingModelsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModelingModelsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ModelingModels entities.
func (m *ModelingModelsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ModelingModelsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ModelingModelsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ModelingModels.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModelingID sets the "modeling_id" field.
func (m *ModelingModelsMutation) SetModelingID(i int) {
	m.modeling = &i
}

// ModelingID returns the value of the "modeling_id" field in the mutation.
func (m *ModelingModelsMutation) ModelingID() (r int, exists bool) {
	v := m.modeling
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingID returns the old "modeling_id" field's value of the ModelingModels entity.
// If the ModelingModels object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingModelsMutation) OldModelingID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingID: %w", err)
	}
	return oldValue.ModelingID, nil
}

// ClearModelingID clears the value of the "modeling_id" field.
func (m *ModelingModelsMutation) ClearModelingID() {
	m.modeling = nil
	m.clearedFields[modelingmodels.FieldModelingID] = struct{}{}
}

// ModelingIDCleared returns if the "modeling_id" field was cleared in this mutation.
func (m *ModelingModelsMutation) ModelingIDCleared() bool {
	_, ok := m.clearedFields[modelingmodels.FieldModelingID]
	return ok
}

// ResetModelingID resets all changes to the "modeling_id" field.
func (m *ModelingModelsMutation) ResetModelingID() {
	m.modeling = nil
	delete(m.clearedFields, modelingmodels.FieldModelingID)
}

// SetDataType sets the "data_type" field.
func (m *ModelingModelsMutation) SetDataType(s string) {
	m.data_type = &s
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *ModelingModelsMutation) DataType() (r string, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the ModelingModels entity.
// If the ModelingModels object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingModelsMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *ModelingModelsMutation) ResetDataType() {
	m.data_type = nil
}

// SetData sets the "data" field.
func (m *ModelingModelsMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *ModelingModelsMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the ModelingModels entity.
// If the ModelingModels object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingModelsMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *ModelingModelsMutation) ResetData() {
	m.data = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ModelingModelsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ModelingModelsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ModelingModels entity.
// If the ModelingModels object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModelingModelsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ModelingModelsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (m *ModelingModelsMutation) ClearModeling() {
	m.clearedmodeling = true
	m.clearedFields[modelingmodels.FieldModelingID] = struct{}{}
}

// ModelingCleared reports if the "modeling" edge to the Modeling entity was cleared.
func (m *ModelingModelsMutation) ModelingCleared() bool {
	return m.ModelingIDCleared() || m.clearedmodeling
}

// ModelingIDs returns the "modeling" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ModelingID instead. It exists only for internal usage by the builders.
func (m *ModelingModelsMutation) ModelingIDs() (ids []int) {
	if id := m.modeling; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetModeling resets all changes to the "modeling" edge.
func (m *ModelingModelsMutation) ResetModeling() {
	m.modeling = nil
	m.clearedmodeling = false
}

// Where appends a list predicates to the ModelingModelsMutation builder.
func (m *ModelingModelsMutation) Where(ps ...predicate.ModelingModels) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ModelingModelsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ModelingModelsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ModelingModels, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ModelingModelsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ModelingModelsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ModelingModels).
func (m *ModelingModelsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModelingModelsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.modeling != nil {
		fields = append(fields, modelingmodels.FieldModelingID)
	}
	if m.data_type != nil {
		fields = append(fields, modelingmodels.FieldDataType)
	}
	if m.data != nil {
		fields = append(fields, modelingmodels.FieldData)
	}
	if m.created_at != nil {
		fields = append(fields, modelingmodels.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModelingModelsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case modelingmodels.FieldModelingID:
		return m.ModelingID()
	case modelingmodels.FieldDataType:
		return m.DataType()
	case modelingmodels.FieldData:
		return m.Data()
	case modelingmodels.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModelingModelsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case modelingmodels.FieldModelingID:
		return m.OldModelingID(ctx)
	case modelingmodels.FieldDataType:
		return m.OldDataType(ctx)
	case modelingmodels.FieldData:
		return m.OldData(ctx)
	case modelingmodels.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ModelingModels field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingModelsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case modelingmodels.FieldModelingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingID(v)
		return nil
	case modelingmodels.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case modelingmodels.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case modelingmodels.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ModelingModels field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModelingModelsMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModelingModelsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModelingModelsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ModelingModels numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModelingModelsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(modelingmodels.FieldModelingID) {
		fields = append(fields, modelingmodels.FieldModelingID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModelingModelsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModelingModelsMutation) ClearField(name string) error {
	switch name {
	case modelingmodels.FieldModelingID:
		m.ClearModelingID()
		return nil
	}
	return fmt.Errorf("unknown ModelingModels nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModelingModelsMutation) ResetField(name string) error {
	switch name {
	case modelingmodels.FieldModelingID:
		m.ResetModelingID()
		return nil
	case modelingmodels.FieldDataType:
		m.ResetDataType()
		return nil
	case modelingmodels.FieldData:
		m.ResetData()
		return nil
	case modelingmodels.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ModelingModels field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModelingModelsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.modeling != nil {
		edges = append(edges, modelingmodels.EdgeModeling)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModelingModelsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case modelingmodels.EdgeModeling:
		if id := m.modeling; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModelingModelsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModelingModelsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModelingModelsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmodeling {
		edges = append(edges, modelingmodels.EdgeModeling)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModelingModelsMutation) EdgeCleared(name string) bool {
	switch name {
	case modelingmodels.EdgeModeling:
		return m.clearedmodeling
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModelingModelsMutation) ClearEdge(name string) error {
	switch name {
	case modelingmodels.EdgeModeling:
		m.ClearModeling()
		return nil
	}
	return fmt.Errorf("unknown ModelingModels unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModelingModelsMutation) ResetEdge(name string) error {
	switch name {
	case modelingmodels.EdgeModeling:
		m.ResetModeling()
		return nil
	}
	return fmt.Errorf("unknown ModelingModels edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	title               *string
	description         *string
	is_use              *bool
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	tasks               map[int]struct{}
	removedtasks        map[int]struct{}
	clearedtasks        bool
	user_project        map[int]struct{}
	removeduser_project map[int]struct{}
	cleareduser_project bool
	done                bool
	oldValue            func(context.Context) (*Project, error)
	predicates          []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ProjectMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProjectMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProjectMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetIsUse sets the "is_use" field.
func (m *ProjectMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *ProjectMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *ProjectMutation) ResetIsUse() {
	m.is_use = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ProjectMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[project.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ProjectMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[project.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, project.FieldUpdatedAt)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *ProjectMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *ProjectMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *ProjectMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *ProjectMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *ProjectMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *ProjectMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *ProjectMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// AddUserProjectIDs adds the "user_project" edge to the UserProject entity by ids.
func (m *ProjectMutation) AddUserProjectIDs(ids ...int) {
	if m.user_project == nil {
		m.user_project = make(map[int]struct{})
	}
	for i := range ids {
		m.user_project[ids[i]] = struct{}{}
	}
}

// ClearUserProject clears the "user_project" edge to the UserProject entity.
func (m *ProjectMutation) ClearUserProject() {
	m.cleareduser_project = true
}

// UserProjectCleared reports if the "user_project" edge to the UserProject entity was cleared.
func (m *ProjectMutation) UserProjectCleared() bool {
	return m.cleareduser_project
}

// RemoveUserProjectIDs removes the "user_project" edge to the UserProject entity by IDs.
func (m *ProjectMutation) RemoveUserProjectIDs(ids ...int) {
	if m.removeduser_project == nil {
		m.removeduser_project = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_project, ids[i])
		m.removeduser_project[ids[i]] = struct{}{}
	}
}

// RemovedUserProject returns the removed IDs of the "user_project" edge to the UserProject entity.
func (m *ProjectMutation) RemovedUserProjectIDs() (ids []int) {
	for id := range m.removeduser_project {
		ids = append(ids, id)
	}
	return
}

// UserProjectIDs returns the "user_project" edge IDs in the mutation.
func (m *ProjectMutation) UserProjectIDs() (ids []int) {
	for id := range m.user_project {
		ids = append(ids, id)
	}
	return
}

// ResetUserProject resets all changes to the "user_project" edge.
func (m *ProjectMutation) ResetUserProject() {
	m.user_project = nil
	m.cleareduser_project = false
	m.removeduser_project = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, project.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.is_use != nil {
		fields = append(fields, project.FieldIsUse)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldTitle:
		return m.Title()
	case project.FieldDescription:
		return m.Description()
	case project.FieldIsUse:
		return m.IsUse()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldTitle:
		return m.OldTitle(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldIsUse:
		return m.OldIsUse(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	if m.FieldCleared(project.FieldUpdatedAt) {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	case project.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldTitle:
		m.ResetTitle()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldIsUse:
		m.ResetIsUse()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tasks != nil {
		edges = append(edges, project.EdgeTasks)
	}
	if m.user_project != nil {
		edges = append(edges, project.EdgeUserProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeUserProject:
		ids := make([]ent.Value, 0, len(m.user_project))
		for id := range m.user_project {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtasks != nil {
		edges = append(edges, project.EdgeTasks)
	}
	if m.removeduser_project != nil {
		edges = append(edges, project.EdgeUserProject)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeUserProject:
		ids := make([]ent.Value, 0, len(m.removeduser_project))
		for id := range m.removeduser_project {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtasks {
		edges = append(edges, project.EdgeTasks)
	}
	if m.cleareduser_project {
		edges = append(edges, project.EdgeUserProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeTasks:
		return m.clearedtasks
	case project.EdgeUserProject:
		return m.cleareduser_project
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeTasks:
		m.ResetTasks()
		return nil
	case project.EdgeUserProject:
		m.ResetUserProject()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op               Op
	typ              string
	id               *int
	dataset_id       *int
	adddataset_id    *int
	title            *string
	description      *string
	engine_type      *string
	target_metric    *string
	params           *[]string
	appendparams     []string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	project          *int
	clearedproject   bool
	modelings        map[int]struct{}
	removedmodelings map[int]struct{}
	clearedmodelings bool
	done             bool
	oldValue         func(context.Context) (*Task, error)
	predicates       []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProjectID sets the "project_id" field.
func (m *TaskMutation) SetProjectID(i int) {
	m.project = &i
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *TaskMutation) ProjectID() (r int, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldProjectID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ClearProjectID clears the value of the "project_id" field.
func (m *TaskMutation) ClearProjectID() {
	m.project = nil
	m.clearedFields[task.FieldProjectID] = struct{}{}
}

// ProjectIDCleared returns if the "project_id" field was cleared in this mutation.
func (m *TaskMutation) ProjectIDCleared() bool {
	_, ok := m.clearedFields[task.FieldProjectID]
	return ok
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *TaskMutation) ResetProjectID() {
	m.project = nil
	delete(m.clearedFields, task.FieldProjectID)
}

// SetDatasetID sets the "dataset_id" field.
func (m *TaskMutation) SetDatasetID(i int) {
	m.dataset_id = &i
	m.adddataset_id = nil
}

// DatasetID returns the value of the "dataset_id" field in the mutation.
func (m *TaskMutation) DatasetID() (r int, exists bool) {
	v := m.dataset_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetID returns the old "dataset_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDatasetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetID: %w", err)
	}
	return oldValue.DatasetID, nil
}

// AddDatasetID adds i to the "dataset_id" field.
func (m *TaskMutation) AddDatasetID(i int) {
	if m.adddataset_id != nil {
		*m.adddataset_id += i
	} else {
		m.adddataset_id = &i
	}
}

// AddedDatasetID returns the value that was added to the "dataset_id" field in this mutation.
func (m *TaskMutation) AddedDatasetID() (r int, exists bool) {
	v := m.adddataset_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDatasetID resets all changes to the "dataset_id" field.
func (m *TaskMutation) ResetDatasetID() {
	m.dataset_id = nil
	m.adddataset_id = nil
}

// SetTitle sets the "title" field.
func (m *TaskMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
}

// SetEngineType sets the "engine_type" field.
func (m *TaskMutation) SetEngineType(s string) {
	m.engine_type = &s
}

// EngineType returns the value of the "engine_type" field in the mutation.
func (m *TaskMutation) EngineType() (r string, exists bool) {
	v := m.engine_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEngineType returns the old "engine_type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldEngineType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngineType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngineType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngineType: %w", err)
	}
	return oldValue.EngineType, nil
}

// ResetEngineType resets all changes to the "engine_type" field.
func (m *TaskMutation) ResetEngineType() {
	m.engine_type = nil
}

// SetTargetMetric sets the "target_metric" field.
func (m *TaskMutation) SetTargetMetric(s string) {
	m.target_metric = &s
}

// TargetMetric returns the value of the "target_metric" field in the mutation.
func (m *TaskMutation) TargetMetric() (r string, exists bool) {
	v := m.target_metric
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetMetric returns the old "target_metric" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTargetMetric(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetMetric is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetMetric requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetMetric: %w", err)
	}
	return oldValue.TargetMetric, nil
}

// ResetTargetMetric resets all changes to the "target_metric" field.
func (m *TaskMutation) ResetTargetMetric() {
	m.target_metric = nil
}

// SetParams sets the "params" field.
func (m *TaskMutation) SetParams(s []string) {
	m.params = &s
	m.appendparams = nil
}

// Params returns the value of the "params" field in the mutation.
func (m *TaskMutation) Params() (r []string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldParams(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// AppendParams adds s to the "params" field.
func (m *TaskMutation) AppendParams(s []string) {
	m.appendparams = append(m.appendparams, s...)
}

// AppendedParams returns the list of values that were appended to the "params" field in this mutation.
func (m *TaskMutation) AppendedParams() ([]string, bool) {
	if len(m.appendparams) == 0 {
		return nil, false
	}
	return m.appendparams, true
}

// ResetParams resets all changes to the "params" field.
func (m *TaskMutation) ResetParams() {
	m.params = nil
	m.appendparams = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *TaskMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[task.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *TaskMutation) ProjectCleared() bool {
	return m.ProjectIDCleared() || m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *TaskMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddModelingIDs adds the "modelings" edge to the Modeling entity by ids.
func (m *TaskMutation) AddModelingIDs(ids ...int) {
	if m.modelings == nil {
		m.modelings = make(map[int]struct{})
	}
	for i := range ids {
		m.modelings[ids[i]] = struct{}{}
	}
}

// ClearModelings clears the "modelings" edge to the Modeling entity.
func (m *TaskMutation) ClearModelings() {
	m.clearedmodelings = true
}

// ModelingsCleared reports if the "modelings" edge to the Modeling entity was cleared.
func (m *TaskMutation) ModelingsCleared() bool {
	return m.clearedmodelings
}

// RemoveModelingIDs removes the "modelings" edge to the Modeling entity by IDs.
func (m *TaskMutation) RemoveModelingIDs(ids ...int) {
	if m.removedmodelings == nil {
		m.removedmodelings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.modelings, ids[i])
		m.removedmodelings[ids[i]] = struct{}{}
	}
}

// RemovedModelings returns the removed IDs of the "modelings" edge to the Modeling entity.
func (m *TaskMutation) RemovedModelingsIDs() (ids []int) {
	for id := range m.removedmodelings {
		ids = append(ids, id)
	}
	return
}

// ModelingsIDs returns the "modelings" edge IDs in the mutation.
func (m *TaskMutation) ModelingsIDs() (ids []int) {
	for id := range m.modelings {
		ids = append(ids, id)
	}
	return
}

// ResetModelings resets all changes to the "modelings" edge.
func (m *TaskMutation) ResetModelings() {
	m.modelings = nil
	m.clearedmodelings = false
	m.removedmodelings = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.project != nil {
		fields = append(fields, task.FieldProjectID)
	}
	if m.dataset_id != nil {
		fields = append(fields, task.FieldDatasetID)
	}
	if m.title != nil {
		fields = append(fields, task.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.engine_type != nil {
		fields = append(fields, task.FieldEngineType)
	}
	if m.target_metric != nil {
		fields = append(fields, task.FieldTargetMetric)
	}
	if m.params != nil {
		fields = append(fields, task.FieldParams)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldProjectID:
		return m.ProjectID()
	case task.FieldDatasetID:
		return m.DatasetID()
	case task.FieldTitle:
		return m.Title()
	case task.FieldDescription:
		return m.Description()
	case task.FieldEngineType:
		return m.EngineType()
	case task.FieldTargetMetric:
		return m.TargetMetric()
	case task.FieldParams:
		return m.Params()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldProjectID:
		return m.OldProjectID(ctx)
	case task.FieldDatasetID:
		return m.OldDatasetID(ctx)
	case task.FieldTitle:
		return m.OldTitle(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldEngineType:
		return m.OldEngineType(ctx)
	case task.FieldTargetMetric:
		return m.OldTargetMetric(ctx)
	case task.FieldParams:
		return m.OldParams(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldProjectID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case task.FieldDatasetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetID(v)
		return nil
	case task.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldEngineType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngineType(v)
		return nil
	case task.FieldTargetMetric:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetMetric(v)
		return nil
	case task.FieldParams:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.adddataset_id != nil {
		fields = append(fields, task.FieldDatasetID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldDatasetID:
		return m.AddedDatasetID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldDatasetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDatasetID(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldProjectID) {
		fields = append(fields, task.FieldProjectID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldProjectID:
		m.ClearProjectID()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldProjectID:
		m.ResetProjectID()
		return nil
	case task.FieldDatasetID:
		m.ResetDatasetID()
		return nil
	case task.FieldTitle:
		m.ResetTitle()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldEngineType:
		m.ResetEngineType()
		return nil
	case task.FieldTargetMetric:
		m.ResetTargetMetric()
		return nil
	case task.FieldParams:
		m.ResetParams()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, task.EdgeProject)
	}
	if m.modelings != nil {
		edges = append(edges, task.EdgeModelings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeModelings:
		ids := make([]ent.Value, 0, len(m.modelings))
		for id := range m.modelings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmodelings != nil {
		edges = append(edges, task.EdgeModelings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeModelings:
		ids := make([]ent.Value, 0, len(m.removedmodelings))
		for id := range m.removedmodelings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, task.EdgeProject)
	}
	if m.clearedmodelings {
		edges = append(edges, task.EdgeModelings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeProject:
		return m.clearedproject
	case task.EdgeModelings:
		return m.clearedmodelings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeProject:
		m.ResetProject()
		return nil
	case task.EdgeModelings:
		m.ResetModelings()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TrialMutation represents an operation that mutates the Trial nodes in the graph.
type TrialMutation struct {
	config
	op              Op
	typ             string
	id              *int
	uuid            *string
	state           *string
	save_path       *string
	target_metric   *string
	progress        *float64
	addprogress     *float64
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	modeling        *int
	clearedmodeling bool
	done            bool
	oldValue        func(context.Context) (*Trial, error)
	predicates      []predicate.Trial
}

var _ ent.Mutation = (*TrialMutation)(nil)

// trialOption allows management of the mutation configuration using functional options.
type trialOption func(*TrialMutation)

// newTrialMutation creates new mutation for the Trial entity.
func newTrialMutation(c config, op Op, opts ...trialOption) *TrialMutation {
	m := &TrialMutation{
		config:        c,
		op:            op,
		typ:           TypeTrial,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrialID sets the ID field of the mutation.
func withTrialID(id int) trialOption {
	return func(m *TrialMutation) {
		var (
			err   error
			once  sync.Once
			value *Trial
		)
		m.oldValue = func(ctx context.Context) (*Trial, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trial.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrial sets the old Trial of the mutation.
func withTrial(node *Trial) trialOption {
	return func(m *TrialMutation) {
		m.oldValue = func(context.Context) (*Trial, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Trial entities.
func (m *TrialMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrialMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrialMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trial.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModelingID sets the "modeling_id" field.
func (m *TrialMutation) SetModelingID(i int) {
	m.modeling = &i
}

// ModelingID returns the value of the "modeling_id" field in the mutation.
func (m *TrialMutation) ModelingID() (r int, exists bool) {
	v := m.modeling
	if v == nil {
		return
	}
	return *v, true
}

// OldModelingID returns the old "modeling_id" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldModelingID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelingID: %w", err)
	}
	return oldValue.ModelingID, nil
}

// ClearModelingID clears the value of the "modeling_id" field.
func (m *TrialMutation) ClearModelingID() {
	m.modeling = nil
	m.clearedFields[trial.FieldModelingID] = struct{}{}
}

// ModelingIDCleared returns if the "modeling_id" field was cleared in this mutation.
func (m *TrialMutation) ModelingIDCleared() bool {
	_, ok := m.clearedFields[trial.FieldModelingID]
	return ok
}

// ResetModelingID resets all changes to the "modeling_id" field.
func (m *TrialMutation) ResetModelingID() {
	m.modeling = nil
	delete(m.clearedFields, trial.FieldModelingID)
}

// SetUUID sets the "uuid" field.
func (m *TrialMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *TrialMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *TrialMutation) ResetUUID() {
	m.uuid = nil
}

// SetState sets the "state" field.
func (m *TrialMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TrialMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *TrialMutation) ResetState() {
	m.state = nil
}

// SetSavePath sets the "save_path" field.
func (m *TrialMutation) SetSavePath(s string) {
	m.save_path = &s
}

// SavePath returns the value of the "save_path" field in the mutation.
func (m *TrialMutation) SavePath() (r string, exists bool) {
	v := m.save_path
	if v == nil {
		return
	}
	return *v, true
}

// OldSavePath returns the old "save_path" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldSavePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSavePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSavePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSavePath: %w", err)
	}
	return oldValue.SavePath, nil
}

// ResetSavePath resets all changes to the "save_path" field.
func (m *TrialMutation) ResetSavePath() {
	m.save_path = nil
}

// SetTargetMetric sets the "target_metric" field.
func (m *TrialMutation) SetTargetMetric(s string) {
	m.target_metric = &s
}

// TargetMetric returns the value of the "target_metric" field in the mutation.
func (m *TrialMutation) TargetMetric() (r string, exists bool) {
	v := m.target_metric
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetMetric returns the old "target_metric" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldTargetMetric(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetMetric is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetMetric requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetMetric: %w", err)
	}
	return oldValue.TargetMetric, nil
}

// ResetTargetMetric resets all changes to the "target_metric" field.
func (m *TrialMutation) ResetTargetMetric() {
	m.target_metric = nil
}

// SetProgress sets the "progress" field.
func (m *TrialMutation) SetProgress(f float64) {
	m.progress = &f
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *TrialMutation) Progress() (r float64, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldProgress(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds f to the "progress" field.
func (m *TrialMutation) AddProgress(f float64) {
	if m.addprogress != nil {
		*m.addprogress += f
	} else {
		m.addprogress = &f
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *TrialMutation) AddedProgress() (r float64, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *TrialMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TrialMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrialMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrialMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TrialMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TrialMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Trial entity.
// If the Trial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *TrialMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[trial.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *TrialMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[trial.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TrialMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, trial.FieldUpdatedAt)
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (m *TrialMutation) ClearModeling() {
	m.clearedmodeling = true
	m.clearedFields[trial.FieldModelingID] = struct{}{}
}

// ModelingCleared reports if the "modeling" edge to the Modeling entity was cleared.
func (m *TrialMutation) ModelingCleared() bool {
	return m.ModelingIDCleared() || m.clearedmodeling
}

// ModelingIDs returns the "modeling" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ModelingID instead. It exists only for internal usage by the builders.
func (m *TrialMutation) ModelingIDs() (ids []int) {
	if id := m.modeling; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetModeling resets all changes to the "modeling" edge.
func (m *TrialMutation) ResetModeling() {
	m.modeling = nil
	m.clearedmodeling = false
}

// Where appends a list predicates to the TrialMutation builder.
func (m *TrialMutation) Where(ps ...predicate.Trial) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trial, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trial).
func (m *TrialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrialMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.modeling != nil {
		fields = append(fields, trial.FieldModelingID)
	}
	if m.uuid != nil {
		fields = append(fields, trial.FieldUUID)
	}
	if m.state != nil {
		fields = append(fields, trial.FieldState)
	}
	if m.save_path != nil {
		fields = append(fields, trial.FieldSavePath)
	}
	if m.target_metric != nil {
		fields = append(fields, trial.FieldTargetMetric)
	}
	if m.progress != nil {
		fields = append(fields, trial.FieldProgress)
	}
	if m.created_at != nil {
		fields = append(fields, trial.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trial.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trial.FieldModelingID:
		return m.ModelingID()
	case trial.FieldUUID:
		return m.UUID()
	case trial.FieldState:
		return m.State()
	case trial.FieldSavePath:
		return m.SavePath()
	case trial.FieldTargetMetric:
		return m.TargetMetric()
	case trial.FieldProgress:
		return m.Progress()
	case trial.FieldCreatedAt:
		return m.CreatedAt()
	case trial.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trial.FieldModelingID:
		return m.OldModelingID(ctx)
	case trial.FieldUUID:
		return m.OldUUID(ctx)
	case trial.FieldState:
		return m.OldState(ctx)
	case trial.FieldSavePath:
		return m.OldSavePath(ctx)
	case trial.FieldTargetMetric:
		return m.OldTargetMetric(ctx)
	case trial.FieldProgress:
		return m.OldProgress(ctx)
	case trial.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trial.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Trial field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trial.FieldModelingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelingID(v)
		return nil
	case trial.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case trial.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case trial.FieldSavePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSavePath(v)
		return nil
	case trial.FieldTargetMetric:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetMetric(v)
		return nil
	case trial.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	case trial.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trial.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Trial field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrialMutation) AddedFields() []string {
	var fields []string
	if m.addprogress != nil {
		fields = append(fields, trial.FieldProgress)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case trial.FieldProgress:
		return m.AddedProgress()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialMutation) AddField(name string, value ent.Value) error {
	switch name {
	case trial.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	}
	return fmt.Errorf("unknown Trial numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrialMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(trial.FieldModelingID) {
		fields = append(fields, trial.FieldModelingID)
	}
	if m.FieldCleared(trial.FieldUpdatedAt) {
		fields = append(fields, trial.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrialMutation) ClearField(name string) error {
	switch name {
	case trial.FieldModelingID:
		m.ClearModelingID()
		return nil
	case trial.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Trial nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrialMutation) ResetField(name string) error {
	switch name {
	case trial.FieldModelingID:
		m.ResetModelingID()
		return nil
	case trial.FieldUUID:
		m.ResetUUID()
		return nil
	case trial.FieldState:
		m.ResetState()
		return nil
	case trial.FieldSavePath:
		m.ResetSavePath()
		return nil
	case trial.FieldTargetMetric:
		m.ResetTargetMetric()
		return nil
	case trial.FieldProgress:
		m.ResetProgress()
		return nil
	case trial.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trial.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Trial field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.modeling != nil {
		edges = append(edges, trial.EdgeModeling)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trial.EdgeModeling:
		if id := m.modeling; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmodeling {
		edges = append(edges, trial.EdgeModeling)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrialMutation) EdgeCleared(name string) bool {
	switch name {
	case trial.EdgeModeling:
		return m.clearedmodeling
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrialMutation) ClearEdge(name string) error {
	switch name {
	case trial.EdgeModeling:
		m.ClearModeling()
		return nil
	}
	return fmt.Errorf("unknown Trial unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrialMutation) ResetEdge(name string) error {
	switch name {
	case trial.EdgeModeling:
		m.ResetModeling()
		return nil
	}
	return fmt.Errorf("unknown Trial edge %s", name)
}

// TrialDetailsMutation represents an operation that mutates the TrialDetails nodes in the graph.
type TrialDetailsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	trial_uuid     *string
	model          *string
	data_type      *string
	data           *[]string
	appenddata     []string
	is_model_saved *bool
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TrialDetails, error)
	predicates     []predicate.TrialDetails
}

var _ ent.Mutation = (*TrialDetailsMutation)(nil)

// trialdetailsOption allows management of the mutation configuration using functional options.
type trialdetailsOption func(*TrialDetailsMutation)

// newTrialDetailsMutation creates new mutation for the TrialDetails entity.
func newTrialDetailsMutation(c config, op Op, opts ...trialdetailsOption) *TrialDetailsMutation {
	m := &TrialDetailsMutation{
		config:        c,
		op:            op,
		typ:           TypeTrialDetails,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrialDetailsID sets the ID field of the mutation.
func withTrialDetailsID(id int) trialdetailsOption {
	return func(m *TrialDetailsMutation) {
		var (
			err   error
			once  sync.Once
			value *TrialDetails
		)
		m.oldValue = func(ctx context.Context) (*TrialDetails, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TrialDetails.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrialDetails sets the old TrialDetails of the mutation.
func withTrialDetails(node *TrialDetails) trialdetailsOption {
	return func(m *TrialDetailsMutation) {
		m.oldValue = func(context.Context) (*TrialDetails, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrialDetailsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrialDetailsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TrialDetails entities.
func (m *TrialDetailsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrialDetailsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrialDetailsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TrialDetails.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTrialUUID sets the "trial_uuid" field.
func (m *TrialDetailsMutation) SetTrialUUID(s string) {
	m.trial_uuid = &s
}

// TrialUUID returns the value of the "trial_uuid" field in the mutation.
func (m *TrialDetailsMutation) TrialUUID() (r string, exists bool) {
	v := m.trial_uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialUUID returns the old "trial_uuid" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldTrialUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialUUID: %w", err)
	}
	return oldValue.TrialUUID, nil
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (m *TrialDetailsMutation) ClearTrialUUID() {
	m.trial_uuid = nil
	m.clearedFields[trialdetails.FieldTrialUUID] = struct{}{}
}

// TrialUUIDCleared returns if the "trial_uuid" field was cleared in this mutation.
func (m *TrialDetailsMutation) TrialUUIDCleared() bool {
	_, ok := m.clearedFields[trialdetails.FieldTrialUUID]
	return ok
}

// ResetTrialUUID resets all changes to the "trial_uuid" field.
func (m *TrialDetailsMutation) ResetTrialUUID() {
	m.trial_uuid = nil
	delete(m.clearedFields, trialdetails.FieldTrialUUID)
}

// SetModel sets the "model" field.
func (m *TrialDetailsMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *TrialDetailsMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *TrialDetailsMutation) ResetModel() {
	m.model = nil
}

// SetDataType sets the "data_type" field.
func (m *TrialDetailsMutation) SetDataType(s string) {
	m.data_type = &s
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *TrialDetailsMutation) DataType() (r string, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *TrialDetailsMutation) ResetDataType() {
	m.data_type = nil
}

// SetData sets the "data" field.
func (m *TrialDetailsMutation) SetData(s []string) {
	m.data = &s
	m.appenddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *TrialDetailsMutation) Data() (r []string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldData(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AppendData adds s to the "data" field.
func (m *TrialDetailsMutation) AppendData(s []string) {
	m.appenddata = append(m.appenddata, s...)
}

// AppendedData returns the list of values that were appended to the "data" field in this mutation.
func (m *TrialDetailsMutation) AppendedData() ([]string, bool) {
	if len(m.appenddata) == 0 {
		return nil, false
	}
	return m.appenddata, true
}

// ResetData resets all changes to the "data" field.
func (m *TrialDetailsMutation) ResetData() {
	m.data = nil
	m.appenddata = nil
}

// SetIsModelSaved sets the "is_model_saved" field.
func (m *TrialDetailsMutation) SetIsModelSaved(b bool) {
	m.is_model_saved = &b
}

// IsModelSaved returns the value of the "is_model_saved" field in the mutation.
func (m *TrialDetailsMutation) IsModelSaved() (r bool, exists bool) {
	v := m.is_model_saved
	if v == nil {
		return
	}
	return *v, true
}

// OldIsModelSaved returns the old "is_model_saved" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldIsModelSaved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsModelSaved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsModelSaved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsModelSaved: %w", err)
	}
	return oldValue.IsModelSaved, nil
}

// ResetIsModelSaved resets all changes to the "is_model_saved" field.
func (m *TrialDetailsMutation) ResetIsModelSaved() {
	m.is_model_saved = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TrialDetailsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrialDetailsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TrialDetails entity.
// If the TrialDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialDetailsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrialDetailsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TrialDetailsMutation builder.
func (m *TrialDetailsMutation) Where(ps ...predicate.TrialDetails) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrialDetailsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrialDetailsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TrialDetails, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrialDetailsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrialDetailsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TrialDetails).
func (m *TrialDetailsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrialDetailsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.trial_uuid != nil {
		fields = append(fields, trialdetails.FieldTrialUUID)
	}
	if m.model != nil {
		fields = append(fields, trialdetails.FieldModel)
	}
	if m.data_type != nil {
		fields = append(fields, trialdetails.FieldDataType)
	}
	if m.data != nil {
		fields = append(fields, trialdetails.FieldData)
	}
	if m.is_model_saved != nil {
		fields = append(fields, trialdetails.FieldIsModelSaved)
	}
	if m.created_at != nil {
		fields = append(fields, trialdetails.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrialDetailsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trialdetails.FieldTrialUUID:
		return m.TrialUUID()
	case trialdetails.FieldModel:
		return m.Model()
	case trialdetails.FieldDataType:
		return m.DataType()
	case trialdetails.FieldData:
		return m.Data()
	case trialdetails.FieldIsModelSaved:
		return m.IsModelSaved()
	case trialdetails.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrialDetailsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trialdetails.FieldTrialUUID:
		return m.OldTrialUUID(ctx)
	case trialdetails.FieldModel:
		return m.OldModel(ctx)
	case trialdetails.FieldDataType:
		return m.OldDataType(ctx)
	case trialdetails.FieldData:
		return m.OldData(ctx)
	case trialdetails.FieldIsModelSaved:
		return m.OldIsModelSaved(ctx)
	case trialdetails.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TrialDetails field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialDetailsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trialdetails.FieldTrialUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialUUID(v)
		return nil
	case trialdetails.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case trialdetails.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case trialdetails.FieldData:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case trialdetails.FieldIsModelSaved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsModelSaved(v)
		return nil
	case trialdetails.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TrialDetails field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrialDetailsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrialDetailsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialDetailsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TrialDetails numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrialDetailsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(trialdetails.FieldTrialUUID) {
		fields = append(fields, trialdetails.FieldTrialUUID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrialDetailsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrialDetailsMutation) ClearField(name string) error {
	switch name {
	case trialdetails.FieldTrialUUID:
		m.ClearTrialUUID()
		return nil
	}
	return fmt.Errorf("unknown TrialDetails nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrialDetailsMutation) ResetField(name string) error {
	switch name {
	case trialdetails.FieldTrialUUID:
		m.ResetTrialUUID()
		return nil
	case trialdetails.FieldModel:
		m.ResetModel()
		return nil
	case trialdetails.FieldDataType:
		m.ResetDataType()
		return nil
	case trialdetails.FieldData:
		m.ResetData()
		return nil
	case trialdetails.FieldIsModelSaved:
		m.ResetIsModelSaved()
		return nil
	case trialdetails.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TrialDetails field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrialDetailsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrialDetailsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrialDetailsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrialDetailsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrialDetailsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrialDetailsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrialDetailsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TrialDetails unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrialDetailsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TrialDetails edge %s", name)
}

// TrialStatusMutation represents an operation that mutates the TrialStatus nodes in the graph.
type TrialStatusMutation struct {
	config
	op                Op
	typ               string
	id                *int
	trial_uuid        *string
	status_json       *[]string
	appendstatus_json []string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*TrialStatus, error)
	predicates        []predicate.TrialStatus
}

var _ ent.Mutation = (*TrialStatusMutation)(nil)

// trialstatusOption allows management of the mutation configuration using functional options.
type trialstatusOption func(*TrialStatusMutation)

// newTrialStatusMutation creates new mutation for the TrialStatus entity.
func newTrialStatusMutation(c config, op Op, opts ...trialstatusOption) *TrialStatusMutation {
	m := &TrialStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeTrialStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrialStatusID sets the ID field of the mutation.
func withTrialStatusID(id int) trialstatusOption {
	return func(m *TrialStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *TrialStatus
		)
		m.oldValue = func(ctx context.Context) (*TrialStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TrialStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrialStatus sets the old TrialStatus of the mutation.
func withTrialStatus(node *TrialStatus) trialstatusOption {
	return func(m *TrialStatusMutation) {
		m.oldValue = func(context.Context) (*TrialStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrialStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrialStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TrialStatus entities.
func (m *TrialStatusMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrialStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrialStatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TrialStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTrialUUID sets the "trial_uuid" field.
func (m *TrialStatusMutation) SetTrialUUID(s string) {
	m.trial_uuid = &s
}

// TrialUUID returns the value of the "trial_uuid" field in the mutation.
func (m *TrialStatusMutation) TrialUUID() (r string, exists bool) {
	v := m.trial_uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldTrialUUID returns the old "trial_uuid" field's value of the TrialStatus entity.
// If the TrialStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialStatusMutation) OldTrialUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrialUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrialUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrialUUID: %w", err)
	}
	return oldValue.TrialUUID, nil
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (m *TrialStatusMutation) ClearTrialUUID() {
	m.trial_uuid = nil
	m.clearedFields[trialstatus.FieldTrialUUID] = struct{}{}
}

// TrialUUIDCleared returns if the "trial_uuid" field was cleared in this mutation.
func (m *TrialStatusMutation) TrialUUIDCleared() bool {
	_, ok := m.clearedFields[trialstatus.FieldTrialUUID]
	return ok
}

// ResetTrialUUID resets all changes to the "trial_uuid" field.
func (m *TrialStatusMutation) ResetTrialUUID() {
	m.trial_uuid = nil
	delete(m.clearedFields, trialstatus.FieldTrialUUID)
}

// SetStatusJSON sets the "status_json" field.
func (m *TrialStatusMutation) SetStatusJSON(s []string) {
	m.status_json = &s
	m.appendstatus_json = nil
}

// StatusJSON returns the value of the "status_json" field in the mutation.
func (m *TrialStatusMutation) StatusJSON() (r []string, exists bool) {
	v := m.status_json
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusJSON returns the old "status_json" field's value of the TrialStatus entity.
// If the TrialStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialStatusMutation) OldStatusJSON(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusJSON is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusJSON requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusJSON: %w", err)
	}
	return oldValue.StatusJSON, nil
}

// AppendStatusJSON adds s to the "status_json" field.
func (m *TrialStatusMutation) AppendStatusJSON(s []string) {
	m.appendstatus_json = append(m.appendstatus_json, s...)
}

// AppendedStatusJSON returns the list of values that were appended to the "status_json" field in this mutation.
func (m *TrialStatusMutation) AppendedStatusJSON() ([]string, bool) {
	if len(m.appendstatus_json) == 0 {
		return nil, false
	}
	return m.appendstatus_json, true
}

// ResetStatusJSON resets all changes to the "status_json" field.
func (m *TrialStatusMutation) ResetStatusJSON() {
	m.status_json = nil
	m.appendstatus_json = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TrialStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrialStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TrialStatus entity.
// If the TrialStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrialStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrialStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the TrialStatusMutation builder.
func (m *TrialStatusMutation) Where(ps ...predicate.TrialStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrialStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrialStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TrialStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrialStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrialStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TrialStatus).
func (m *TrialStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrialStatusMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.trial_uuid != nil {
		fields = append(fields, trialstatus.FieldTrialUUID)
	}
	if m.status_json != nil {
		fields = append(fields, trialstatus.FieldStatusJSON)
	}
	if m.created_at != nil {
		fields = append(fields, trialstatus.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrialStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trialstatus.FieldTrialUUID:
		return m.TrialUUID()
	case trialstatus.FieldStatusJSON:
		return m.StatusJSON()
	case trialstatus.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrialStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trialstatus.FieldTrialUUID:
		return m.OldTrialUUID(ctx)
	case trialstatus.FieldStatusJSON:
		return m.OldStatusJSON(ctx)
	case trialstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TrialStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trialstatus.FieldTrialUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrialUUID(v)
		return nil
	case trialstatus.FieldStatusJSON:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusJSON(v)
		return nil
	case trialstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TrialStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrialStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrialStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrialStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TrialStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrialStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(trialstatus.FieldTrialUUID) {
		fields = append(fields, trialstatus.FieldTrialUUID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrialStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrialStatusMutation) ClearField(name string) error {
	switch name {
	case trialstatus.FieldTrialUUID:
		m.ClearTrialUUID()
		return nil
	}
	return fmt.Errorf("unknown TrialStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrialStatusMutation) ResetField(name string) error {
	switch name {
	case trialstatus.FieldTrialUUID:
		m.ResetTrialUUID()
		return nil
	case trialstatus.FieldStatusJSON:
		m.ResetStatusJSON()
		return nil
	case trialstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown TrialStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrialStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrialStatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrialStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrialStatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrialStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrialStatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrialStatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TrialStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrialStatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TrialStatus edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	username      *string
	password      *string
	group         *int
	addgroup      *int
	is_use        *bool
	token         *string
	created_at    *time.Time
	updated_at    *time.Time
	login_at      *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetGroup sets the "group" field.
func (m *UserMutation) SetGroup(i int) {
	m.group = &i
	m.addgroup = nil
}

// Group returns the value of the "group" field in the mutation.
func (m *UserMutation) Group() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroup returns the old "group" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGroup(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroup: %w", err)
	}
	return oldValue.Group, nil
}

// AddGroup adds i to the "group" field.
func (m *UserMutation) AddGroup(i int) {
	if m.addgroup != nil {
		*m.addgroup += i
	} else {
		m.addgroup = &i
	}
}

// AddedGroup returns the value that was added to the "group" field in this mutation.
func (m *UserMutation) AddedGroup() (r int, exists bool) {
	v := m.addgroup
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroup resets all changes to the "group" field.
func (m *UserMutation) ResetGroup() {
	m.group = nil
	m.addgroup = nil
}

// SetIsUse sets the "is_use" field.
func (m *UserMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *UserMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *UserMutation) ResetIsUse() {
	m.is_use = nil
}

// SetToken sets the "token" field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ClearToken clears the value of the "token" field.
func (m *UserMutation) ClearToken() {
	m.token = nil
	m.clearedFields[user.FieldToken] = struct{}{}
}

// TokenCleared returns if the "token" field was cleared in this mutation.
func (m *UserMutation) TokenCleared() bool {
	_, ok := m.clearedFields[user.FieldToken]
	return ok
}

// ResetToken resets all changes to the "token" field.
func (m *UserMutation) ResetToken() {
	m.token = nil
	delete(m.clearedFields, user.FieldToken)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// SetLoginAt sets the "login_at" field.
func (m *UserMutation) SetLoginAt(t time.Time) {
	m.login_at = &t
}

// LoginAt returns the value of the "login_at" field in the mutation.
func (m *UserMutation) LoginAt() (r time.Time, exists bool) {
	v := m.login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginAt returns the old "login_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLoginAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginAt: %w", err)
	}
	return oldValue.LoginAt, nil
}

// ClearLoginAt clears the value of the "login_at" field.
func (m *UserMutation) ClearLoginAt() {
	m.login_at = nil
	m.clearedFields[user.FieldLoginAt] = struct{}{}
}

// LoginAtCleared returns if the "login_at" field was cleared in this mutation.
func (m *UserMutation) LoginAtCleared() bool {
	_, ok := m.clearedFields[user.FieldLoginAt]
	return ok
}

// ResetLoginAt resets all changes to the "login_at" field.
func (m *UserMutation) ResetLoginAt() {
	m.login_at = nil
	delete(m.clearedFields, user.FieldLoginAt)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.group != nil {
		fields = append(fields, user.FieldGroup)
	}
	if m.is_use != nil {
		fields = append(fields, user.FieldIsUse)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.login_at != nil {
		fields = append(fields, user.FieldLoginAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldGroup:
		return m.Group()
	case user.FieldIsUse:
		return m.IsUse()
	case user.FieldToken:
		return m.Token()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldLoginAt:
		return m.LoginAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldGroup:
		return m.OldGroup(ctx)
	case user.FieldIsUse:
		return m.OldIsUse(ctx)
	case user.FieldToken:
		return m.OldToken(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldLoginAt:
		return m.OldLoginAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroup(v)
		return nil
	case user.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addgroup != nil {
		fields = append(fields, user.FieldGroup)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGroup:
		return m.AddedGroup()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroup(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldToken) {
		fields = append(fields, user.FieldToken)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.FieldCleared(user.FieldLoginAt) {
		fields = append(fields, user.FieldLoginAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldToken:
		m.ClearToken()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case user.FieldLoginAt:
		m.ClearLoginAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldGroup:
		m.ResetGroup()
		return nil
	case user.FieldIsUse:
		m.ResetIsUse()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldLoginAt:
		m.ResetLoginAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserGroupMutation represents an operation that mutates the UserGroup nodes in the graph.
type UserGroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	level         *int
	addlevel      *int
	is_use        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserGroup, error)
	predicates    []predicate.UserGroup
}

var _ ent.Mutation = (*UserGroupMutation)(nil)

// usergroupOption allows management of the mutation configuration using functional options.
type usergroupOption func(*UserGroupMutation)

// newUserGroupMutation creates new mutation for the UserGroup entity.
func newUserGroupMutation(c config, op Op, opts ...usergroupOption) *UserGroupMutation {
	m := &UserGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeUserGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserGroupID sets the ID field of the mutation.
func withUserGroupID(id int) usergroupOption {
	return func(m *UserGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *UserGroup
		)
		m.oldValue = func(ctx context.Context) (*UserGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserGroup sets the old UserGroup of the mutation.
func withUserGroup(node *UserGroup) usergroupOption {
	return func(m *UserGroupMutation) {
		m.oldValue = func(context.Context) (*UserGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the UserGroup entity.
// If the UserGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserGroupMutation) ResetName() {
	m.name = nil
}

// SetLevel sets the "level" field.
func (m *UserGroupMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *UserGroupMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the UserGroup entity.
// If the UserGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserGroupMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *UserGroupMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *UserGroupMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *UserGroupMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetIsUse sets the "is_use" field.
func (m *UserGroupMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *UserGroupMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the UserGroup entity.
// If the UserGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserGroupMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *UserGroupMutation) ResetIsUse() {
	m.is_use = nil
}

// Where appends a list predicates to the UserGroupMutation builder.
func (m *UserGroupMutation) Where(ps ...predicate.UserGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserGroup).
func (m *UserGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserGroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, usergroup.FieldName)
	}
	if m.level != nil {
		fields = append(fields, usergroup.FieldLevel)
	}
	if m.is_use != nil {
		fields = append(fields, usergroup.FieldIsUse)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usergroup.FieldName:
		return m.Name()
	case usergroup.FieldLevel:
		return m.Level()
	case usergroup.FieldIsUse:
		return m.IsUse()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usergroup.FieldName:
		return m.OldName(ctx)
	case usergroup.FieldLevel:
		return m.OldLevel(ctx)
	case usergroup.FieldIsUse:
		return m.OldIsUse(ctx)
	}
	return nil, fmt.Errorf("unknown UserGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usergroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case usergroup.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case usergroup.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	}
	return fmt.Errorf("unknown UserGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserGroupMutation) AddedFields() []string {
	var fields []string
	if m.addlevel != nil {
		fields = append(fields, usergroup.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserGroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usergroup.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usergroup.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown UserGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserGroupMutation) ResetField(name string) error {
	switch name {
	case usergroup.FieldName:
		m.ResetName()
		return nil
	case usergroup.FieldLevel:
		m.ResetLevel()
		return nil
	case usergroup.FieldIsUse:
		m.ResetIsUse()
		return nil
	}
	return fmt.Errorf("unknown UserGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserGroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserGroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserGroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserGroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserGroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserGroup edge %s", name)
}

// UserProjectMutation represents an operation that mutates the UserProject nodes in the graph.
type UserProjectMutation struct {
	config
	op             Op
	typ            string
	id             *int
	username       *string
	is_use         *bool
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	project        *int
	clearedproject bool
	done           bool
	oldValue       func(context.Context) (*UserProject, error)
	predicates     []predicate.UserProject
}

var _ ent.Mutation = (*UserProjectMutation)(nil)

// userprojectOption allows management of the mutation configuration using functional options.
type userprojectOption func(*UserProjectMutation)

// newUserProjectMutation creates new mutation for the UserProject entity.
func newUserProjectMutation(c config, op Op, opts ...userprojectOption) *UserProjectMutation {
	m := &UserProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeUserProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserProjectID sets the ID field of the mutation.
func withUserProjectID(id int) userprojectOption {
	return func(m *UserProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *UserProject
		)
		m.oldValue = func(ctx context.Context) (*UserProject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserProject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserProject sets the old UserProject of the mutation.
func withUserProject(node *UserProject) userprojectOption {
	return func(m *UserProjectMutation) {
		m.oldValue = func(context.Context) (*UserProject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserProject entities.
func (m *UserProjectMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserProject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProjectID sets the "project_id" field.
func (m *UserProjectMutation) SetProjectID(i int) {
	m.project = &i
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *UserProjectMutation) ProjectID() (r int, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the UserProject entity.
// If the UserProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProjectMutation) OldProjectID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *UserProjectMutation) ResetProjectID() {
	m.project = nil
}

// SetUsername sets the "username" field.
func (m *UserProjectMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserProjectMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the UserProject entity.
// If the UserProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProjectMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserProjectMutation) ResetUsername() {
	m.username = nil
}

// SetIsUse sets the "is_use" field.
func (m *UserProjectMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *UserProjectMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the UserProject entity.
// If the UserProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProjectMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *UserProjectMutation) ResetIsUse() {
	m.is_use = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserProject entity.
// If the UserProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserProject entity.
// If the UserProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserProjectMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[userproject.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserProjectMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[userproject.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, userproject.FieldUpdatedAt)
}

// ClearProject clears the "project" edge to the Project entity.
func (m *UserProjectMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[userproject.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *UserProjectMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *UserProjectMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *UserProjectMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the UserProjectMutation builder.
func (m *UserProjectMutation) Where(ps ...predicate.UserProject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserProject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserProject).
func (m *UserProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserProjectMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.project != nil {
		fields = append(fields, userproject.FieldProjectID)
	}
	if m.username != nil {
		fields = append(fields, userproject.FieldUsername)
	}
	if m.is_use != nil {
		fields = append(fields, userproject.FieldIsUse)
	}
	if m.created_at != nil {
		fields = append(fields, userproject.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userproject.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userproject.FieldProjectID:
		return m.ProjectID()
	case userproject.FieldUsername:
		return m.Username()
	case userproject.FieldIsUse:
		return m.IsUse()
	case userproject.FieldCreatedAt:
		return m.CreatedAt()
	case userproject.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userproject.FieldProjectID:
		return m.OldProjectID(ctx)
	case userproject.FieldUsername:
		return m.OldUsername(ctx)
	case userproject.FieldIsUse:
		return m.OldIsUse(ctx)
	case userproject.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userproject.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserProject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userproject.FieldProjectID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case userproject.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case userproject.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case userproject.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userproject.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserProject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserProjectMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserProject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userproject.FieldUpdatedAt) {
		fields = append(fields, userproject.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserProjectMutation) ClearField(name string) error {
	switch name {
	case userproject.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserProject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserProjectMutation) ResetField(name string) error {
	switch name {
	case userproject.FieldProjectID:
		m.ResetProjectID()
		return nil
	case userproject.FieldUsername:
		m.ResetUsername()
		return nil
	case userproject.FieldIsUse:
		m.ResetIsUse()
		return nil
	case userproject.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userproject.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserProject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, userproject.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userproject.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserProjectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, userproject.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case userproject.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserProjectMutation) ClearEdge(name string) error {
	switch name {
	case userproject.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown UserProject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserProjectMutation) ResetEdge(name string) error {
	switch name {
	case userproject.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown UserProject edge %s", name)
}
