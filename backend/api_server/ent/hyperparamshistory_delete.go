// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/hyperparamshistory"
	"api_server/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HyperParamsHistoryDelete is the builder for deleting a HyperParamsHistory entity.
type HyperParamsHistoryDelete struct {
	config
	hooks    []Hook
	mutation *HyperParamsHistoryMutation
}

// Where appends a list predicates to the HyperParamsHistoryDelete builder.
func (hphd *HyperParamsHistoryDelete) Where(ps ...predicate.HyperParamsHistory) *HyperParamsHistoryDelete {
	hphd.mutation.Where(ps...)
	return hphd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hphd *HyperParamsHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hphd.sqlExec, hphd.mutation, hphd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hphd *HyperParamsHistoryDelete) ExecX(ctx context.Context) int {
	n, err := hphd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hphd *HyperParamsHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hyperparamshistory.Table, sqlgraph.NewFieldSpec(hyperparamshistory.FieldID, field.TypeInt))
	if ps := hphd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hphd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hphd.mutation.done = true
	return affected, err
}

// HyperParamsHistoryDeleteOne is the builder for deleting a single HyperParamsHistory entity.
type HyperParamsHistoryDeleteOne struct {
	hphd *HyperParamsHistoryDelete
}

// Where appends a list predicates to the HyperParamsHistoryDelete builder.
func (hphdo *HyperParamsHistoryDeleteOne) Where(ps ...predicate.HyperParamsHistory) *HyperParamsHistoryDeleteOne {
	hphdo.hphd.mutation.Where(ps...)
	return hphdo
}

// Exec executes the deletion query.
func (hphdo *HyperParamsHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := hphdo.hphd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hyperparamshistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hphdo *HyperParamsHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := hphdo.Exec(ctx); err != nil {
		panic(err)
	}
}
