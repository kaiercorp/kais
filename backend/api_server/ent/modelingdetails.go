// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Modeling result table
type ModelingDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parent modeling ID
	ModelingID int `json:"modeling_id,omitempty"`
	// model name
	Model string `json:"model,omitempty"`
	// result data type
	DataType string `json:"data_type,omitempty"`
	// result data
	Data []string `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelingDetailsQuery when eager-loading is set.
	Edges        ModelingDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModelingDetailsEdges holds the relations/edges for other nodes in the graph.
type ModelingDetailsEdges struct {
	// Modeling holds the value of the modeling edge.
	Modeling *Modeling `json:"modeling,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ModelingOrErr returns the Modeling value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelingDetailsEdges) ModelingOrErr() (*Modeling, error) {
	if e.Modeling != nil {
		return e.Modeling, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: modeling.Label}
	}
	return nil, &NotLoadedError{edge: "modeling"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModelingDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modelingdetails.FieldData:
			values[i] = new([]byte)
		case modelingdetails.FieldID, modelingdetails.FieldModelingID:
			values[i] = new(sql.NullInt64)
		case modelingdetails.FieldModel, modelingdetails.FieldDataType:
			values[i] = new(sql.NullString)
		case modelingdetails.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModelingDetails fields.
func (md *ModelingDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modelingdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			md.ID = int(value.Int64)
		case modelingdetails.FieldModelingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modeling_id", values[i])
			} else if value.Valid {
				md.ModelingID = int(value.Int64)
			}
		case modelingdetails.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				md.Model = value.String
			}
		case modelingdetails.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				md.DataType = value.String
			}
		case modelingdetails.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &md.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case modelingdetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				md.CreatedAt = value.Time
			}
		default:
			md.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModelingDetails.
// This includes values selected through modifiers, order, etc.
func (md *ModelingDetails) Value(name string) (ent.Value, error) {
	return md.selectValues.Get(name)
}

// QueryModeling queries the "modeling" edge of the ModelingDetails entity.
func (md *ModelingDetails) QueryModeling() *ModelingQuery {
	return NewModelingDetailsClient(md.config).QueryModeling(md)
}

// Update returns a builder for updating this ModelingDetails.
// Note that you need to call ModelingDetails.Unwrap() before calling this method if this ModelingDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *ModelingDetails) Update() *ModelingDetailsUpdateOne {
	return NewModelingDetailsClient(md.config).UpdateOne(md)
}

// Unwrap unwraps the ModelingDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *ModelingDetails) Unwrap() *ModelingDetails {
	_tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModelingDetails is not a transactional entity")
	}
	md.config.driver = _tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *ModelingDetails) String() string {
	var builder strings.Builder
	builder.WriteString("ModelingDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", md.ID))
	builder.WriteString("modeling_id=")
	builder.WriteString(fmt.Sprintf("%v", md.ModelingID))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(md.Model)
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(md.DataType)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", md.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(md.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ModelingDetailsSlice is a parsable slice of ModelingDetails.
type ModelingDetailsSlice []*ModelingDetails
