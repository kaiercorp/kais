// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Dataset is the model entity for the Dataset schema.
type Dataset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// IsValid holds the value of the "is_valid" field.
	IsValid bool `json:"is_valid,omitempty"`
	// IsTrainable holds the value of the "is_trainable" field.
	IsTrainable bool `json:"is_trainable,omitempty"`
	// IsTestable holds the value of the "is_testable" field.
	IsTestable bool `json:"is_testable,omitempty"`
	// IsLeaf holds the value of the "is_leaf" field.
	IsLeaf bool `json:"is_leaf,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// IsUse holds the value of the "is_use" field.
	IsUse bool `json:"is_use,omitempty"`
	// Stat holds the value of the "stat" field.
	Stat []string `json:"stat,omitempty"`
	// StatPath holds the value of the "stat_path" field.
	StatPath string `json:"stat_path,omitempty"`
	// Engine holds the value of the "engine" field.
	Engine []string `json:"engine,omitempty"`
	// DataType holds the value of the "data_type" field.
	DataType string `json:"data_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DrID holds the value of the "dr_id" field.
	DrID int `json:"dr_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatasetQuery when eager-loading is set.
	Edges                 DatasetEdges `json:"edges"`
	dataset_root_datasets *int
	selectValues          sql.SelectValues
}

// DatasetEdges holds the relations/edges for other nodes in the graph.
type DatasetEdges struct {
	// Datasetroot holds the value of the datasetroot edge.
	Datasetroot *DatasetRoot `json:"datasetroot,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DatasetrootOrErr returns the Datasetroot value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatasetEdges) DatasetrootOrErr() (*DatasetRoot, error) {
	if e.loadedTypes[0] {
		if e.Datasetroot == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: datasetroot.Label}
		}
		return e.Datasetroot, nil
	}
	return nil, &NotLoadedError{edge: "datasetroot"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dataset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dataset.FieldStat, dataset.FieldEngine:
			values[i] = new([]byte)
		case dataset.FieldIsValid, dataset.FieldIsTrainable, dataset.FieldIsTestable, dataset.FieldIsLeaf, dataset.FieldIsDeleted, dataset.FieldIsUse:
			values[i] = new(sql.NullBool)
		case dataset.FieldID, dataset.FieldParentID, dataset.FieldDrID:
			values[i] = new(sql.NullInt64)
		case dataset.FieldName, dataset.FieldDescription, dataset.FieldPath, dataset.FieldStatPath, dataset.FieldDataType:
			values[i] = new(sql.NullString)
		case dataset.FieldCreatedAt, dataset.FieldUpdatedAt, dataset.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case dataset.ForeignKeys[0]: // dataset_root_datasets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dataset fields.
func (d *Dataset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dataset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dataset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dataset.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				d.ParentID = int(value.Int64)
			}
		case dataset.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case dataset.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				d.Path = value.String
			}
		case dataset.FieldIsValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_valid", values[i])
			} else if value.Valid {
				d.IsValid = value.Bool
			}
		case dataset.FieldIsTrainable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_trainable", values[i])
			} else if value.Valid {
				d.IsTrainable = value.Bool
			}
		case dataset.FieldIsTestable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_testable", values[i])
			} else if value.Valid {
				d.IsTestable = value.Bool
			}
		case dataset.FieldIsLeaf:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_leaf", values[i])
			} else if value.Valid {
				d.IsLeaf = value.Bool
			}
		case dataset.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				d.IsDeleted = value.Bool
			}
		case dataset.FieldIsUse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_use", values[i])
			} else if value.Valid {
				d.IsUse = value.Bool
			}
		case dataset.FieldStat:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stat", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Stat); err != nil {
					return fmt.Errorf("unmarshal field stat: %w", err)
				}
			}
		case dataset.FieldStatPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stat_path", values[i])
			} else if value.Valid {
				d.StatPath = value.String
			}
		case dataset.FieldEngine:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field engine", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Engine); err != nil {
					return fmt.Errorf("unmarshal field engine: %w", err)
				}
			}
		case dataset.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				d.DataType = value.String
			}
		case dataset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case dataset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case dataset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = value.Time
			}
		case dataset.FieldDrID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dr_id", values[i])
			} else if value.Valid {
				d.DrID = int(value.Int64)
			}
		case dataset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_root_datasets", value)
			} else if value.Valid {
				d.dataset_root_datasets = new(int)
				*d.dataset_root_datasets = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dataset.
// This includes values selected through modifiers, order, etc.
func (d *Dataset) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryDatasetroot queries the "datasetroot" edge of the Dataset entity.
func (d *Dataset) QueryDatasetroot() *DatasetRootQuery {
	return NewDatasetClient(d.config).QueryDatasetroot(d)
}

// Update returns a builder for updating this Dataset.
// Note that you need to call Dataset.Unwrap() before calling this method if this Dataset
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dataset) Update() *DatasetUpdateOne {
	return NewDatasetClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dataset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dataset) Unwrap() *Dataset {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dataset is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dataset) String() string {
	var builder strings.Builder
	builder.WriteString("Dataset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", d.ParentID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(d.Path)
	builder.WriteString(", ")
	builder.WriteString("is_valid=")
	builder.WriteString(fmt.Sprintf("%v", d.IsValid))
	builder.WriteString(", ")
	builder.WriteString("is_trainable=")
	builder.WriteString(fmt.Sprintf("%v", d.IsTrainable))
	builder.WriteString(", ")
	builder.WriteString("is_testable=")
	builder.WriteString(fmt.Sprintf("%v", d.IsTestable))
	builder.WriteString(", ")
	builder.WriteString("is_leaf=")
	builder.WriteString(fmt.Sprintf("%v", d.IsLeaf))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", d.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("is_use=")
	builder.WriteString(fmt.Sprintf("%v", d.IsUse))
	builder.WriteString(", ")
	builder.WriteString("stat=")
	builder.WriteString(fmt.Sprintf("%v", d.Stat))
	builder.WriteString(", ")
	builder.WriteString("stat_path=")
	builder.WriteString(d.StatPath)
	builder.WriteString(", ")
	builder.WriteString("engine=")
	builder.WriteString(fmt.Sprintf("%v", d.Engine))
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(d.DataType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(d.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dr_id=")
	builder.WriteString(fmt.Sprintf("%v", d.DrID))
	builder.WriteByte(')')
	return builder.String()
}

// Datasets is a parsable slice of Dataset.
type Datasets []*Dataset
