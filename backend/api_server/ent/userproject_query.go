// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/predicate"
	"api_server/ent/project"
	"api_server/ent/userproject"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProjectQuery is the builder for querying UserProject entities.
type UserProjectQuery struct {
	config
	ctx         *QueryContext
	order       []userproject.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserProject
	withProject *ProjectQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserProjectQuery builder.
func (upq *UserProjectQuery) Where(ps ...predicate.UserProject) *UserProjectQuery {
	upq.predicates = append(upq.predicates, ps...)
	return upq
}

// Limit the number of records to be returned by this query.
func (upq *UserProjectQuery) Limit(limit int) *UserProjectQuery {
	upq.ctx.Limit = &limit
	return upq
}

// Offset to start from.
func (upq *UserProjectQuery) Offset(offset int) *UserProjectQuery {
	upq.ctx.Offset = &offset
	return upq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (upq *UserProjectQuery) Unique(unique bool) *UserProjectQuery {
	upq.ctx.Unique = &unique
	return upq
}

// Order specifies how the records should be ordered.
func (upq *UserProjectQuery) Order(o ...userproject.OrderOption) *UserProjectQuery {
	upq.order = append(upq.order, o...)
	return upq
}

// QueryProject chains the current query on the "project" edge.
func (upq *UserProjectQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: upq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userproject.Table, userproject.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userproject.ProjectTable, userproject.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserProject entity from the query.
// Returns a *NotFoundError when no UserProject was found.
func (upq *UserProjectQuery) First(ctx context.Context) (*UserProject, error) {
	nodes, err := upq.Limit(1).All(setContextOp(ctx, upq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userproject.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (upq *UserProjectQuery) FirstX(ctx context.Context) *UserProject {
	node, err := upq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserProject ID from the query.
// Returns a *NotFoundError when no UserProject ID was found.
func (upq *UserProjectQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = upq.Limit(1).IDs(setContextOp(ctx, upq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userproject.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (upq *UserProjectQuery) FirstIDX(ctx context.Context) int {
	id, err := upq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserProject entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserProject entity is found.
// Returns a *NotFoundError when no UserProject entities are found.
func (upq *UserProjectQuery) Only(ctx context.Context) (*UserProject, error) {
	nodes, err := upq.Limit(2).All(setContextOp(ctx, upq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userproject.Label}
	default:
		return nil, &NotSingularError{userproject.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (upq *UserProjectQuery) OnlyX(ctx context.Context) *UserProject {
	node, err := upq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserProject ID in the query.
// Returns a *NotSingularError when more than one UserProject ID is found.
// Returns a *NotFoundError when no entities are found.
func (upq *UserProjectQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = upq.Limit(2).IDs(setContextOp(ctx, upq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userproject.Label}
	default:
		err = &NotSingularError{userproject.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (upq *UserProjectQuery) OnlyIDX(ctx context.Context) int {
	id, err := upq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserProjects.
func (upq *UserProjectQuery) All(ctx context.Context) ([]*UserProject, error) {
	ctx = setContextOp(ctx, upq.ctx, ent.OpQueryAll)
	if err := upq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserProject, *UserProjectQuery]()
	return withInterceptors[[]*UserProject](ctx, upq, qr, upq.inters)
}

// AllX is like All, but panics if an error occurs.
func (upq *UserProjectQuery) AllX(ctx context.Context) []*UserProject {
	nodes, err := upq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserProject IDs.
func (upq *UserProjectQuery) IDs(ctx context.Context) (ids []int, err error) {
	if upq.ctx.Unique == nil && upq.path != nil {
		upq.Unique(true)
	}
	ctx = setContextOp(ctx, upq.ctx, ent.OpQueryIDs)
	if err = upq.Select(userproject.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (upq *UserProjectQuery) IDsX(ctx context.Context) []int {
	ids, err := upq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (upq *UserProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, upq.ctx, ent.OpQueryCount)
	if err := upq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, upq, querierCount[*UserProjectQuery](), upq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (upq *UserProjectQuery) CountX(ctx context.Context) int {
	count, err := upq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (upq *UserProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, upq.ctx, ent.OpQueryExist)
	switch _, err := upq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (upq *UserProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := upq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (upq *UserProjectQuery) Clone() *UserProjectQuery {
	if upq == nil {
		return nil
	}
	return &UserProjectQuery{
		config:      upq.config,
		ctx:         upq.ctx.Clone(),
		order:       append([]userproject.OrderOption{}, upq.order...),
		inters:      append([]Interceptor{}, upq.inters...),
		predicates:  append([]predicate.UserProject{}, upq.predicates...),
		withProject: upq.withProject.Clone(),
		// clone intermediate query.
		sql:       upq.sql.Clone(),
		path:      upq.path,
		modifiers: append([]func(*sql.Selector){}, upq.modifiers...),
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UserProjectQuery) WithProject(opts ...func(*ProjectQuery)) *UserProjectQuery {
	query := (&ProjectClient{config: upq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	upq.withProject = query
	return upq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID int `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserProject.Query().
//		GroupBy(userproject.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (upq *UserProjectQuery) GroupBy(field string, fields ...string) *UserProjectGroupBy {
	upq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserProjectGroupBy{build: upq}
	grbuild.flds = &upq.ctx.Fields
	grbuild.label = userproject.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID int `json:"project_id,omitempty"`
//	}
//
//	client.UserProject.Query().
//		Select(userproject.FieldProjectID).
//		Scan(ctx, &v)
func (upq *UserProjectQuery) Select(fields ...string) *UserProjectSelect {
	upq.ctx.Fields = append(upq.ctx.Fields, fields...)
	sbuild := &UserProjectSelect{UserProjectQuery: upq}
	sbuild.label = userproject.Label
	sbuild.flds, sbuild.scan = &upq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserProjectSelect configured with the given aggregations.
func (upq *UserProjectQuery) Aggregate(fns ...AggregateFunc) *UserProjectSelect {
	return upq.Select().Aggregate(fns...)
}

func (upq *UserProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range upq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, upq); err != nil {
				return err
			}
		}
	}
	for _, f := range upq.ctx.Fields {
		if !userproject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if upq.path != nil {
		prev, err := upq.path(ctx)
		if err != nil {
			return err
		}
		upq.sql = prev
	}
	return nil
}

func (upq *UserProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserProject, error) {
	var (
		nodes       = []*UserProject{}
		_spec       = upq.querySpec()
		loadedTypes = [1]bool{
			upq.withProject != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserProject).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserProject{config: upq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(upq.modifiers) > 0 {
		_spec.Modifiers = upq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, upq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := upq.withProject; query != nil {
		if err := upq.loadProject(ctx, query, nodes, nil,
			func(n *UserProject, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (upq *UserProjectQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*UserProject, init func(*UserProject), assign func(*UserProject, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserProject)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (upq *UserProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := upq.querySpec()
	if len(upq.modifiers) > 0 {
		_spec.Modifiers = upq.modifiers
	}
	_spec.Node.Columns = upq.ctx.Fields
	if len(upq.ctx.Fields) > 0 {
		_spec.Unique = upq.ctx.Unique != nil && *upq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, upq.driver, _spec)
}

func (upq *UserProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	_spec.From = upq.sql
	if unique := upq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if upq.path != nil {
		_spec.Unique = true
	}
	if fields := upq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userproject.FieldID)
		for i := range fields {
			if fields[i] != userproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if upq.withProject != nil {
			_spec.Node.AddColumnOnce(userproject.FieldProjectID)
		}
	}
	if ps := upq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := upq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := upq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := upq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (upq *UserProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(upq.driver.Dialect())
	t1 := builder.Table(userproject.Table)
	columns := upq.ctx.Fields
	if len(columns) == 0 {
		columns = userproject.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if upq.sql != nil {
		selector = upq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if upq.ctx.Unique != nil && *upq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range upq.modifiers {
		m(selector)
	}
	for _, p := range upq.predicates {
		p(selector)
	}
	for _, p := range upq.order {
		p(selector)
	}
	if offset := upq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := upq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (upq *UserProjectQuery) Modify(modifiers ...func(s *sql.Selector)) *UserProjectSelect {
	upq.modifiers = append(upq.modifiers, modifiers...)
	return upq.Select()
}

// UserProjectGroupBy is the group-by builder for UserProject entities.
type UserProjectGroupBy struct {
	selector
	build *UserProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (upgb *UserProjectGroupBy) Aggregate(fns ...AggregateFunc) *UserProjectGroupBy {
	upgb.fns = append(upgb.fns, fns...)
	return upgb
}

// Scan applies the selector query and scans the result into the given value.
func (upgb *UserProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, upgb.build.ctx, ent.OpQueryGroupBy)
	if err := upgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserProjectQuery, *UserProjectGroupBy](ctx, upgb.build, upgb, upgb.build.inters, v)
}

func (upgb *UserProjectGroupBy) sqlScan(ctx context.Context, root *UserProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(upgb.fns))
	for _, fn := range upgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*upgb.flds)+len(upgb.fns))
		for _, f := range *upgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*upgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := upgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserProjectSelect is the builder for selecting fields of UserProject entities.
type UserProjectSelect struct {
	*UserProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ups *UserProjectSelect) Aggregate(fns ...AggregateFunc) *UserProjectSelect {
	ups.fns = append(ups.fns, fns...)
	return ups
}

// Scan applies the selector query and scans the result into the given value.
func (ups *UserProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ups.ctx, ent.OpQuerySelect)
	if err := ups.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserProjectQuery, *UserProjectSelect](ctx, ups.UserProjectQuery, ups, ups.inters, v)
}

func (ups *UserProjectSelect) sqlScan(ctx context.Context, root *UserProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ups.fns))
	for _, fn := range ups.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ups.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ups.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ups *UserProjectSelect) Modify(modifiers ...func(s *sql.Selector)) *UserProjectSelect {
	ups.modifiers = append(ups.modifiers, modifiers...)
	return ups
}
