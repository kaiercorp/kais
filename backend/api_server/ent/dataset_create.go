// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/dataset"
	"api_server/ent/datasetroot"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DatasetCreate is the builder for creating a Dataset entity.
type DatasetCreate struct {
	config
	mutation *DatasetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dc *DatasetCreate) SetName(s string) *DatasetCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetParentID sets the "parent_id" field.
func (dc *DatasetCreate) SetParentID(i int) *DatasetCreate {
	dc.mutation.SetParentID(i)
	return dc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableParentID(i *int) *DatasetCreate {
	if i != nil {
		dc.SetParentID(*i)
	}
	return dc
}

// SetDescription sets the "description" field.
func (dc *DatasetCreate) SetDescription(s string) *DatasetCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableDescription(s *string) *DatasetCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetPath sets the "path" field.
func (dc *DatasetCreate) SetPath(s string) *DatasetCreate {
	dc.mutation.SetPath(s)
	return dc
}

// SetIsValid sets the "is_valid" field.
func (dc *DatasetCreate) SetIsValid(b bool) *DatasetCreate {
	dc.mutation.SetIsValid(b)
	return dc
}

// SetNillableIsValid sets the "is_valid" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsValid(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsValid(*b)
	}
	return dc
}

// SetIsTrainable sets the "is_trainable" field.
func (dc *DatasetCreate) SetIsTrainable(b bool) *DatasetCreate {
	dc.mutation.SetIsTrainable(b)
	return dc
}

// SetNillableIsTrainable sets the "is_trainable" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsTrainable(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsTrainable(*b)
	}
	return dc
}

// SetIsTestable sets the "is_testable" field.
func (dc *DatasetCreate) SetIsTestable(b bool) *DatasetCreate {
	dc.mutation.SetIsTestable(b)
	return dc
}

// SetNillableIsTestable sets the "is_testable" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsTestable(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsTestable(*b)
	}
	return dc
}

// SetIsLeaf sets the "is_leaf" field.
func (dc *DatasetCreate) SetIsLeaf(b bool) *DatasetCreate {
	dc.mutation.SetIsLeaf(b)
	return dc
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsLeaf(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsLeaf(*b)
	}
	return dc
}

// SetIsDeleted sets the "is_deleted" field.
func (dc *DatasetCreate) SetIsDeleted(b bool) *DatasetCreate {
	dc.mutation.SetIsDeleted(b)
	return dc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsDeleted(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsDeleted(*b)
	}
	return dc
}

// SetIsUse sets the "is_use" field.
func (dc *DatasetCreate) SetIsUse(b bool) *DatasetCreate {
	dc.mutation.SetIsUse(b)
	return dc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableIsUse(b *bool) *DatasetCreate {
	if b != nil {
		dc.SetIsUse(*b)
	}
	return dc
}

// SetStat sets the "stat" field.
func (dc *DatasetCreate) SetStat(s []string) *DatasetCreate {
	dc.mutation.SetStat(s)
	return dc
}

// SetStatPath sets the "stat_path" field.
func (dc *DatasetCreate) SetStatPath(s string) *DatasetCreate {
	dc.mutation.SetStatPath(s)
	return dc
}

// SetNillableStatPath sets the "stat_path" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableStatPath(s *string) *DatasetCreate {
	if s != nil {
		dc.SetStatPath(*s)
	}
	return dc
}

// SetEngine sets the "engine" field.
func (dc *DatasetCreate) SetEngine(s []string) *DatasetCreate {
	dc.mutation.SetEngine(s)
	return dc
}

// SetDataType sets the "data_type" field.
func (dc *DatasetCreate) SetDataType(s string) *DatasetCreate {
	dc.mutation.SetDataType(s)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DatasetCreate) SetCreatedAt(t time.Time) *DatasetCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableCreatedAt(t *time.Time) *DatasetCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DatasetCreate) SetUpdatedAt(t time.Time) *DatasetCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableUpdatedAt(t *time.Time) *DatasetCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DatasetCreate) SetDeletedAt(t time.Time) *DatasetCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableDeletedAt(t *time.Time) *DatasetCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetDrID sets the "dr_id" field.
func (dc *DatasetCreate) SetDrID(i int) *DatasetCreate {
	dc.mutation.SetDrID(i)
	return dc
}

// SetNillableDrID sets the "dr_id" field if the given value is not nil.
func (dc *DatasetCreate) SetNillableDrID(i *int) *DatasetCreate {
	if i != nil {
		dc.SetDrID(*i)
	}
	return dc
}

// SetDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID.
func (dc *DatasetCreate) SetDatasetrootID(id int) *DatasetCreate {
	dc.mutation.SetDatasetrootID(id)
	return dc
}

// SetNillableDatasetrootID sets the "datasetroot" edge to the DatasetRoot entity by ID if the given value is not nil.
func (dc *DatasetCreate) SetNillableDatasetrootID(id *int) *DatasetCreate {
	if id != nil {
		dc = dc.SetDatasetrootID(*id)
	}
	return dc
}

// SetDatasetroot sets the "datasetroot" edge to the DatasetRoot entity.
func (dc *DatasetCreate) SetDatasetroot(d *DatasetRoot) *DatasetCreate {
	return dc.SetDatasetrootID(d.ID)
}

// Mutation returns the DatasetMutation object of the builder.
func (dc *DatasetCreate) Mutation() *DatasetMutation {
	return dc.mutation
}

// Save creates the Dataset in the database.
func (dc *DatasetCreate) Save(ctx context.Context) (*Dataset, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DatasetCreate) SaveX(ctx context.Context) *Dataset {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DatasetCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DatasetCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DatasetCreate) defaults() {
	if _, ok := dc.mutation.IsValid(); !ok {
		v := dataset.DefaultIsValid
		dc.mutation.SetIsValid(v)
	}
	if _, ok := dc.mutation.IsTrainable(); !ok {
		v := dataset.DefaultIsTrainable
		dc.mutation.SetIsTrainable(v)
	}
	if _, ok := dc.mutation.IsTestable(); !ok {
		v := dataset.DefaultIsTestable
		dc.mutation.SetIsTestable(v)
	}
	if _, ok := dc.mutation.IsLeaf(); !ok {
		v := dataset.DefaultIsLeaf
		dc.mutation.SetIsLeaf(v)
	}
	if _, ok := dc.mutation.IsDeleted(); !ok {
		v := dataset.DefaultIsDeleted
		dc.mutation.SetIsDeleted(v)
	}
	if _, ok := dc.mutation.IsUse(); !ok {
		v := dataset.DefaultIsUse
		dc.mutation.SetIsUse(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := dataset.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := dataset.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		v := dataset.DefaultDeletedAt()
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.DrID(); !ok {
		v := dataset.DefaultDrID
		dc.mutation.SetDrID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DatasetCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Dataset.name"`)}
	}
	if _, ok := dc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Dataset.path"`)}
	}
	if _, ok := dc.mutation.IsValid(); !ok {
		return &ValidationError{Name: "is_valid", err: errors.New(`ent: missing required field "Dataset.is_valid"`)}
	}
	if _, ok := dc.mutation.IsTrainable(); !ok {
		return &ValidationError{Name: "is_trainable", err: errors.New(`ent: missing required field "Dataset.is_trainable"`)}
	}
	if _, ok := dc.mutation.IsTestable(); !ok {
		return &ValidationError{Name: "is_testable", err: errors.New(`ent: missing required field "Dataset.is_testable"`)}
	}
	if _, ok := dc.mutation.IsLeaf(); !ok {
		return &ValidationError{Name: "is_leaf", err: errors.New(`ent: missing required field "Dataset.is_leaf"`)}
	}
	if _, ok := dc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Dataset.is_deleted"`)}
	}
	if _, ok := dc.mutation.IsUse(); !ok {
		return &ValidationError{Name: "is_use", err: errors.New(`ent: missing required field "Dataset.is_use"`)}
	}
	if _, ok := dc.mutation.Stat(); !ok {
		return &ValidationError{Name: "stat", err: errors.New(`ent: missing required field "Dataset.stat"`)}
	}
	if _, ok := dc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "Dataset.data_type"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dataset.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dataset.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Dataset.deleted_at"`)}
	}
	return nil
}

func (dc *DatasetCreate) sqlSave(ctx context.Context) (*Dataset, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DatasetCreate) createSpec() (*Dataset, *sqlgraph.CreateSpec) {
	var (
		_node = &Dataset{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dataset.Table, sqlgraph.NewFieldSpec(dataset.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.ParentID(); ok {
		_spec.SetField(dataset.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(dataset.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.Path(); ok {
		_spec.SetField(dataset.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := dc.mutation.IsValid(); ok {
		_spec.SetField(dataset.FieldIsValid, field.TypeBool, value)
		_node.IsValid = value
	}
	if value, ok := dc.mutation.IsTrainable(); ok {
		_spec.SetField(dataset.FieldIsTrainable, field.TypeBool, value)
		_node.IsTrainable = value
	}
	if value, ok := dc.mutation.IsTestable(); ok {
		_spec.SetField(dataset.FieldIsTestable, field.TypeBool, value)
		_node.IsTestable = value
	}
	if value, ok := dc.mutation.IsLeaf(); ok {
		_spec.SetField(dataset.FieldIsLeaf, field.TypeBool, value)
		_node.IsLeaf = value
	}
	if value, ok := dc.mutation.IsDeleted(); ok {
		_spec.SetField(dataset.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := dc.mutation.IsUse(); ok {
		_spec.SetField(dataset.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	if value, ok := dc.mutation.Stat(); ok {
		_spec.SetField(dataset.FieldStat, field.TypeJSON, value)
		_node.Stat = value
	}
	if value, ok := dc.mutation.StatPath(); ok {
		_spec.SetField(dataset.FieldStatPath, field.TypeString, value)
		_node.StatPath = value
	}
	if value, ok := dc.mutation.Engine(); ok {
		_spec.SetField(dataset.FieldEngine, field.TypeJSON, value)
		_node.Engine = value
	}
	if value, ok := dc.mutation.DataType(); ok {
		_spec.SetField(dataset.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(dataset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(dataset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(dataset.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.DrID(); ok {
		_spec.SetField(dataset.FieldDrID, field.TypeInt, value)
		_node.DrID = value
	}
	if nodes := dc.mutation.DatasetrootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.DatasetrootTable,
			Columns: []string{dataset.DatasetrootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(datasetroot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dataset_root_datasets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dataset.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DatasetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dc *DatasetCreate) OnConflict(opts ...sql.ConflictOption) *DatasetUpsertOne {
	dc.conflict = opts
	return &DatasetUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dataset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DatasetCreate) OnConflictColumns(columns ...string) *DatasetUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DatasetUpsertOne{
		create: dc,
	}
}

type (
	// DatasetUpsertOne is the builder for "upsert"-ing
	//  one Dataset node.
	DatasetUpsertOne struct {
		create *DatasetCreate
	}

	// DatasetUpsert is the "OnConflict" setter.
	DatasetUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DatasetUpsert) SetName(v string) *DatasetUpsert {
	u.Set(dataset.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateName() *DatasetUpsert {
	u.SetExcluded(dataset.FieldName)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *DatasetUpsert) SetParentID(v int) *DatasetUpsert {
	u.Set(dataset.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateParentID() *DatasetUpsert {
	u.SetExcluded(dataset.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *DatasetUpsert) AddParentID(v int) *DatasetUpsert {
	u.Add(dataset.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DatasetUpsert) ClearParentID() *DatasetUpsert {
	u.SetNull(dataset.FieldParentID)
	return u
}

// SetDescription sets the "description" field.
func (u *DatasetUpsert) SetDescription(v string) *DatasetUpsert {
	u.Set(dataset.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateDescription() *DatasetUpsert {
	u.SetExcluded(dataset.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DatasetUpsert) ClearDescription() *DatasetUpsert {
	u.SetNull(dataset.FieldDescription)
	return u
}

// SetPath sets the "path" field.
func (u *DatasetUpsert) SetPath(v string) *DatasetUpsert {
	u.Set(dataset.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetUpsert) UpdatePath() *DatasetUpsert {
	u.SetExcluded(dataset.FieldPath)
	return u
}

// SetIsValid sets the "is_valid" field.
func (u *DatasetUpsert) SetIsValid(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsValid, v)
	return u
}

// UpdateIsValid sets the "is_valid" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsValid() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsValid)
	return u
}

// SetIsTrainable sets the "is_trainable" field.
func (u *DatasetUpsert) SetIsTrainable(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsTrainable, v)
	return u
}

// UpdateIsTrainable sets the "is_trainable" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsTrainable() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsTrainable)
	return u
}

// SetIsTestable sets the "is_testable" field.
func (u *DatasetUpsert) SetIsTestable(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsTestable, v)
	return u
}

// UpdateIsTestable sets the "is_testable" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsTestable() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsTestable)
	return u
}

// SetIsLeaf sets the "is_leaf" field.
func (u *DatasetUpsert) SetIsLeaf(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsLeaf, v)
	return u
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsLeaf() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsLeaf)
	return u
}

// SetIsDeleted sets the "is_deleted" field.
func (u *DatasetUpsert) SetIsDeleted(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsDeleted, v)
	return u
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsDeleted() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsDeleted)
	return u
}

// SetIsUse sets the "is_use" field.
func (u *DatasetUpsert) SetIsUse(v bool) *DatasetUpsert {
	u.Set(dataset.FieldIsUse, v)
	return u
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateIsUse() *DatasetUpsert {
	u.SetExcluded(dataset.FieldIsUse)
	return u
}

// SetStat sets the "stat" field.
func (u *DatasetUpsert) SetStat(v []string) *DatasetUpsert {
	u.Set(dataset.FieldStat, v)
	return u
}

// UpdateStat sets the "stat" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateStat() *DatasetUpsert {
	u.SetExcluded(dataset.FieldStat)
	return u
}

// SetStatPath sets the "stat_path" field.
func (u *DatasetUpsert) SetStatPath(v string) *DatasetUpsert {
	u.Set(dataset.FieldStatPath, v)
	return u
}

// UpdateStatPath sets the "stat_path" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateStatPath() *DatasetUpsert {
	u.SetExcluded(dataset.FieldStatPath)
	return u
}

// ClearStatPath clears the value of the "stat_path" field.
func (u *DatasetUpsert) ClearStatPath() *DatasetUpsert {
	u.SetNull(dataset.FieldStatPath)
	return u
}

// SetEngine sets the "engine" field.
func (u *DatasetUpsert) SetEngine(v []string) *DatasetUpsert {
	u.Set(dataset.FieldEngine, v)
	return u
}

// UpdateEngine sets the "engine" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateEngine() *DatasetUpsert {
	u.SetExcluded(dataset.FieldEngine)
	return u
}

// ClearEngine clears the value of the "engine" field.
func (u *DatasetUpsert) ClearEngine() *DatasetUpsert {
	u.SetNull(dataset.FieldEngine)
	return u
}

// SetDataType sets the "data_type" field.
func (u *DatasetUpsert) SetDataType(v string) *DatasetUpsert {
	u.Set(dataset.FieldDataType, v)
	return u
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateDataType() *DatasetUpsert {
	u.SetExcluded(dataset.FieldDataType)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DatasetUpsert) SetCreatedAt(v time.Time) *DatasetUpsert {
	u.Set(dataset.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateCreatedAt() *DatasetUpsert {
	u.SetExcluded(dataset.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DatasetUpsert) SetUpdatedAt(v time.Time) *DatasetUpsert {
	u.Set(dataset.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateUpdatedAt() *DatasetUpsert {
	u.SetExcluded(dataset.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DatasetUpsert) SetDeletedAt(v time.Time) *DatasetUpsert {
	u.Set(dataset.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateDeletedAt() *DatasetUpsert {
	u.SetExcluded(dataset.FieldDeletedAt)
	return u
}

// SetDrID sets the "dr_id" field.
func (u *DatasetUpsert) SetDrID(v int) *DatasetUpsert {
	u.Set(dataset.FieldDrID, v)
	return u
}

// UpdateDrID sets the "dr_id" field to the value that was provided on create.
func (u *DatasetUpsert) UpdateDrID() *DatasetUpsert {
	u.SetExcluded(dataset.FieldDrID)
	return u
}

// AddDrID adds v to the "dr_id" field.
func (u *DatasetUpsert) AddDrID(v int) *DatasetUpsert {
	u.Add(dataset.FieldDrID, v)
	return u
}

// ClearDrID clears the value of the "dr_id" field.
func (u *DatasetUpsert) ClearDrID() *DatasetUpsert {
	u.SetNull(dataset.FieldDrID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Dataset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DatasetUpsertOne) UpdateNewValues() *DatasetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dataset.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DatasetUpsertOne) Ignore() *DatasetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DatasetUpsertOne) DoNothing() *DatasetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DatasetCreate.OnConflict
// documentation for more info.
func (u *DatasetUpsertOne) Update(set func(*DatasetUpsert)) *DatasetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DatasetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DatasetUpsertOne) SetName(v string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateName() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *DatasetUpsertOne) SetParentID(v int) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *DatasetUpsertOne) AddParentID(v int) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateParentID() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DatasetUpsertOne) ClearParentID() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearParentID()
	})
}

// SetDescription sets the "description" field.
func (u *DatasetUpsertOne) SetDescription(v string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateDescription() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DatasetUpsertOne) ClearDescription() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearDescription()
	})
}

// SetPath sets the "path" field.
func (u *DatasetUpsertOne) SetPath(v string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdatePath() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdatePath()
	})
}

// SetIsValid sets the "is_valid" field.
func (u *DatasetUpsertOne) SetIsValid(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsValid(v)
	})
}

// UpdateIsValid sets the "is_valid" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsValid() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsValid()
	})
}

// SetIsTrainable sets the "is_trainable" field.
func (u *DatasetUpsertOne) SetIsTrainable(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsTrainable(v)
	})
}

// UpdateIsTrainable sets the "is_trainable" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsTrainable() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsTrainable()
	})
}

// SetIsTestable sets the "is_testable" field.
func (u *DatasetUpsertOne) SetIsTestable(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsTestable(v)
	})
}

// UpdateIsTestable sets the "is_testable" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsTestable() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsTestable()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *DatasetUpsertOne) SetIsLeaf(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsLeaf() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsLeaf()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *DatasetUpsertOne) SetIsDeleted(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsDeleted() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetIsUse sets the "is_use" field.
func (u *DatasetUpsertOne) SetIsUse(v bool) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateIsUse() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsUse()
	})
}

// SetStat sets the "stat" field.
func (u *DatasetUpsertOne) SetStat(v []string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetStat(v)
	})
}

// UpdateStat sets the "stat" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateStat() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateStat()
	})
}

// SetStatPath sets the "stat_path" field.
func (u *DatasetUpsertOne) SetStatPath(v string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetStatPath(v)
	})
}

// UpdateStatPath sets the "stat_path" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateStatPath() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateStatPath()
	})
}

// ClearStatPath clears the value of the "stat_path" field.
func (u *DatasetUpsertOne) ClearStatPath() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearStatPath()
	})
}

// SetEngine sets the "engine" field.
func (u *DatasetUpsertOne) SetEngine(v []string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetEngine(v)
	})
}

// UpdateEngine sets the "engine" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateEngine() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateEngine()
	})
}

// ClearEngine clears the value of the "engine" field.
func (u *DatasetUpsertOne) ClearEngine() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearEngine()
	})
}

// SetDataType sets the "data_type" field.
func (u *DatasetUpsertOne) SetDataType(v string) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateDataType() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDataType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DatasetUpsertOne) SetCreatedAt(v time.Time) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateCreatedAt() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DatasetUpsertOne) SetUpdatedAt(v time.Time) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateUpdatedAt() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DatasetUpsertOne) SetDeletedAt(v time.Time) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateDeletedAt() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDrID sets the "dr_id" field.
func (u *DatasetUpsertOne) SetDrID(v int) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDrID(v)
	})
}

// AddDrID adds v to the "dr_id" field.
func (u *DatasetUpsertOne) AddDrID(v int) *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.AddDrID(v)
	})
}

// UpdateDrID sets the "dr_id" field to the value that was provided on create.
func (u *DatasetUpsertOne) UpdateDrID() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDrID()
	})
}

// ClearDrID clears the value of the "dr_id" field.
func (u *DatasetUpsertOne) ClearDrID() *DatasetUpsertOne {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearDrID()
	})
}

// Exec executes the query.
func (u *DatasetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DatasetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DatasetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DatasetUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DatasetUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DatasetCreateBulk is the builder for creating many Dataset entities in bulk.
type DatasetCreateBulk struct {
	config
	err      error
	builders []*DatasetCreate
	conflict []sql.ConflictOption
}

// Save creates the Dataset entities in the database.
func (dcb *DatasetCreateBulk) Save(ctx context.Context) ([]*Dataset, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dataset, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatasetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DatasetCreateBulk) SaveX(ctx context.Context) []*Dataset {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DatasetCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DatasetCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dataset.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DatasetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DatasetCreateBulk) OnConflict(opts ...sql.ConflictOption) *DatasetUpsertBulk {
	dcb.conflict = opts
	return &DatasetUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dataset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DatasetCreateBulk) OnConflictColumns(columns ...string) *DatasetUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DatasetUpsertBulk{
		create: dcb,
	}
}

// DatasetUpsertBulk is the builder for "upsert"-ing
// a bulk of Dataset nodes.
type DatasetUpsertBulk struct {
	create *DatasetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Dataset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DatasetUpsertBulk) UpdateNewValues() *DatasetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dataset.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DatasetUpsertBulk) Ignore() *DatasetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DatasetUpsertBulk) DoNothing() *DatasetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DatasetCreateBulk.OnConflict
// documentation for more info.
func (u *DatasetUpsertBulk) Update(set func(*DatasetUpsert)) *DatasetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DatasetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DatasetUpsertBulk) SetName(v string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateName() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateName()
	})
}

// SetParentID sets the "parent_id" field.
func (u *DatasetUpsertBulk) SetParentID(v int) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *DatasetUpsertBulk) AddParentID(v int) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateParentID() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *DatasetUpsertBulk) ClearParentID() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearParentID()
	})
}

// SetDescription sets the "description" field.
func (u *DatasetUpsertBulk) SetDescription(v string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateDescription() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DatasetUpsertBulk) ClearDescription() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearDescription()
	})
}

// SetPath sets the "path" field.
func (u *DatasetUpsertBulk) SetPath(v string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdatePath() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdatePath()
	})
}

// SetIsValid sets the "is_valid" field.
func (u *DatasetUpsertBulk) SetIsValid(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsValid(v)
	})
}

// UpdateIsValid sets the "is_valid" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsValid() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsValid()
	})
}

// SetIsTrainable sets the "is_trainable" field.
func (u *DatasetUpsertBulk) SetIsTrainable(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsTrainable(v)
	})
}

// UpdateIsTrainable sets the "is_trainable" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsTrainable() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsTrainable()
	})
}

// SetIsTestable sets the "is_testable" field.
func (u *DatasetUpsertBulk) SetIsTestable(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsTestable(v)
	})
}

// UpdateIsTestable sets the "is_testable" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsTestable() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsTestable()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *DatasetUpsertBulk) SetIsLeaf(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsLeaf() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsLeaf()
	})
}

// SetIsDeleted sets the "is_deleted" field.
func (u *DatasetUpsertBulk) SetIsDeleted(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsDeleted(v)
	})
}

// UpdateIsDeleted sets the "is_deleted" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsDeleted() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsDeleted()
	})
}

// SetIsUse sets the "is_use" field.
func (u *DatasetUpsertBulk) SetIsUse(v bool) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateIsUse() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateIsUse()
	})
}

// SetStat sets the "stat" field.
func (u *DatasetUpsertBulk) SetStat(v []string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetStat(v)
	})
}

// UpdateStat sets the "stat" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateStat() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateStat()
	})
}

// SetStatPath sets the "stat_path" field.
func (u *DatasetUpsertBulk) SetStatPath(v string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetStatPath(v)
	})
}

// UpdateStatPath sets the "stat_path" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateStatPath() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateStatPath()
	})
}

// ClearStatPath clears the value of the "stat_path" field.
func (u *DatasetUpsertBulk) ClearStatPath() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearStatPath()
	})
}

// SetEngine sets the "engine" field.
func (u *DatasetUpsertBulk) SetEngine(v []string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetEngine(v)
	})
}

// UpdateEngine sets the "engine" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateEngine() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateEngine()
	})
}

// ClearEngine clears the value of the "engine" field.
func (u *DatasetUpsertBulk) ClearEngine() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearEngine()
	})
}

// SetDataType sets the "data_type" field.
func (u *DatasetUpsertBulk) SetDataType(v string) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateDataType() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDataType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DatasetUpsertBulk) SetCreatedAt(v time.Time) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateCreatedAt() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DatasetUpsertBulk) SetUpdatedAt(v time.Time) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateUpdatedAt() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DatasetUpsertBulk) SetDeletedAt(v time.Time) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateDeletedAt() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetDrID sets the "dr_id" field.
func (u *DatasetUpsertBulk) SetDrID(v int) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.SetDrID(v)
	})
}

// AddDrID adds v to the "dr_id" field.
func (u *DatasetUpsertBulk) AddDrID(v int) *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.AddDrID(v)
	})
}

// UpdateDrID sets the "dr_id" field to the value that was provided on create.
func (u *DatasetUpsertBulk) UpdateDrID() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.UpdateDrID()
	})
}

// ClearDrID clears the value of the "dr_id" field.
func (u *DatasetUpsertBulk) ClearDrID() *DatasetUpsertBulk {
	return u.Update(func(s *DatasetUpsert) {
		s.ClearDrID()
	})
}

// Exec executes the query.
func (u *DatasetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DatasetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DatasetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DatasetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
