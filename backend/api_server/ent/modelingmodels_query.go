// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingmodels"
	"api_server/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModelingModelsQuery is the builder for querying ModelingModels entities.
type ModelingModelsQuery struct {
	config
	ctx          *QueryContext
	order        []modelingmodels.OrderOption
	inters       []Interceptor
	predicates   []predicate.ModelingModels
	withModeling *ModelingQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ModelingModelsQuery builder.
func (mmq *ModelingModelsQuery) Where(ps ...predicate.ModelingModels) *ModelingModelsQuery {
	mmq.predicates = append(mmq.predicates, ps...)
	return mmq
}

// Limit the number of records to be returned by this query.
func (mmq *ModelingModelsQuery) Limit(limit int) *ModelingModelsQuery {
	mmq.ctx.Limit = &limit
	return mmq
}

// Offset to start from.
func (mmq *ModelingModelsQuery) Offset(offset int) *ModelingModelsQuery {
	mmq.ctx.Offset = &offset
	return mmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mmq *ModelingModelsQuery) Unique(unique bool) *ModelingModelsQuery {
	mmq.ctx.Unique = &unique
	return mmq
}

// Order specifies how the records should be ordered.
func (mmq *ModelingModelsQuery) Order(o ...modelingmodels.OrderOption) *ModelingModelsQuery {
	mmq.order = append(mmq.order, o...)
	return mmq
}

// QueryModeling chains the current query on the "modeling" edge.
func (mmq *ModelingModelsQuery) QueryModeling() *ModelingQuery {
	query := (&ModelingClient{config: mmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(modelingmodels.Table, modelingmodels.FieldID, selector),
			sqlgraph.To(modeling.Table, modeling.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, modelingmodels.ModelingTable, modelingmodels.ModelingColumn),
		)
		fromU = sqlgraph.SetNeighbors(mmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ModelingModels entity from the query.
// Returns a *NotFoundError when no ModelingModels was found.
func (mmq *ModelingModelsQuery) First(ctx context.Context) (*ModelingModels, error) {
	nodes, err := mmq.Limit(1).All(setContextOp(ctx, mmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{modelingmodels.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mmq *ModelingModelsQuery) FirstX(ctx context.Context) *ModelingModels {
	node, err := mmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ModelingModels ID from the query.
// Returns a *NotFoundError when no ModelingModels ID was found.
func (mmq *ModelingModelsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mmq.Limit(1).IDs(setContextOp(ctx, mmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{modelingmodels.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mmq *ModelingModelsQuery) FirstIDX(ctx context.Context) int {
	id, err := mmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ModelingModels entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ModelingModels entity is found.
// Returns a *NotFoundError when no ModelingModels entities are found.
func (mmq *ModelingModelsQuery) Only(ctx context.Context) (*ModelingModels, error) {
	nodes, err := mmq.Limit(2).All(setContextOp(ctx, mmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{modelingmodels.Label}
	default:
		return nil, &NotSingularError{modelingmodels.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mmq *ModelingModelsQuery) OnlyX(ctx context.Context) *ModelingModels {
	node, err := mmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ModelingModels ID in the query.
// Returns a *NotSingularError when more than one ModelingModels ID is found.
// Returns a *NotFoundError when no entities are found.
func (mmq *ModelingModelsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mmq.Limit(2).IDs(setContextOp(ctx, mmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{modelingmodels.Label}
	default:
		err = &NotSingularError{modelingmodels.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mmq *ModelingModelsQuery) OnlyIDX(ctx context.Context) int {
	id, err := mmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ModelingModelsSlice.
func (mmq *ModelingModelsQuery) All(ctx context.Context) ([]*ModelingModels, error) {
	ctx = setContextOp(ctx, mmq.ctx, "All")
	if err := mmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ModelingModels, *ModelingModelsQuery]()
	return withInterceptors[[]*ModelingModels](ctx, mmq, qr, mmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mmq *ModelingModelsQuery) AllX(ctx context.Context) []*ModelingModels {
	nodes, err := mmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ModelingModels IDs.
func (mmq *ModelingModelsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mmq.ctx.Unique == nil && mmq.path != nil {
		mmq.Unique(true)
	}
	ctx = setContextOp(ctx, mmq.ctx, "IDs")
	if err = mmq.Select(modelingmodels.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mmq *ModelingModelsQuery) IDsX(ctx context.Context) []int {
	ids, err := mmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mmq *ModelingModelsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mmq.ctx, "Count")
	if err := mmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mmq, querierCount[*ModelingModelsQuery](), mmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mmq *ModelingModelsQuery) CountX(ctx context.Context) int {
	count, err := mmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mmq *ModelingModelsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mmq.ctx, "Exist")
	switch _, err := mmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mmq *ModelingModelsQuery) ExistX(ctx context.Context) bool {
	exist, err := mmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ModelingModelsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mmq *ModelingModelsQuery) Clone() *ModelingModelsQuery {
	if mmq == nil {
		return nil
	}
	return &ModelingModelsQuery{
		config:       mmq.config,
		ctx:          mmq.ctx.Clone(),
		order:        append([]modelingmodels.OrderOption{}, mmq.order...),
		inters:       append([]Interceptor{}, mmq.inters...),
		predicates:   append([]predicate.ModelingModels{}, mmq.predicates...),
		withModeling: mmq.withModeling.Clone(),
		// clone intermediate query.
		sql:  mmq.sql.Clone(),
		path: mmq.path,
	}
}

// WithModeling tells the query-builder to eager-load the nodes that are connected to
// the "modeling" edge. The optional arguments are used to configure the query builder of the edge.
func (mmq *ModelingModelsQuery) WithModeling(opts ...func(*ModelingQuery)) *ModelingModelsQuery {
	query := (&ModelingClient{config: mmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mmq.withModeling = query
	return mmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ModelingID int `json:"modeling_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ModelingModels.Query().
//		GroupBy(modelingmodels.FieldModelingID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mmq *ModelingModelsQuery) GroupBy(field string, fields ...string) *ModelingModelsGroupBy {
	mmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ModelingModelsGroupBy{build: mmq}
	grbuild.flds = &mmq.ctx.Fields
	grbuild.label = modelingmodels.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ModelingID int `json:"modeling_id,omitempty"`
//	}
//
//	client.ModelingModels.Query().
//		Select(modelingmodels.FieldModelingID).
//		Scan(ctx, &v)
func (mmq *ModelingModelsQuery) Select(fields ...string) *ModelingModelsSelect {
	mmq.ctx.Fields = append(mmq.ctx.Fields, fields...)
	sbuild := &ModelingModelsSelect{ModelingModelsQuery: mmq}
	sbuild.label = modelingmodels.Label
	sbuild.flds, sbuild.scan = &mmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ModelingModelsSelect configured with the given aggregations.
func (mmq *ModelingModelsQuery) Aggregate(fns ...AggregateFunc) *ModelingModelsSelect {
	return mmq.Select().Aggregate(fns...)
}

func (mmq *ModelingModelsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mmq); err != nil {
				return err
			}
		}
	}
	for _, f := range mmq.ctx.Fields {
		if !modelingmodels.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mmq.path != nil {
		prev, err := mmq.path(ctx)
		if err != nil {
			return err
		}
		mmq.sql = prev
	}
	return nil
}

func (mmq *ModelingModelsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ModelingModels, error) {
	var (
		nodes       = []*ModelingModels{}
		_spec       = mmq.querySpec()
		loadedTypes = [1]bool{
			mmq.withModeling != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ModelingModels).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ModelingModels{config: mmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mmq.modifiers) > 0 {
		_spec.Modifiers = mmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mmq.withModeling; query != nil {
		if err := mmq.loadModeling(ctx, query, nodes, nil,
			func(n *ModelingModels, e *Modeling) { n.Edges.Modeling = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mmq *ModelingModelsQuery) loadModeling(ctx context.Context, query *ModelingQuery, nodes []*ModelingModels, init func(*ModelingModels), assign func(*ModelingModels, *Modeling)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ModelingModels)
	for i := range nodes {
		fk := nodes[i].ModelingID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(modeling.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "modeling_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mmq *ModelingModelsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mmq.querySpec()
	if len(mmq.modifiers) > 0 {
		_spec.Modifiers = mmq.modifiers
	}
	_spec.Node.Columns = mmq.ctx.Fields
	if len(mmq.ctx.Fields) > 0 {
		_spec.Unique = mmq.ctx.Unique != nil && *mmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mmq.driver, _spec)
}

func (mmq *ModelingModelsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(modelingmodels.Table, modelingmodels.Columns, sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt))
	_spec.From = mmq.sql
	if unique := mmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mmq.path != nil {
		_spec.Unique = true
	}
	if fields := mmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modelingmodels.FieldID)
		for i := range fields {
			if fields[i] != modelingmodels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mmq.withModeling != nil {
			_spec.Node.AddColumnOnce(modelingmodels.FieldModelingID)
		}
	}
	if ps := mmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mmq *ModelingModelsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mmq.driver.Dialect())
	t1 := builder.Table(modelingmodels.Table)
	columns := mmq.ctx.Fields
	if len(columns) == 0 {
		columns = modelingmodels.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mmq.sql != nil {
		selector = mmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mmq.ctx.Unique != nil && *mmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mmq.modifiers {
		m(selector)
	}
	for _, p := range mmq.predicates {
		p(selector)
	}
	for _, p := range mmq.order {
		p(selector)
	}
	if offset := mmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mmq *ModelingModelsQuery) Modify(modifiers ...func(s *sql.Selector)) *ModelingModelsSelect {
	mmq.modifiers = append(mmq.modifiers, modifiers...)
	return mmq.Select()
}

// ModelingModelsGroupBy is the group-by builder for ModelingModels entities.
type ModelingModelsGroupBy struct {
	selector
	build *ModelingModelsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mmgb *ModelingModelsGroupBy) Aggregate(fns ...AggregateFunc) *ModelingModelsGroupBy {
	mmgb.fns = append(mmgb.fns, fns...)
	return mmgb
}

// Scan applies the selector query and scans the result into the given value.
func (mmgb *ModelingModelsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mmgb.build.ctx, "GroupBy")
	if err := mmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModelingModelsQuery, *ModelingModelsGroupBy](ctx, mmgb.build, mmgb, mmgb.build.inters, v)
}

func (mmgb *ModelingModelsGroupBy) sqlScan(ctx context.Context, root *ModelingModelsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mmgb.fns))
	for _, fn := range mmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mmgb.flds)+len(mmgb.fns))
		for _, f := range *mmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ModelingModelsSelect is the builder for selecting fields of ModelingModels entities.
type ModelingModelsSelect struct {
	*ModelingModelsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mms *ModelingModelsSelect) Aggregate(fns ...AggregateFunc) *ModelingModelsSelect {
	mms.fns = append(mms.fns, fns...)
	return mms
}

// Scan applies the selector query and scans the result into the given value.
func (mms *ModelingModelsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mms.ctx, "Select")
	if err := mms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModelingModelsQuery, *ModelingModelsSelect](ctx, mms.ModelingModelsQuery, mms, mms.inters, v)
}

func (mms *ModelingModelsSelect) sqlScan(ctx context.Context, root *ModelingModelsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mms.fns))
	for _, fn := range mms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mms *ModelingModelsSelect) Modify(modifiers ...func(s *sql.Selector)) *ModelingModelsSelect {
	mms.modifiers = append(mms.modifiers, modifiers...)
	return mms
}
