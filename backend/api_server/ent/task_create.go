// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/project"
	"api_server/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (tc *TaskCreate) SetProjectID(i int) *TaskCreate {
	tc.mutation.SetProjectID(i)
	return tc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableProjectID(i *int) *TaskCreate {
	if i != nil {
		tc.SetProjectID(*i)
	}
	return tc
}

// SetDatasetID sets the "dataset_id" field.
func (tc *TaskCreate) SetDatasetID(i int) *TaskCreate {
	tc.mutation.SetDatasetID(i)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TaskCreate) SetTitle(s string) *TaskCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTitle(s *string) *TaskCreate {
	if s != nil {
		tc.SetTitle(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TaskCreate) SetDescription(s string) *TaskCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDescription(s *string) *TaskCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetEngineType sets the "engine_type" field.
func (tc *TaskCreate) SetEngineType(s string) *TaskCreate {
	tc.mutation.SetEngineType(s)
	return tc
}

// SetTargetMetric sets the "target_metric" field.
func (tc *TaskCreate) SetTargetMetric(s string) *TaskCreate {
	tc.mutation.SetTargetMetric(s)
	return tc
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTargetMetric(s *string) *TaskCreate {
	if s != nil {
		tc.SetTargetMetric(*s)
	}
	return tc
}

// SetParams sets the "params" field.
func (tc *TaskCreate) SetParams(s []string) *TaskCreate {
	tc.mutation.SetParams(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetProject sets the "project" edge to the Project entity.
func (tc *TaskCreate) SetProject(p *Project) *TaskCreate {
	return tc.SetProjectID(p.ID)
}

// AddModelingIDs adds the "modelings" edge to the Modeling entity by IDs.
func (tc *TaskCreate) AddModelingIDs(ids ...int) *TaskCreate {
	tc.mutation.AddModelingIDs(ids...)
	return tc
}

// AddModelings adds the "modelings" edges to the Modeling entity.
func (tc *TaskCreate) AddModelings(m ...*Modeling) *TaskCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tc.AddModelingIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.ProjectID(); !ok {
		v := task.DefaultProjectID
		tc.mutation.SetProjectID(v)
	}
	if _, ok := tc.mutation.Title(); !ok {
		v := task.DefaultTitle
		tc.mutation.SetTitle(v)
	}
	if _, ok := tc.mutation.Description(); !ok {
		v := task.DefaultDescription
		tc.mutation.SetDescription(v)
	}
	if _, ok := tc.mutation.TargetMetric(); !ok {
		v := task.DefaultTargetMetric
		tc.mutation.SetTargetMetric(v)
	}
	if _, ok := tc.mutation.Params(); !ok {
		v := task.DefaultParams
		tc.mutation.SetParams(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.DatasetID(); !ok {
		return &ValidationError{Name: "dataset_id", err: errors.New(`ent: missing required field "Task.dataset_id"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Task.title"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Task.description"`)}
	}
	if _, ok := tc.mutation.EngineType(); !ok {
		return &ValidationError{Name: "engine_type", err: errors.New(`ent: missing required field "Task.engine_type"`)}
	}
	if _, ok := tc.mutation.TargetMetric(); !ok {
		return &ValidationError{Name: "target_metric", err: errors.New(`ent: missing required field "Task.target_metric"`)}
	}
	if _, ok := tc.mutation.Params(); !ok {
		return &ValidationError{Name: "params", err: errors.New(`ent: missing required field "Task.params"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.DatasetID(); ok {
		_spec.SetField(task.FieldDatasetID, field.TypeInt, value)
		_node.DatasetID = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.EngineType(); ok {
		_spec.SetField(task.FieldEngineType, field.TypeString, value)
		_node.EngineType = value
	}
	if value, ok := tc.mutation.TargetMetric(); ok {
		_spec.SetField(task.FieldTargetMetric, field.TypeString, value)
		_node.TargetMetric = value
	}
	if value, ok := tc.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
		_node.Params = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ModelingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *TaskUpsert) SetProjectID(v int) *TaskUpsert {
	u.Set(task.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateProjectID() *TaskUpsert {
	u.SetExcluded(task.FieldProjectID)
	return u
}

// ClearProjectID clears the value of the "project_id" field.
func (u *TaskUpsert) ClearProjectID() *TaskUpsert {
	u.SetNull(task.FieldProjectID)
	return u
}

// SetDatasetID sets the "dataset_id" field.
func (u *TaskUpsert) SetDatasetID(v int) *TaskUpsert {
	u.Set(task.FieldDatasetID, v)
	return u
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDatasetID() *TaskUpsert {
	u.SetExcluded(task.FieldDatasetID)
	return u
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *TaskUpsert) AddDatasetID(v int) *TaskUpsert {
	u.Add(task.FieldDatasetID, v)
	return u
}

// SetTitle sets the "title" field.
func (u *TaskUpsert) SetTitle(v string) *TaskUpsert {
	u.Set(task.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTitle() *TaskUpsert {
	u.SetExcluded(task.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *TaskUpsert) SetDescription(v string) *TaskUpsert {
	u.Set(task.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDescription() *TaskUpsert {
	u.SetExcluded(task.FieldDescription)
	return u
}

// SetEngineType sets the "engine_type" field.
func (u *TaskUpsert) SetEngineType(v string) *TaskUpsert {
	u.Set(task.FieldEngineType, v)
	return u
}

// UpdateEngineType sets the "engine_type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateEngineType() *TaskUpsert {
	u.SetExcluded(task.FieldEngineType)
	return u
}

// SetTargetMetric sets the "target_metric" field.
func (u *TaskUpsert) SetTargetMetric(v string) *TaskUpsert {
	u.Set(task.FieldTargetMetric, v)
	return u
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTargetMetric() *TaskUpsert {
	u.SetExcluded(task.FieldTargetMetric)
	return u
}

// SetParams sets the "params" field.
func (u *TaskUpsert) SetParams(v []string) *TaskUpsert {
	u.Set(task.FieldParams, v)
	return u
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *TaskUpsert) UpdateParams() *TaskUpsert {
	u.SetExcluded(task.FieldParams)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsert) SetUpdatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *TaskUpsertOne) SetProjectID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateProjectID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *TaskUpsertOne) ClearProjectID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearProjectID()
	})
}

// SetDatasetID sets the "dataset_id" field.
func (u *TaskUpsertOne) SetDatasetID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDatasetID(v)
	})
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *TaskUpsertOne) AddDatasetID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddDatasetID(v)
	})
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDatasetID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDatasetID()
	})
}

// SetTitle sets the "title" field.
func (u *TaskUpsertOne) SetTitle(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTitle() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TaskUpsertOne) SetDescription(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDescription() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDescription()
	})
}

// SetEngineType sets the "engine_type" field.
func (u *TaskUpsertOne) SetEngineType(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetEngineType(v)
	})
}

// UpdateEngineType sets the "engine_type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateEngineType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEngineType()
	})
}

// SetTargetMetric sets the "target_metric" field.
func (u *TaskUpsertOne) SetTargetMetric(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTargetMetric(v)
	})
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTargetMetric() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTargetMetric()
	})
}

// SetParams sets the "params" field.
func (u *TaskUpsertOne) SetParams(v []string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateParams() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParams()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertOne) SetUpdatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *TaskUpsertBulk) SetProjectID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateProjectID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *TaskUpsertBulk) ClearProjectID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearProjectID()
	})
}

// SetDatasetID sets the "dataset_id" field.
func (u *TaskUpsertBulk) SetDatasetID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDatasetID(v)
	})
}

// AddDatasetID adds v to the "dataset_id" field.
func (u *TaskUpsertBulk) AddDatasetID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddDatasetID(v)
	})
}

// UpdateDatasetID sets the "dataset_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDatasetID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDatasetID()
	})
}

// SetTitle sets the "title" field.
func (u *TaskUpsertBulk) SetTitle(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTitle() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TaskUpsertBulk) SetDescription(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDescription() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDescription()
	})
}

// SetEngineType sets the "engine_type" field.
func (u *TaskUpsertBulk) SetEngineType(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetEngineType(v)
	})
}

// UpdateEngineType sets the "engine_type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateEngineType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEngineType()
	})
}

// SetTargetMetric sets the "target_metric" field.
func (u *TaskUpsertBulk) SetTargetMetric(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTargetMetric(v)
	})
}

// UpdateTargetMetric sets the "target_metric" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTargetMetric() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTargetMetric()
	})
}

// SetParams sets the "params" field.
func (u *TaskUpsertBulk) SetParams(v []string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateParams() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateParams()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertBulk) SetUpdatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
