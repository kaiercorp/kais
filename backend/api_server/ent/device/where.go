// Code generated by ent, DO NOT EDIT.

package device

import (
	"api_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldIP, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldPort, v))
}

// IsUse applies equality check predicate on the "is_use" field. It's identical to IsUseEQ.
func IsUse(v bool) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldIsUse, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldType, v))
}

// Connection applies equality check predicate on the "connection" field. It's identical to ConnectionEQ.
func Connection(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldConnection, v))
}

// Available applies equality check predicate on the "available" field. It's identical to AvailableEQ.
func Available(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAvailable, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldName, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldIP, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldPort, v))
}

// IsUseEQ applies the EQ predicate on the "is_use" field.
func IsUseEQ(v bool) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldIsUse, v))
}

// IsUseNEQ applies the NEQ predicate on the "is_use" field.
func IsUseNEQ(v bool) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldIsUse, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldType, v))
}

// ConnectionEQ applies the EQ predicate on the "connection" field.
func ConnectionEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldConnection, v))
}

// ConnectionNEQ applies the NEQ predicate on the "connection" field.
func ConnectionNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldConnection, v))
}

// ConnectionIn applies the In predicate on the "connection" field.
func ConnectionIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldConnection, vs...))
}

// ConnectionNotIn applies the NotIn predicate on the "connection" field.
func ConnectionNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldConnection, vs...))
}

// ConnectionGT applies the GT predicate on the "connection" field.
func ConnectionGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldConnection, v))
}

// ConnectionGTE applies the GTE predicate on the "connection" field.
func ConnectionGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldConnection, v))
}

// ConnectionLT applies the LT predicate on the "connection" field.
func ConnectionLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldConnection, v))
}

// ConnectionLTE applies the LTE predicate on the "connection" field.
func ConnectionLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldConnection, v))
}

// ConnectionContains applies the Contains predicate on the "connection" field.
func ConnectionContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldConnection, v))
}

// ConnectionHasPrefix applies the HasPrefix predicate on the "connection" field.
func ConnectionHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldConnection, v))
}

// ConnectionHasSuffix applies the HasSuffix predicate on the "connection" field.
func ConnectionHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldConnection, v))
}

// ConnectionEqualFold applies the EqualFold predicate on the "connection" field.
func ConnectionEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldConnection, v))
}

// ConnectionContainsFold applies the ContainsFold predicate on the "connection" field.
func ConnectionContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldConnection, v))
}

// AvailableEQ applies the EQ predicate on the "available" field.
func AvailableEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldAvailable, v))
}

// AvailableNEQ applies the NEQ predicate on the "available" field.
func AvailableNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldAvailable, v))
}

// AvailableIn applies the In predicate on the "available" field.
func AvailableIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldAvailable, vs...))
}

// AvailableNotIn applies the NotIn predicate on the "available" field.
func AvailableNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldAvailable, vs...))
}

// AvailableGT applies the GT predicate on the "available" field.
func AvailableGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldAvailable, v))
}

// AvailableGTE applies the GTE predicate on the "available" field.
func AvailableGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldAvailable, v))
}

// AvailableLT applies the LT predicate on the "available" field.
func AvailableLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldAvailable, v))
}

// AvailableLTE applies the LTE predicate on the "available" field.
func AvailableLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldAvailable, v))
}

// AvailableContains applies the Contains predicate on the "available" field.
func AvailableContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldAvailable, v))
}

// AvailableHasPrefix applies the HasPrefix predicate on the "available" field.
func AvailableHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldAvailable, v))
}

// AvailableHasSuffix applies the HasSuffix predicate on the "available" field.
func AvailableHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldAvailable, v))
}

// AvailableEqualFold applies the EqualFold predicate on the "available" field.
func AvailableEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldAvailable, v))
}

// AvailableContainsFold applies the ContainsFold predicate on the "available" field.
func AvailableContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldAvailable, v))
}

// HasGpu applies the HasEdge predicate on the "gpu" edge.
func HasGpu() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GpuTable, GpuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGpuWith applies the HasEdge predicate on the "gpu" edge with a given conditions (other predicates).
func HasGpuWith(preds ...predicate.Gpu) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newGpuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
