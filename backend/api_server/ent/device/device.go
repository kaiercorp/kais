// Code generated by ent, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldConnection holds the string denoting the connection field in the database.
	FieldConnection = "connection"
	// FieldAvailable holds the string denoting the available field in the database.
	FieldAvailable = "available"
	// EdgeGpu holds the string denoting the gpu edge name in mutations.
	EdgeGpu = "gpu"
	// Table holds the table name of the device in the database.
	Table = "device"
	// GpuTable is the table that holds the gpu relation/edge.
	GpuTable = "gpu"
	// GpuInverseTable is the table name for the Gpu entity.
	// It exists in this package in order to avoid circular dependency with the "gpu" package.
	GpuInverseTable = "gpu"
	// GpuColumn is the table column denoting the gpu relation/edge.
	GpuColumn = "device_id"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIP,
	FieldPort,
	FieldIsUse,
	FieldType,
	FieldConnection,
	FieldAvailable,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultConnection holds the default value on creation for the "connection" field.
	DefaultConnection string
	// DefaultAvailable holds the default value on creation for the "available" field.
	DefaultAvailable string
)

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByConnection orders the results by the connection field.
func ByConnection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnection, opts...).ToFunc()
}

// ByAvailable orders the results by the available field.
func ByAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailable, opts...).ToFunc()
}

// ByGpuCount orders the results by gpu count.
func ByGpuCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGpuStep(), opts...)
	}
}

// ByGpu orders the results by gpu terms.
func ByGpu(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGpuStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGpuStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GpuInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GpuTable, GpuColumn),
	)
}
