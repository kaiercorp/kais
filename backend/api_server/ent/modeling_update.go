// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"api_server/ent/modelingmodels"
	"api_server/ent/predicate"
	"api_server/ent/task"
	"api_server/ent/trial"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ModelingUpdate is the builder for updating Modeling entities.
type ModelingUpdate struct {
	config
	hooks     []Hook
	mutation  *ModelingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModelingUpdate builder.
func (mu *ModelingUpdate) Where(ps ...predicate.Modeling) *ModelingUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetLocalID sets the "local_id" field.
func (mu *ModelingUpdate) SetLocalID(i int) *ModelingUpdate {
	mu.mutation.ResetLocalID()
	mu.mutation.SetLocalID(i)
	return mu
}

// SetNillableLocalID sets the "local_id" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableLocalID(i *int) *ModelingUpdate {
	if i != nil {
		mu.SetLocalID(*i)
	}
	return mu
}

// AddLocalID adds i to the "local_id" field.
func (mu *ModelingUpdate) AddLocalID(i int) *ModelingUpdate {
	mu.mutation.AddLocalID(i)
	return mu
}

// SetTaskID sets the "task_id" field.
func (mu *ModelingUpdate) SetTaskID(i int) *ModelingUpdate {
	mu.mutation.SetTaskID(i)
	return mu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableTaskID(i *int) *ModelingUpdate {
	if i != nil {
		mu.SetTaskID(*i)
	}
	return mu
}

// ClearTaskID clears the value of the "task_id" field.
func (mu *ModelingUpdate) ClearTaskID() *ModelingUpdate {
	mu.mutation.ClearTaskID()
	return mu
}

// SetParentID sets the "parent_id" field.
func (mu *ModelingUpdate) SetParentID(i int) *ModelingUpdate {
	mu.mutation.ResetParentID()
	mu.mutation.SetParentID(i)
	return mu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableParentID(i *int) *ModelingUpdate {
	if i != nil {
		mu.SetParentID(*i)
	}
	return mu
}

// AddParentID adds i to the "parent_id" field.
func (mu *ModelingUpdate) AddParentID(i int) *ModelingUpdate {
	mu.mutation.AddParentID(i)
	return mu
}

// ClearParentID clears the value of the "parent_id" field.
func (mu *ModelingUpdate) ClearParentID() *ModelingUpdate {
	mu.mutation.ClearParentID()
	return mu
}

// SetParentLocalID sets the "parent_local_id" field.
func (mu *ModelingUpdate) SetParentLocalID(i int) *ModelingUpdate {
	mu.mutation.ResetParentLocalID()
	mu.mutation.SetParentLocalID(i)
	return mu
}

// SetNillableParentLocalID sets the "parent_local_id" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableParentLocalID(i *int) *ModelingUpdate {
	if i != nil {
		mu.SetParentLocalID(*i)
	}
	return mu
}

// AddParentLocalID adds i to the "parent_local_id" field.
func (mu *ModelingUpdate) AddParentLocalID(i int) *ModelingUpdate {
	mu.mutation.AddParentLocalID(i)
	return mu
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (mu *ModelingUpdate) ClearParentLocalID() *ModelingUpdate {
	mu.mutation.ClearParentLocalID()
	return mu
}

// SetDatasetID sets the "dataset_id" field.
func (mu *ModelingUpdate) SetDatasetID(i int) *ModelingUpdate {
	mu.mutation.ResetDatasetID()
	mu.mutation.SetDatasetID(i)
	return mu
}

// SetNillableDatasetID sets the "dataset_id" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableDatasetID(i *int) *ModelingUpdate {
	if i != nil {
		mu.SetDatasetID(*i)
	}
	return mu
}

// AddDatasetID adds i to the "dataset_id" field.
func (mu *ModelingUpdate) AddDatasetID(i int) *ModelingUpdate {
	mu.mutation.AddDatasetID(i)
	return mu
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (mu *ModelingUpdate) ClearDatasetID() *ModelingUpdate {
	mu.mutation.ClearDatasetID()
	return mu
}

// SetParams sets the "params" field.
func (mu *ModelingUpdate) SetParams(s []string) *ModelingUpdate {
	mu.mutation.SetParams(s)
	return mu
}

// AppendParams appends s to the "params" field.
func (mu *ModelingUpdate) AppendParams(s []string) *ModelingUpdate {
	mu.mutation.AppendParams(s)
	return mu
}

// SetDatasetStat sets the "dataset_stat" field.
func (mu *ModelingUpdate) SetDatasetStat(s []string) *ModelingUpdate {
	mu.mutation.SetDatasetStat(s)
	return mu
}

// AppendDatasetStat appends s to the "dataset_stat" field.
func (mu *ModelingUpdate) AppendDatasetStat(s []string) *ModelingUpdate {
	mu.mutation.AppendDatasetStat(s)
	return mu
}

// SetModelingType sets the "modeling_type" field.
func (mu *ModelingUpdate) SetModelingType(s string) *ModelingUpdate {
	mu.mutation.SetModelingType(s)
	return mu
}

// SetNillableModelingType sets the "modeling_type" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableModelingType(s *string) *ModelingUpdate {
	if s != nil {
		mu.SetModelingType(*s)
	}
	return mu
}

// SetModelingStep sets the "modeling_step" field.
func (mu *ModelingUpdate) SetModelingStep(s string) *ModelingUpdate {
	mu.mutation.SetModelingStep(s)
	return mu
}

// SetNillableModelingStep sets the "modeling_step" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableModelingStep(s *string) *ModelingUpdate {
	if s != nil {
		mu.SetModelingStep(*s)
	}
	return mu
}

// SetPerformance sets the "performance" field.
func (mu *ModelingUpdate) SetPerformance(s []string) *ModelingUpdate {
	mu.mutation.SetPerformance(s)
	return mu
}

// AppendPerformance appends s to the "performance" field.
func (mu *ModelingUpdate) AppendPerformance(s []string) *ModelingUpdate {
	mu.mutation.AppendPerformance(s)
	return mu
}

// SetProgress sets the "progress" field.
func (mu *ModelingUpdate) SetProgress(f float64) *ModelingUpdate {
	mu.mutation.ResetProgress()
	mu.mutation.SetProgress(f)
	return mu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableProgress(f *float64) *ModelingUpdate {
	if f != nil {
		mu.SetProgress(*f)
	}
	return mu
}

// AddProgress adds f to the "progress" field.
func (mu *ModelingUpdate) AddProgress(f float64) *ModelingUpdate {
	mu.mutation.AddProgress(f)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ModelingUpdate) SetUpdatedAt(t time.Time) *ModelingUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableUpdatedAt(t *time.Time) *ModelingUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// SetStartedAt sets the "started_at" field.
func (mu *ModelingUpdate) SetStartedAt(t time.Time) *ModelingUpdate {
	mu.mutation.SetStartedAt(t)
	return mu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mu *ModelingUpdate) SetNillableStartedAt(t *time.Time) *ModelingUpdate {
	if t != nil {
		mu.SetStartedAt(*t)
	}
	return mu
}

// ClearStartedAt clears the value of the "started_at" field.
func (mu *ModelingUpdate) ClearStartedAt() *ModelingUpdate {
	mu.mutation.ClearStartedAt()
	return mu
}

// SetTask sets the "task" edge to the Task entity.
func (mu *ModelingUpdate) SetTask(t *Task) *ModelingUpdate {
	return mu.SetTaskID(t.ID)
}

// AddModelingDetailIDs adds the "modeling_details" edge to the ModelingDetails entity by IDs.
func (mu *ModelingUpdate) AddModelingDetailIDs(ids ...int) *ModelingUpdate {
	mu.mutation.AddModelingDetailIDs(ids...)
	return mu
}

// AddModelingDetails adds the "modeling_details" edges to the ModelingDetails entity.
func (mu *ModelingUpdate) AddModelingDetails(m ...*ModelingDetails) *ModelingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddModelingDetailIDs(ids...)
}

// AddModelingModelIDs adds the "modeling_models" edge to the ModelingModels entity by IDs.
func (mu *ModelingUpdate) AddModelingModelIDs(ids ...int) *ModelingUpdate {
	mu.mutation.AddModelingModelIDs(ids...)
	return mu
}

// AddModelingModels adds the "modeling_models" edges to the ModelingModels entity.
func (mu *ModelingUpdate) AddModelingModels(m ...*ModelingModels) *ModelingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddModelingModelIDs(ids...)
}

// AddTrialIDs adds the "trials" edge to the Trial entity by IDs.
func (mu *ModelingUpdate) AddTrialIDs(ids ...int) *ModelingUpdate {
	mu.mutation.AddTrialIDs(ids...)
	return mu
}

// AddTrials adds the "trials" edges to the Trial entity.
func (mu *ModelingUpdate) AddTrials(t ...*Trial) *ModelingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTrialIDs(ids...)
}

// Mutation returns the ModelingMutation object of the builder.
func (mu *ModelingUpdate) Mutation() *ModelingMutation {
	return mu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (mu *ModelingUpdate) ClearTask() *ModelingUpdate {
	mu.mutation.ClearTask()
	return mu
}

// ClearModelingDetails clears all "modeling_details" edges to the ModelingDetails entity.
func (mu *ModelingUpdate) ClearModelingDetails() *ModelingUpdate {
	mu.mutation.ClearModelingDetails()
	return mu
}

// RemoveModelingDetailIDs removes the "modeling_details" edge to ModelingDetails entities by IDs.
func (mu *ModelingUpdate) RemoveModelingDetailIDs(ids ...int) *ModelingUpdate {
	mu.mutation.RemoveModelingDetailIDs(ids...)
	return mu
}

// RemoveModelingDetails removes "modeling_details" edges to ModelingDetails entities.
func (mu *ModelingUpdate) RemoveModelingDetails(m ...*ModelingDetails) *ModelingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveModelingDetailIDs(ids...)
}

// ClearModelingModels clears all "modeling_models" edges to the ModelingModels entity.
func (mu *ModelingUpdate) ClearModelingModels() *ModelingUpdate {
	mu.mutation.ClearModelingModels()
	return mu
}

// RemoveModelingModelIDs removes the "modeling_models" edge to ModelingModels entities by IDs.
func (mu *ModelingUpdate) RemoveModelingModelIDs(ids ...int) *ModelingUpdate {
	mu.mutation.RemoveModelingModelIDs(ids...)
	return mu
}

// RemoveModelingModels removes "modeling_models" edges to ModelingModels entities.
func (mu *ModelingUpdate) RemoveModelingModels(m ...*ModelingModels) *ModelingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveModelingModelIDs(ids...)
}

// ClearTrials clears all "trials" edges to the Trial entity.
func (mu *ModelingUpdate) ClearTrials() *ModelingUpdate {
	mu.mutation.ClearTrials()
	return mu
}

// RemoveTrialIDs removes the "trials" edge to Trial entities by IDs.
func (mu *ModelingUpdate) RemoveTrialIDs(ids ...int) *ModelingUpdate {
	mu.mutation.RemoveTrialIDs(ids...)
	return mu
}

// RemoveTrials removes "trials" edges to Trial entities.
func (mu *ModelingUpdate) RemoveTrials(t ...*Trial) *ModelingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTrialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModelingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModelingUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModelingUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModelingUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *ModelingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *ModelingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(modeling.Table, modeling.Columns, sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.LocalID(); ok {
		_spec.SetField(modeling.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedLocalID(); ok {
		_spec.AddField(modeling.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.ParentID(); ok {
		_spec.SetField(modeling.FieldParentID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedParentID(); ok {
		_spec.AddField(modeling.FieldParentID, field.TypeInt, value)
	}
	if mu.mutation.ParentIDCleared() {
		_spec.ClearField(modeling.FieldParentID, field.TypeInt)
	}
	if value, ok := mu.mutation.ParentLocalID(); ok {
		_spec.SetField(modeling.FieldParentLocalID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedParentLocalID(); ok {
		_spec.AddField(modeling.FieldParentLocalID, field.TypeInt, value)
	}
	if mu.mutation.ParentLocalIDCleared() {
		_spec.ClearField(modeling.FieldParentLocalID, field.TypeInt)
	}
	if value, ok := mu.mutation.DatasetID(); ok {
		_spec.SetField(modeling.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedDatasetID(); ok {
		_spec.AddField(modeling.FieldDatasetID, field.TypeInt, value)
	}
	if mu.mutation.DatasetIDCleared() {
		_spec.ClearField(modeling.FieldDatasetID, field.TypeInt)
	}
	if value, ok := mu.mutation.Params(); ok {
		_spec.SetField(modeling.FieldParams, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldParams, value)
		})
	}
	if value, ok := mu.mutation.DatasetStat(); ok {
		_spec.SetField(modeling.FieldDatasetStat, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedDatasetStat(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldDatasetStat, value)
		})
	}
	if value, ok := mu.mutation.ModelingType(); ok {
		_spec.SetField(modeling.FieldModelingType, field.TypeString, value)
	}
	if value, ok := mu.mutation.ModelingStep(); ok {
		_spec.SetField(modeling.FieldModelingStep, field.TypeString, value)
	}
	if value, ok := mu.mutation.Performance(); ok {
		_spec.SetField(modeling.FieldPerformance, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedPerformance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldPerformance, value)
		})
	}
	if value, ok := mu.mutation.Progress(); ok {
		_spec.SetField(modeling.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedProgress(); ok {
		_spec.AddField(modeling.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(modeling.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.StartedAt(); ok {
		_spec.SetField(modeling.FieldStartedAt, field.TypeTime, value)
	}
	if mu.mutation.StartedAtCleared() {
		_spec.ClearField(modeling.FieldStartedAt, field.TypeTime)
	}
	if mu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modeling.TaskTable,
			Columns: []string{modeling.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modeling.TaskTable,
			Columns: []string{modeling.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ModelingDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedModelingDetailsIDs(); len(nodes) > 0 && !mu.mutation.ModelingDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ModelingDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ModelingModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedModelingModelsIDs(); len(nodes) > 0 && !mu.mutation.ModelingModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ModelingModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TrialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTrialsIDs(); len(nodes) > 0 && !mu.mutation.TrialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TrialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modeling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModelingUpdateOne is the builder for updating a single Modeling entity.
type ModelingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModelingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLocalID sets the "local_id" field.
func (muo *ModelingUpdateOne) SetLocalID(i int) *ModelingUpdateOne {
	muo.mutation.ResetLocalID()
	muo.mutation.SetLocalID(i)
	return muo
}

// SetNillableLocalID sets the "local_id" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableLocalID(i *int) *ModelingUpdateOne {
	if i != nil {
		muo.SetLocalID(*i)
	}
	return muo
}

// AddLocalID adds i to the "local_id" field.
func (muo *ModelingUpdateOne) AddLocalID(i int) *ModelingUpdateOne {
	muo.mutation.AddLocalID(i)
	return muo
}

// SetTaskID sets the "task_id" field.
func (muo *ModelingUpdateOne) SetTaskID(i int) *ModelingUpdateOne {
	muo.mutation.SetTaskID(i)
	return muo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableTaskID(i *int) *ModelingUpdateOne {
	if i != nil {
		muo.SetTaskID(*i)
	}
	return muo
}

// ClearTaskID clears the value of the "task_id" field.
func (muo *ModelingUpdateOne) ClearTaskID() *ModelingUpdateOne {
	muo.mutation.ClearTaskID()
	return muo
}

// SetParentID sets the "parent_id" field.
func (muo *ModelingUpdateOne) SetParentID(i int) *ModelingUpdateOne {
	muo.mutation.ResetParentID()
	muo.mutation.SetParentID(i)
	return muo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableParentID(i *int) *ModelingUpdateOne {
	if i != nil {
		muo.SetParentID(*i)
	}
	return muo
}

// AddParentID adds i to the "parent_id" field.
func (muo *ModelingUpdateOne) AddParentID(i int) *ModelingUpdateOne {
	muo.mutation.AddParentID(i)
	return muo
}

// ClearParentID clears the value of the "parent_id" field.
func (muo *ModelingUpdateOne) ClearParentID() *ModelingUpdateOne {
	muo.mutation.ClearParentID()
	return muo
}

// SetParentLocalID sets the "parent_local_id" field.
func (muo *ModelingUpdateOne) SetParentLocalID(i int) *ModelingUpdateOne {
	muo.mutation.ResetParentLocalID()
	muo.mutation.SetParentLocalID(i)
	return muo
}

// SetNillableParentLocalID sets the "parent_local_id" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableParentLocalID(i *int) *ModelingUpdateOne {
	if i != nil {
		muo.SetParentLocalID(*i)
	}
	return muo
}

// AddParentLocalID adds i to the "parent_local_id" field.
func (muo *ModelingUpdateOne) AddParentLocalID(i int) *ModelingUpdateOne {
	muo.mutation.AddParentLocalID(i)
	return muo
}

// ClearParentLocalID clears the value of the "parent_local_id" field.
func (muo *ModelingUpdateOne) ClearParentLocalID() *ModelingUpdateOne {
	muo.mutation.ClearParentLocalID()
	return muo
}

// SetDatasetID sets the "dataset_id" field.
func (muo *ModelingUpdateOne) SetDatasetID(i int) *ModelingUpdateOne {
	muo.mutation.ResetDatasetID()
	muo.mutation.SetDatasetID(i)
	return muo
}

// SetNillableDatasetID sets the "dataset_id" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableDatasetID(i *int) *ModelingUpdateOne {
	if i != nil {
		muo.SetDatasetID(*i)
	}
	return muo
}

// AddDatasetID adds i to the "dataset_id" field.
func (muo *ModelingUpdateOne) AddDatasetID(i int) *ModelingUpdateOne {
	muo.mutation.AddDatasetID(i)
	return muo
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (muo *ModelingUpdateOne) ClearDatasetID() *ModelingUpdateOne {
	muo.mutation.ClearDatasetID()
	return muo
}

// SetParams sets the "params" field.
func (muo *ModelingUpdateOne) SetParams(s []string) *ModelingUpdateOne {
	muo.mutation.SetParams(s)
	return muo
}

// AppendParams appends s to the "params" field.
func (muo *ModelingUpdateOne) AppendParams(s []string) *ModelingUpdateOne {
	muo.mutation.AppendParams(s)
	return muo
}

// SetDatasetStat sets the "dataset_stat" field.
func (muo *ModelingUpdateOne) SetDatasetStat(s []string) *ModelingUpdateOne {
	muo.mutation.SetDatasetStat(s)
	return muo
}

// AppendDatasetStat appends s to the "dataset_stat" field.
func (muo *ModelingUpdateOne) AppendDatasetStat(s []string) *ModelingUpdateOne {
	muo.mutation.AppendDatasetStat(s)
	return muo
}

// SetModelingType sets the "modeling_type" field.
func (muo *ModelingUpdateOne) SetModelingType(s string) *ModelingUpdateOne {
	muo.mutation.SetModelingType(s)
	return muo
}

// SetNillableModelingType sets the "modeling_type" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableModelingType(s *string) *ModelingUpdateOne {
	if s != nil {
		muo.SetModelingType(*s)
	}
	return muo
}

// SetModelingStep sets the "modeling_step" field.
func (muo *ModelingUpdateOne) SetModelingStep(s string) *ModelingUpdateOne {
	muo.mutation.SetModelingStep(s)
	return muo
}

// SetNillableModelingStep sets the "modeling_step" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableModelingStep(s *string) *ModelingUpdateOne {
	if s != nil {
		muo.SetModelingStep(*s)
	}
	return muo
}

// SetPerformance sets the "performance" field.
func (muo *ModelingUpdateOne) SetPerformance(s []string) *ModelingUpdateOne {
	muo.mutation.SetPerformance(s)
	return muo
}

// AppendPerformance appends s to the "performance" field.
func (muo *ModelingUpdateOne) AppendPerformance(s []string) *ModelingUpdateOne {
	muo.mutation.AppendPerformance(s)
	return muo
}

// SetProgress sets the "progress" field.
func (muo *ModelingUpdateOne) SetProgress(f float64) *ModelingUpdateOne {
	muo.mutation.ResetProgress()
	muo.mutation.SetProgress(f)
	return muo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableProgress(f *float64) *ModelingUpdateOne {
	if f != nil {
		muo.SetProgress(*f)
	}
	return muo
}

// AddProgress adds f to the "progress" field.
func (muo *ModelingUpdateOne) AddProgress(f float64) *ModelingUpdateOne {
	muo.mutation.AddProgress(f)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ModelingUpdateOne) SetUpdatedAt(t time.Time) *ModelingUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableUpdatedAt(t *time.Time) *ModelingUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// SetStartedAt sets the "started_at" field.
func (muo *ModelingUpdateOne) SetStartedAt(t time.Time) *ModelingUpdateOne {
	muo.mutation.SetStartedAt(t)
	return muo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (muo *ModelingUpdateOne) SetNillableStartedAt(t *time.Time) *ModelingUpdateOne {
	if t != nil {
		muo.SetStartedAt(*t)
	}
	return muo
}

// ClearStartedAt clears the value of the "started_at" field.
func (muo *ModelingUpdateOne) ClearStartedAt() *ModelingUpdateOne {
	muo.mutation.ClearStartedAt()
	return muo
}

// SetTask sets the "task" edge to the Task entity.
func (muo *ModelingUpdateOne) SetTask(t *Task) *ModelingUpdateOne {
	return muo.SetTaskID(t.ID)
}

// AddModelingDetailIDs adds the "modeling_details" edge to the ModelingDetails entity by IDs.
func (muo *ModelingUpdateOne) AddModelingDetailIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.AddModelingDetailIDs(ids...)
	return muo
}

// AddModelingDetails adds the "modeling_details" edges to the ModelingDetails entity.
func (muo *ModelingUpdateOne) AddModelingDetails(m ...*ModelingDetails) *ModelingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddModelingDetailIDs(ids...)
}

// AddModelingModelIDs adds the "modeling_models" edge to the ModelingModels entity by IDs.
func (muo *ModelingUpdateOne) AddModelingModelIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.AddModelingModelIDs(ids...)
	return muo
}

// AddModelingModels adds the "modeling_models" edges to the ModelingModels entity.
func (muo *ModelingUpdateOne) AddModelingModels(m ...*ModelingModels) *ModelingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddModelingModelIDs(ids...)
}

// AddTrialIDs adds the "trials" edge to the Trial entity by IDs.
func (muo *ModelingUpdateOne) AddTrialIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.AddTrialIDs(ids...)
	return muo
}

// AddTrials adds the "trials" edges to the Trial entity.
func (muo *ModelingUpdateOne) AddTrials(t ...*Trial) *ModelingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTrialIDs(ids...)
}

// Mutation returns the ModelingMutation object of the builder.
func (muo *ModelingUpdateOne) Mutation() *ModelingMutation {
	return muo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (muo *ModelingUpdateOne) ClearTask() *ModelingUpdateOne {
	muo.mutation.ClearTask()
	return muo
}

// ClearModelingDetails clears all "modeling_details" edges to the ModelingDetails entity.
func (muo *ModelingUpdateOne) ClearModelingDetails() *ModelingUpdateOne {
	muo.mutation.ClearModelingDetails()
	return muo
}

// RemoveModelingDetailIDs removes the "modeling_details" edge to ModelingDetails entities by IDs.
func (muo *ModelingUpdateOne) RemoveModelingDetailIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.RemoveModelingDetailIDs(ids...)
	return muo
}

// RemoveModelingDetails removes "modeling_details" edges to ModelingDetails entities.
func (muo *ModelingUpdateOne) RemoveModelingDetails(m ...*ModelingDetails) *ModelingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveModelingDetailIDs(ids...)
}

// ClearModelingModels clears all "modeling_models" edges to the ModelingModels entity.
func (muo *ModelingUpdateOne) ClearModelingModels() *ModelingUpdateOne {
	muo.mutation.ClearModelingModels()
	return muo
}

// RemoveModelingModelIDs removes the "modeling_models" edge to ModelingModels entities by IDs.
func (muo *ModelingUpdateOne) RemoveModelingModelIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.RemoveModelingModelIDs(ids...)
	return muo
}

// RemoveModelingModels removes "modeling_models" edges to ModelingModels entities.
func (muo *ModelingUpdateOne) RemoveModelingModels(m ...*ModelingModels) *ModelingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveModelingModelIDs(ids...)
}

// ClearTrials clears all "trials" edges to the Trial entity.
func (muo *ModelingUpdateOne) ClearTrials() *ModelingUpdateOne {
	muo.mutation.ClearTrials()
	return muo
}

// RemoveTrialIDs removes the "trials" edge to Trial entities by IDs.
func (muo *ModelingUpdateOne) RemoveTrialIDs(ids ...int) *ModelingUpdateOne {
	muo.mutation.RemoveTrialIDs(ids...)
	return muo
}

// RemoveTrials removes "trials" edges to Trial entities.
func (muo *ModelingUpdateOne) RemoveTrials(t ...*Trial) *ModelingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTrialIDs(ids...)
}

// Where appends a list predicates to the ModelingUpdate builder.
func (muo *ModelingUpdateOne) Where(ps ...predicate.Modeling) *ModelingUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModelingUpdateOne) Select(field string, fields ...string) *ModelingUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Modeling entity.
func (muo *ModelingUpdateOne) Save(ctx context.Context) (*Modeling, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModelingUpdateOne) SaveX(ctx context.Context) *Modeling {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModelingUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModelingUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *ModelingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *ModelingUpdateOne) sqlSave(ctx context.Context) (_node *Modeling, err error) {
	_spec := sqlgraph.NewUpdateSpec(modeling.Table, modeling.Columns, sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Modeling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modeling.FieldID)
		for _, f := range fields {
			if !modeling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != modeling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.LocalID(); ok {
		_spec.SetField(modeling.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedLocalID(); ok {
		_spec.AddField(modeling.FieldLocalID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.ParentID(); ok {
		_spec.SetField(modeling.FieldParentID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedParentID(); ok {
		_spec.AddField(modeling.FieldParentID, field.TypeInt, value)
	}
	if muo.mutation.ParentIDCleared() {
		_spec.ClearField(modeling.FieldParentID, field.TypeInt)
	}
	if value, ok := muo.mutation.ParentLocalID(); ok {
		_spec.SetField(modeling.FieldParentLocalID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedParentLocalID(); ok {
		_spec.AddField(modeling.FieldParentLocalID, field.TypeInt, value)
	}
	if muo.mutation.ParentLocalIDCleared() {
		_spec.ClearField(modeling.FieldParentLocalID, field.TypeInt)
	}
	if value, ok := muo.mutation.DatasetID(); ok {
		_spec.SetField(modeling.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedDatasetID(); ok {
		_spec.AddField(modeling.FieldDatasetID, field.TypeInt, value)
	}
	if muo.mutation.DatasetIDCleared() {
		_spec.ClearField(modeling.FieldDatasetID, field.TypeInt)
	}
	if value, ok := muo.mutation.Params(); ok {
		_spec.SetField(modeling.FieldParams, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldParams, value)
		})
	}
	if value, ok := muo.mutation.DatasetStat(); ok {
		_spec.SetField(modeling.FieldDatasetStat, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedDatasetStat(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldDatasetStat, value)
		})
	}
	if value, ok := muo.mutation.ModelingType(); ok {
		_spec.SetField(modeling.FieldModelingType, field.TypeString, value)
	}
	if value, ok := muo.mutation.ModelingStep(); ok {
		_spec.SetField(modeling.FieldModelingStep, field.TypeString, value)
	}
	if value, ok := muo.mutation.Performance(); ok {
		_spec.SetField(modeling.FieldPerformance, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedPerformance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modeling.FieldPerformance, value)
		})
	}
	if value, ok := muo.mutation.Progress(); ok {
		_spec.SetField(modeling.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedProgress(); ok {
		_spec.AddField(modeling.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(modeling.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.StartedAt(); ok {
		_spec.SetField(modeling.FieldStartedAt, field.TypeTime, value)
	}
	if muo.mutation.StartedAtCleared() {
		_spec.ClearField(modeling.FieldStartedAt, field.TypeTime)
	}
	if muo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modeling.TaskTable,
			Columns: []string{modeling.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modeling.TaskTable,
			Columns: []string{modeling.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ModelingDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedModelingDetailsIDs(); len(nodes) > 0 && !muo.mutation.ModelingDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ModelingDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingDetailsTable,
			Columns: []string{modeling.ModelingDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ModelingModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedModelingModelsIDs(); len(nodes) > 0 && !muo.mutation.ModelingModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ModelingModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.ModelingModelsTable,
			Columns: []string{modeling.ModelingModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modelingmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TrialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTrialsIDs(); len(nodes) > 0 && !muo.mutation.TrialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TrialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modeling.TrialsTable,
			Columns: []string{modeling.TrialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Modeling{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modeling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
