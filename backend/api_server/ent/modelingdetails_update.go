// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ModelingDetailsUpdate is the builder for updating ModelingDetails entities.
type ModelingDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *ModelingDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModelingDetailsUpdate builder.
func (mdu *ModelingDetailsUpdate) Where(ps ...predicate.ModelingDetails) *ModelingDetailsUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetModelingID sets the "modeling_id" field.
func (mdu *ModelingDetailsUpdate) SetModelingID(i int) *ModelingDetailsUpdate {
	mdu.mutation.SetModelingID(i)
	return mdu
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mdu *ModelingDetailsUpdate) SetNillableModelingID(i *int) *ModelingDetailsUpdate {
	if i != nil {
		mdu.SetModelingID(*i)
	}
	return mdu
}

// ClearModelingID clears the value of the "modeling_id" field.
func (mdu *ModelingDetailsUpdate) ClearModelingID() *ModelingDetailsUpdate {
	mdu.mutation.ClearModelingID()
	return mdu
}

// SetModel sets the "model" field.
func (mdu *ModelingDetailsUpdate) SetModel(s string) *ModelingDetailsUpdate {
	mdu.mutation.SetModel(s)
	return mdu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (mdu *ModelingDetailsUpdate) SetNillableModel(s *string) *ModelingDetailsUpdate {
	if s != nil {
		mdu.SetModel(*s)
	}
	return mdu
}

// SetDataType sets the "data_type" field.
func (mdu *ModelingDetailsUpdate) SetDataType(s string) *ModelingDetailsUpdate {
	mdu.mutation.SetDataType(s)
	return mdu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mdu *ModelingDetailsUpdate) SetNillableDataType(s *string) *ModelingDetailsUpdate {
	if s != nil {
		mdu.SetDataType(*s)
	}
	return mdu
}

// SetData sets the "data" field.
func (mdu *ModelingDetailsUpdate) SetData(s []string) *ModelingDetailsUpdate {
	mdu.mutation.SetData(s)
	return mdu
}

// AppendData appends s to the "data" field.
func (mdu *ModelingDetailsUpdate) AppendData(s []string) *ModelingDetailsUpdate {
	mdu.mutation.AppendData(s)
	return mdu
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mdu *ModelingDetailsUpdate) SetModeling(m *Modeling) *ModelingDetailsUpdate {
	return mdu.SetModelingID(m.ID)
}

// Mutation returns the ModelingDetailsMutation object of the builder.
func (mdu *ModelingDetailsUpdate) Mutation() *ModelingDetailsMutation {
	return mdu.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (mdu *ModelingDetailsUpdate) ClearModeling() *ModelingDetailsUpdate {
	mdu.mutation.ClearModeling()
	return mdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *ModelingDetailsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mdu.sqlSave, mdu.mutation, mdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *ModelingDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *ModelingDetailsUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *ModelingDetailsUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mdu *ModelingDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingDetailsUpdate {
	mdu.modifiers = append(mdu.modifiers, modifiers...)
	return mdu
}

func (mdu *ModelingDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(modelingdetails.Table, modelingdetails.Columns, sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt))
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mdu.mutation.Model(); ok {
		_spec.SetField(modelingdetails.FieldModel, field.TypeString, value)
	}
	if value, ok := mdu.mutation.DataType(); ok {
		_spec.SetField(modelingdetails.FieldDataType, field.TypeString, value)
	}
	if value, ok := mdu.mutation.Data(); ok {
		_spec.SetField(modelingdetails.FieldData, field.TypeJSON, value)
	}
	if value, ok := mdu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modelingdetails.FieldData, value)
		})
	}
	if mdu.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingdetails.ModelingTable,
			Columns: []string{modelingdetails.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingdetails.ModelingTable,
			Columns: []string{modelingdetails.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelingdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdu.mutation.done = true
	return n, nil
}

// ModelingDetailsUpdateOne is the builder for updating a single ModelingDetails entity.
type ModelingDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModelingDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModelingID sets the "modeling_id" field.
func (mduo *ModelingDetailsUpdateOne) SetModelingID(i int) *ModelingDetailsUpdateOne {
	mduo.mutation.SetModelingID(i)
	return mduo
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mduo *ModelingDetailsUpdateOne) SetNillableModelingID(i *int) *ModelingDetailsUpdateOne {
	if i != nil {
		mduo.SetModelingID(*i)
	}
	return mduo
}

// ClearModelingID clears the value of the "modeling_id" field.
func (mduo *ModelingDetailsUpdateOne) ClearModelingID() *ModelingDetailsUpdateOne {
	mduo.mutation.ClearModelingID()
	return mduo
}

// SetModel sets the "model" field.
func (mduo *ModelingDetailsUpdateOne) SetModel(s string) *ModelingDetailsUpdateOne {
	mduo.mutation.SetModel(s)
	return mduo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (mduo *ModelingDetailsUpdateOne) SetNillableModel(s *string) *ModelingDetailsUpdateOne {
	if s != nil {
		mduo.SetModel(*s)
	}
	return mduo
}

// SetDataType sets the "data_type" field.
func (mduo *ModelingDetailsUpdateOne) SetDataType(s string) *ModelingDetailsUpdateOne {
	mduo.mutation.SetDataType(s)
	return mduo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mduo *ModelingDetailsUpdateOne) SetNillableDataType(s *string) *ModelingDetailsUpdateOne {
	if s != nil {
		mduo.SetDataType(*s)
	}
	return mduo
}

// SetData sets the "data" field.
func (mduo *ModelingDetailsUpdateOne) SetData(s []string) *ModelingDetailsUpdateOne {
	mduo.mutation.SetData(s)
	return mduo
}

// AppendData appends s to the "data" field.
func (mduo *ModelingDetailsUpdateOne) AppendData(s []string) *ModelingDetailsUpdateOne {
	mduo.mutation.AppendData(s)
	return mduo
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mduo *ModelingDetailsUpdateOne) SetModeling(m *Modeling) *ModelingDetailsUpdateOne {
	return mduo.SetModelingID(m.ID)
}

// Mutation returns the ModelingDetailsMutation object of the builder.
func (mduo *ModelingDetailsUpdateOne) Mutation() *ModelingDetailsMutation {
	return mduo.mutation
}

// ClearModeling clears the "modeling" edge to the Modeling entity.
func (mduo *ModelingDetailsUpdateOne) ClearModeling() *ModelingDetailsUpdateOne {
	mduo.mutation.ClearModeling()
	return mduo
}

// Where appends a list predicates to the ModelingDetailsUpdate builder.
func (mduo *ModelingDetailsUpdateOne) Where(ps ...predicate.ModelingDetails) *ModelingDetailsUpdateOne {
	mduo.mutation.Where(ps...)
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *ModelingDetailsUpdateOne) Select(field string, fields ...string) *ModelingDetailsUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated ModelingDetails entity.
func (mduo *ModelingDetailsUpdateOne) Save(ctx context.Context) (*ModelingDetails, error) {
	return withHooks(ctx, mduo.sqlSave, mduo.mutation, mduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *ModelingDetailsUpdateOne) SaveX(ctx context.Context) *ModelingDetails {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *ModelingDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *ModelingDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mduo *ModelingDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModelingDetailsUpdateOne {
	mduo.modifiers = append(mduo.modifiers, modifiers...)
	return mduo
}

func (mduo *ModelingDetailsUpdateOne) sqlSave(ctx context.Context) (_node *ModelingDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(modelingdetails.Table, modelingdetails.Columns, sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt))
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ModelingDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modelingdetails.FieldID)
		for _, f := range fields {
			if !modelingdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != modelingdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mduo.mutation.Model(); ok {
		_spec.SetField(modelingdetails.FieldModel, field.TypeString, value)
	}
	if value, ok := mduo.mutation.DataType(); ok {
		_spec.SetField(modelingdetails.FieldDataType, field.TypeString, value)
	}
	if value, ok := mduo.mutation.Data(); ok {
		_spec.SetField(modelingdetails.FieldData, field.TypeJSON, value)
	}
	if value, ok := mduo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, modelingdetails.FieldData, value)
		})
	}
	if mduo.mutation.ModelingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingdetails.ModelingTable,
			Columns: []string{modelingdetails.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingdetails.ModelingTable,
			Columns: []string{modelingdetails.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mduo.modifiers...)
	_node = &ModelingDetails{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modelingdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mduo.mutation.done = true
	return _node, nil
}
