// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/predicate"
	"api_server/ent/project"
	"api_server/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetProjectID sets the "project_id" field.
func (tu *TaskUpdate) SetProjectID(i int) *TaskUpdate {
	tu.mutation.SetProjectID(i)
	return tu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProjectID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetProjectID(*i)
	}
	return tu
}

// ClearProjectID clears the value of the "project_id" field.
func (tu *TaskUpdate) ClearProjectID() *TaskUpdate {
	tu.mutation.ClearProjectID()
	return tu
}

// SetDatasetID sets the "dataset_id" field.
func (tu *TaskUpdate) SetDatasetID(i int) *TaskUpdate {
	tu.mutation.ResetDatasetID()
	tu.mutation.SetDatasetID(i)
	return tu
}

// SetNillableDatasetID sets the "dataset_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDatasetID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetDatasetID(*i)
	}
	return tu
}

// AddDatasetID adds i to the "dataset_id" field.
func (tu *TaskUpdate) AddDatasetID(i int) *TaskUpdate {
	tu.mutation.AddDatasetID(i)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetEngineType sets the "engine_type" field.
func (tu *TaskUpdate) SetEngineType(s string) *TaskUpdate {
	tu.mutation.SetEngineType(s)
	return tu
}

// SetNillableEngineType sets the "engine_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEngineType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetEngineType(*s)
	}
	return tu
}

// SetTargetMetric sets the "target_metric" field.
func (tu *TaskUpdate) SetTargetMetric(s string) *TaskUpdate {
	tu.mutation.SetTargetMetric(s)
	return tu
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTargetMetric(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTargetMetric(*s)
	}
	return tu
}

// SetParams sets the "params" field.
func (tu *TaskUpdate) SetParams(s []string) *TaskUpdate {
	tu.mutation.SetParams(s)
	return tu
}

// AppendParams appends s to the "params" field.
func (tu *TaskUpdate) AppendParams(s []string) *TaskUpdate {
	tu.mutation.AppendParams(s)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// SetProject sets the "project" edge to the Project entity.
func (tu *TaskUpdate) SetProject(p *Project) *TaskUpdate {
	return tu.SetProjectID(p.ID)
}

// AddModelingIDs adds the "modelings" edge to the Modeling entity by IDs.
func (tu *TaskUpdate) AddModelingIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddModelingIDs(ids...)
	return tu
}

// AddModelings adds the "modelings" edges to the Modeling entity.
func (tu *TaskUpdate) AddModelings(m ...*Modeling) *TaskUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddModelingIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tu *TaskUpdate) ClearProject() *TaskUpdate {
	tu.mutation.ClearProject()
	return tu
}

// ClearModelings clears all "modelings" edges to the Modeling entity.
func (tu *TaskUpdate) ClearModelings() *TaskUpdate {
	tu.mutation.ClearModelings()
	return tu
}

// RemoveModelingIDs removes the "modelings" edge to Modeling entities by IDs.
func (tu *TaskUpdate) RemoveModelingIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveModelingIDs(ids...)
	return tu
}

// RemoveModelings removes "modelings" edges to Modeling entities.
func (tu *TaskUpdate) RemoveModelings(m ...*Modeling) *TaskUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveModelingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.DatasetID(); ok {
		_spec.SetField(task.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDatasetID(); ok {
		_spec.AddField(task.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.EngineType(); ok {
		_spec.SetField(task.FieldEngineType, field.TypeString, value)
	}
	if value, ok := tu.mutation.TargetMetric(); ok {
		_spec.SetField(task.FieldTargetMetric, field.TypeString, value)
	}
	if value, ok := tu.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldParams, value)
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ModelingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedModelingsIDs(); len(nodes) > 0 && !tu.mutation.ModelingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ModelingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProjectID sets the "project_id" field.
func (tuo *TaskUpdateOne) SetProjectID(i int) *TaskUpdateOne {
	tuo.mutation.SetProjectID(i)
	return tuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProjectID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetProjectID(*i)
	}
	return tuo
}

// ClearProjectID clears the value of the "project_id" field.
func (tuo *TaskUpdateOne) ClearProjectID() *TaskUpdateOne {
	tuo.mutation.ClearProjectID()
	return tuo
}

// SetDatasetID sets the "dataset_id" field.
func (tuo *TaskUpdateOne) SetDatasetID(i int) *TaskUpdateOne {
	tuo.mutation.ResetDatasetID()
	tuo.mutation.SetDatasetID(i)
	return tuo
}

// SetNillableDatasetID sets the "dataset_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDatasetID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetDatasetID(*i)
	}
	return tuo
}

// AddDatasetID adds i to the "dataset_id" field.
func (tuo *TaskUpdateOne) AddDatasetID(i int) *TaskUpdateOne {
	tuo.mutation.AddDatasetID(i)
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetEngineType sets the "engine_type" field.
func (tuo *TaskUpdateOne) SetEngineType(s string) *TaskUpdateOne {
	tuo.mutation.SetEngineType(s)
	return tuo
}

// SetNillableEngineType sets the "engine_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEngineType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetEngineType(*s)
	}
	return tuo
}

// SetTargetMetric sets the "target_metric" field.
func (tuo *TaskUpdateOne) SetTargetMetric(s string) *TaskUpdateOne {
	tuo.mutation.SetTargetMetric(s)
	return tuo
}

// SetNillableTargetMetric sets the "target_metric" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTargetMetric(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTargetMetric(*s)
	}
	return tuo
}

// SetParams sets the "params" field.
func (tuo *TaskUpdateOne) SetParams(s []string) *TaskUpdateOne {
	tuo.mutation.SetParams(s)
	return tuo
}

// AppendParams appends s to the "params" field.
func (tuo *TaskUpdateOne) AppendParams(s []string) *TaskUpdateOne {
	tuo.mutation.AppendParams(s)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// SetProject sets the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) SetProject(p *Project) *TaskUpdateOne {
	return tuo.SetProjectID(p.ID)
}

// AddModelingIDs adds the "modelings" edge to the Modeling entity by IDs.
func (tuo *TaskUpdateOne) AddModelingIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddModelingIDs(ids...)
	return tuo
}

// AddModelings adds the "modelings" edges to the Modeling entity.
func (tuo *TaskUpdateOne) AddModelings(m ...*Modeling) *TaskUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddModelingIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) ClearProject() *TaskUpdateOne {
	tuo.mutation.ClearProject()
	return tuo
}

// ClearModelings clears all "modelings" edges to the Modeling entity.
func (tuo *TaskUpdateOne) ClearModelings() *TaskUpdateOne {
	tuo.mutation.ClearModelings()
	return tuo
}

// RemoveModelingIDs removes the "modelings" edge to Modeling entities by IDs.
func (tuo *TaskUpdateOne) RemoveModelingIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveModelingIDs(ids...)
	return tuo
}

// RemoveModelings removes "modelings" edges to Modeling entities.
func (tuo *TaskUpdateOne) RemoveModelings(m ...*Modeling) *TaskUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveModelingIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.DatasetID(); ok {
		_spec.SetField(task.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDatasetID(); ok {
		_spec.AddField(task.FieldDatasetID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.EngineType(); ok {
		_spec.SetField(task.FieldEngineType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TargetMetric(); ok {
		_spec.SetField(task.FieldTargetMetric, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Params(); ok {
		_spec.SetField(task.FieldParams, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldParams, value)
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ModelingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedModelingsIDs(); len(nodes) > 0 && !tuo.mutation.ModelingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ModelingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ModelingsTable,
			Columns: []string{task.ModelingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
