// Code generated by ent, DO NOT EDIT.

package task

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProjectID, v))
}

// DatasetID applies equality check predicate on the "dataset_id" field. It's identical to DatasetIDEQ.
func DatasetID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDatasetID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// EngineType applies equality check predicate on the "engine_type" field. It's identical to EngineTypeEQ.
func EngineType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEngineType, v))
}

// TargetMetric applies equality check predicate on the "target_metric" field. It's identical to TargetMetricEQ.
func TargetMetric(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTargetMetric, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDIsNil applies the IsNil predicate on the "project_id" field.
func ProjectIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldProjectID))
}

// ProjectIDNotNil applies the NotNil predicate on the "project_id" field.
func ProjectIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldProjectID))
}

// DatasetIDEQ applies the EQ predicate on the "dataset_id" field.
func DatasetIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDatasetID, v))
}

// DatasetIDNEQ applies the NEQ predicate on the "dataset_id" field.
func DatasetIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDatasetID, v))
}

// DatasetIDIn applies the In predicate on the "dataset_id" field.
func DatasetIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDatasetID, vs...))
}

// DatasetIDNotIn applies the NotIn predicate on the "dataset_id" field.
func DatasetIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDatasetID, vs...))
}

// DatasetIDGT applies the GT predicate on the "dataset_id" field.
func DatasetIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDatasetID, v))
}

// DatasetIDGTE applies the GTE predicate on the "dataset_id" field.
func DatasetIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDatasetID, v))
}

// DatasetIDLT applies the LT predicate on the "dataset_id" field.
func DatasetIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDatasetID, v))
}

// DatasetIDLTE applies the LTE predicate on the "dataset_id" field.
func DatasetIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDatasetID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldDescription, v))
}

// EngineTypeEQ applies the EQ predicate on the "engine_type" field.
func EngineTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEngineType, v))
}

// EngineTypeNEQ applies the NEQ predicate on the "engine_type" field.
func EngineTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldEngineType, v))
}

// EngineTypeIn applies the In predicate on the "engine_type" field.
func EngineTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldEngineType, vs...))
}

// EngineTypeNotIn applies the NotIn predicate on the "engine_type" field.
func EngineTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldEngineType, vs...))
}

// EngineTypeGT applies the GT predicate on the "engine_type" field.
func EngineTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldEngineType, v))
}

// EngineTypeGTE applies the GTE predicate on the "engine_type" field.
func EngineTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldEngineType, v))
}

// EngineTypeLT applies the LT predicate on the "engine_type" field.
func EngineTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldEngineType, v))
}

// EngineTypeLTE applies the LTE predicate on the "engine_type" field.
func EngineTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldEngineType, v))
}

// EngineTypeContains applies the Contains predicate on the "engine_type" field.
func EngineTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldEngineType, v))
}

// EngineTypeHasPrefix applies the HasPrefix predicate on the "engine_type" field.
func EngineTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldEngineType, v))
}

// EngineTypeHasSuffix applies the HasSuffix predicate on the "engine_type" field.
func EngineTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldEngineType, v))
}

// EngineTypeEqualFold applies the EqualFold predicate on the "engine_type" field.
func EngineTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldEngineType, v))
}

// EngineTypeContainsFold applies the ContainsFold predicate on the "engine_type" field.
func EngineTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldEngineType, v))
}

// TargetMetricEQ applies the EQ predicate on the "target_metric" field.
func TargetMetricEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTargetMetric, v))
}

// TargetMetricNEQ applies the NEQ predicate on the "target_metric" field.
func TargetMetricNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTargetMetric, v))
}

// TargetMetricIn applies the In predicate on the "target_metric" field.
func TargetMetricIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTargetMetric, vs...))
}

// TargetMetricNotIn applies the NotIn predicate on the "target_metric" field.
func TargetMetricNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTargetMetric, vs...))
}

// TargetMetricGT applies the GT predicate on the "target_metric" field.
func TargetMetricGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTargetMetric, v))
}

// TargetMetricGTE applies the GTE predicate on the "target_metric" field.
func TargetMetricGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTargetMetric, v))
}

// TargetMetricLT applies the LT predicate on the "target_metric" field.
func TargetMetricLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTargetMetric, v))
}

// TargetMetricLTE applies the LTE predicate on the "target_metric" field.
func TargetMetricLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTargetMetric, v))
}

// TargetMetricContains applies the Contains predicate on the "target_metric" field.
func TargetMetricContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTargetMetric, v))
}

// TargetMetricHasPrefix applies the HasPrefix predicate on the "target_metric" field.
func TargetMetricHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTargetMetric, v))
}

// TargetMetricHasSuffix applies the HasSuffix predicate on the "target_metric" field.
func TargetMetricHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTargetMetric, v))
}

// TargetMetricEqualFold applies the EqualFold predicate on the "target_metric" field.
func TargetMetricEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTargetMetric, v))
}

// TargetMetricContainsFold applies the ContainsFold predicate on the "target_metric" field.
func TargetMetricContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTargetMetric, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModelings applies the HasEdge predicate on the "modelings" edge.
func HasModelings() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ModelingsTable, ModelingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelingsWith applies the HasEdge predicate on the "modelings" edge with a given conditions (other predicates).
func HasModelingsWith(preds ...predicate.Modeling) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newModelingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
