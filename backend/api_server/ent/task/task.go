// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldDatasetID holds the string denoting the dataset_id field in the database.
	FieldDatasetID = "dataset_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEngineType holds the string denoting the engine_type field in the database.
	FieldEngineType = "engine_type"
	// FieldTargetMetric holds the string denoting the target_metric field in the database.
	FieldTargetMetric = "target_metric"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeModelings holds the string denoting the modelings edge name in mutations.
	EdgeModelings = "modelings"
	// Table holds the table name of the task in the database.
	Table = "task"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "task"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "project"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// ModelingsTable is the table that holds the modelings relation/edge.
	ModelingsTable = "modeling"
	// ModelingsInverseTable is the table name for the Modeling entity.
	// It exists in this package in order to avoid circular dependency with the "modeling" package.
	ModelingsInverseTable = "modeling"
	// ModelingsColumn is the table column denoting the modelings relation/edge.
	ModelingsColumn = "task_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldDatasetID,
	FieldTitle,
	FieldDescription,
	FieldEngineType,
	FieldTargetMetric,
	FieldParams,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultProjectID holds the default value on creation for the "project_id" field.
	DefaultProjectID int
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultTargetMetric holds the default value on creation for the "target_metric" field.
	DefaultTargetMetric string
	// DefaultParams holds the default value on creation for the "params" field.
	DefaultParams []string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByDatasetID orders the results by the dataset_id field.
func ByDatasetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatasetID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEngineType orders the results by the engine_type field.
func ByEngineType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEngineType, opts...).ToFunc()
}

// ByTargetMetric orders the results by the target_metric field.
func ByTargetMetric(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetMetric, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByModelingsCount orders the results by modelings count.
func ByModelingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModelingsStep(), opts...)
	}
}

// ByModelings orders the results by modelings terms.
func ByModelings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newModelingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ModelingsTable, ModelingsColumn),
	)
}
