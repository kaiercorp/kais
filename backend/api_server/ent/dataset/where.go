// Code generated by ent, DO NOT EDIT.

package dataset

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldName, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldParentID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDescription, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldPath, v))
}

// IsValid applies equality check predicate on the "is_valid" field. It's identical to IsValidEQ.
func IsValid(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsValid, v))
}

// IsTrainable applies equality check predicate on the "is_trainable" field. It's identical to IsTrainableEQ.
func IsTrainable(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsTrainable, v))
}

// IsTestable applies equality check predicate on the "is_testable" field. It's identical to IsTestableEQ.
func IsTestable(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsTestable, v))
}

// IsLeaf applies equality check predicate on the "is_leaf" field. It's identical to IsLeafEQ.
func IsLeaf(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsLeaf, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsDeleted, v))
}

// IsUse applies equality check predicate on the "is_use" field. It's identical to IsUseEQ.
func IsUse(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsUse, v))
}

// StatPath applies equality check predicate on the "stat_path" field. It's identical to StatPathEQ.
func StatPath(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldStatPath, v))
}

// DataType applies equality check predicate on the "data_type" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDataType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDeletedAt, v))
}

// DrID applies equality check predicate on the "dr_id" field. It's identical to DrIDEQ.
func DrID(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDrID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContainsFold(FieldName, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldNotNull(FieldParentID))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContainsFold(FieldDescription, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContainsFold(FieldPath, v))
}

// IsValidEQ applies the EQ predicate on the "is_valid" field.
func IsValidEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsValid, v))
}

// IsValidNEQ applies the NEQ predicate on the "is_valid" field.
func IsValidNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsValid, v))
}

// IsTrainableEQ applies the EQ predicate on the "is_trainable" field.
func IsTrainableEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsTrainable, v))
}

// IsTrainableNEQ applies the NEQ predicate on the "is_trainable" field.
func IsTrainableNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsTrainable, v))
}

// IsTestableEQ applies the EQ predicate on the "is_testable" field.
func IsTestableEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsTestable, v))
}

// IsTestableNEQ applies the NEQ predicate on the "is_testable" field.
func IsTestableNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsTestable, v))
}

// IsLeafEQ applies the EQ predicate on the "is_leaf" field.
func IsLeafEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsLeaf, v))
}

// IsLeafNEQ applies the NEQ predicate on the "is_leaf" field.
func IsLeafNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsLeaf, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsUseEQ applies the EQ predicate on the "is_use" field.
func IsUseEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldIsUse, v))
}

// IsUseNEQ applies the NEQ predicate on the "is_use" field.
func IsUseNEQ(v bool) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldIsUse, v))
}

// StatPathEQ applies the EQ predicate on the "stat_path" field.
func StatPathEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldStatPath, v))
}

// StatPathNEQ applies the NEQ predicate on the "stat_path" field.
func StatPathNEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldStatPath, v))
}

// StatPathIn applies the In predicate on the "stat_path" field.
func StatPathIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldStatPath, vs...))
}

// StatPathNotIn applies the NotIn predicate on the "stat_path" field.
func StatPathNotIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldStatPath, vs...))
}

// StatPathGT applies the GT predicate on the "stat_path" field.
func StatPathGT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldStatPath, v))
}

// StatPathGTE applies the GTE predicate on the "stat_path" field.
func StatPathGTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldStatPath, v))
}

// StatPathLT applies the LT predicate on the "stat_path" field.
func StatPathLT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldStatPath, v))
}

// StatPathLTE applies the LTE predicate on the "stat_path" field.
func StatPathLTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldStatPath, v))
}

// StatPathContains applies the Contains predicate on the "stat_path" field.
func StatPathContains(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContains(FieldStatPath, v))
}

// StatPathHasPrefix applies the HasPrefix predicate on the "stat_path" field.
func StatPathHasPrefix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasPrefix(FieldStatPath, v))
}

// StatPathHasSuffix applies the HasSuffix predicate on the "stat_path" field.
func StatPathHasSuffix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasSuffix(FieldStatPath, v))
}

// StatPathIsNil applies the IsNil predicate on the "stat_path" field.
func StatPathIsNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldIsNull(FieldStatPath))
}

// StatPathNotNil applies the NotNil predicate on the "stat_path" field.
func StatPathNotNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldNotNull(FieldStatPath))
}

// StatPathEqualFold applies the EqualFold predicate on the "stat_path" field.
func StatPathEqualFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEqualFold(FieldStatPath, v))
}

// StatPathContainsFold applies the ContainsFold predicate on the "stat_path" field.
func StatPathContainsFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContainsFold(FieldStatPath, v))
}

// EngineIsNil applies the IsNil predicate on the "engine" field.
func EngineIsNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldIsNull(FieldEngine))
}

// EngineNotNil applies the NotNil predicate on the "engine" field.
func EngineNotNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldNotNull(FieldEngine))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...string) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldDataType, vs...))
}

// DataTypeGT applies the GT predicate on the "data_type" field.
func DataTypeGT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldDataType, v))
}

// DataTypeGTE applies the GTE predicate on the "data_type" field.
func DataTypeGTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldDataType, v))
}

// DataTypeLT applies the LT predicate on the "data_type" field.
func DataTypeLT(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldDataType, v))
}

// DataTypeLTE applies the LTE predicate on the "data_type" field.
func DataTypeLTE(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldDataType, v))
}

// DataTypeContains applies the Contains predicate on the "data_type" field.
func DataTypeContains(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContains(FieldDataType, v))
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "data_type" field.
func DataTypeHasPrefix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasPrefix(FieldDataType, v))
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "data_type" field.
func DataTypeHasSuffix(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldHasSuffix(FieldDataType, v))
}

// DataTypeEqualFold applies the EqualFold predicate on the "data_type" field.
func DataTypeEqualFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldEqualFold(FieldDataType, v))
}

// DataTypeContainsFold applies the ContainsFold predicate on the "data_type" field.
func DataTypeContainsFold(v string) predicate.Dataset {
	return predicate.Dataset(sql.FieldContainsFold(FieldDataType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldDeletedAt, v))
}

// DrIDEQ applies the EQ predicate on the "dr_id" field.
func DrIDEQ(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldEQ(FieldDrID, v))
}

// DrIDNEQ applies the NEQ predicate on the "dr_id" field.
func DrIDNEQ(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNEQ(FieldDrID, v))
}

// DrIDIn applies the In predicate on the "dr_id" field.
func DrIDIn(vs ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldIn(FieldDrID, vs...))
}

// DrIDNotIn applies the NotIn predicate on the "dr_id" field.
func DrIDNotIn(vs ...int) predicate.Dataset {
	return predicate.Dataset(sql.FieldNotIn(FieldDrID, vs...))
}

// DrIDGT applies the GT predicate on the "dr_id" field.
func DrIDGT(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGT(FieldDrID, v))
}

// DrIDGTE applies the GTE predicate on the "dr_id" field.
func DrIDGTE(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldGTE(FieldDrID, v))
}

// DrIDLT applies the LT predicate on the "dr_id" field.
func DrIDLT(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLT(FieldDrID, v))
}

// DrIDLTE applies the LTE predicate on the "dr_id" field.
func DrIDLTE(v int) predicate.Dataset {
	return predicate.Dataset(sql.FieldLTE(FieldDrID, v))
}

// DrIDIsNil applies the IsNil predicate on the "dr_id" field.
func DrIDIsNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldIsNull(FieldDrID))
}

// DrIDNotNil applies the NotNil predicate on the "dr_id" field.
func DrIDNotNil() predicate.Dataset {
	return predicate.Dataset(sql.FieldNotNull(FieldDrID))
}

// HasDatasetroot applies the HasEdge predicate on the "datasetroot" edge.
func HasDatasetroot() predicate.Dataset {
	return predicate.Dataset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DatasetrootTable, DatasetrootColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDatasetrootWith applies the HasEdge predicate on the "datasetroot" edge with a given conditions (other predicates).
func HasDatasetrootWith(preds ...predicate.DatasetRoot) predicate.Dataset {
	return predicate.Dataset(func(s *sql.Selector) {
		step := newDatasetrootStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dataset) predicate.Dataset {
	return predicate.Dataset(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dataset) predicate.Dataset {
	return predicate.Dataset(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dataset) predicate.Dataset {
	return predicate.Dataset(sql.NotPredicates(p))
}
