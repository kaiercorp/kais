// Code generated by ent, DO NOT EDIT.

package dataset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dataset type in the database.
	Label = "dataset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldIsValid holds the string denoting the is_valid field in the database.
	FieldIsValid = "is_valid"
	// FieldIsTrainable holds the string denoting the is_trainable field in the database.
	FieldIsTrainable = "is_trainable"
	// FieldIsTestable holds the string denoting the is_testable field in the database.
	FieldIsTestable = "is_testable"
	// FieldIsLeaf holds the string denoting the is_leaf field in the database.
	FieldIsLeaf = "is_leaf"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldIsUse holds the string denoting the is_use field in the database.
	FieldIsUse = "is_use"
	// FieldStat holds the string denoting the stat field in the database.
	FieldStat = "stat"
	// FieldStatPath holds the string denoting the stat_path field in the database.
	FieldStatPath = "stat_path"
	// FieldEngine holds the string denoting the engine field in the database.
	FieldEngine = "engine"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDrID holds the string denoting the dr_id field in the database.
	FieldDrID = "dr_id"
	// EdgeDatasetroot holds the string denoting the datasetroot edge name in mutations.
	EdgeDatasetroot = "datasetroot"
	// Table holds the table name of the dataset in the database.
	Table = "dataset"
	// DatasetrootTable is the table that holds the datasetroot relation/edge.
	DatasetrootTable = "dataset"
	// DatasetrootInverseTable is the table name for the DatasetRoot entity.
	// It exists in this package in order to avoid circular dependency with the "datasetroot" package.
	DatasetrootInverseTable = "dataset_root"
	// DatasetrootColumn is the table column denoting the datasetroot relation/edge.
	DatasetrootColumn = "dataset_root_datasets"
)

// Columns holds all SQL columns for dataset fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldParentID,
	FieldDescription,
	FieldPath,
	FieldIsValid,
	FieldIsTrainable,
	FieldIsTestable,
	FieldIsLeaf,
	FieldIsDeleted,
	FieldIsUse,
	FieldStat,
	FieldStatPath,
	FieldEngine,
	FieldDataType,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldDrID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dataset"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dataset_root_datasets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsValid holds the default value on creation for the "is_valid" field.
	DefaultIsValid bool
	// DefaultIsTrainable holds the default value on creation for the "is_trainable" field.
	DefaultIsTrainable bool
	// DefaultIsTestable holds the default value on creation for the "is_testable" field.
	DefaultIsTestable bool
	// DefaultIsLeaf holds the default value on creation for the "is_leaf" field.
	DefaultIsLeaf bool
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// DefaultIsUse holds the default value on creation for the "is_use" field.
	DefaultIsUse bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt func() time.Time
	// DefaultDrID holds the default value on creation for the "dr_id" field.
	DefaultDrID int
)

// OrderOption defines the ordering options for the Dataset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByIsValid orders the results by the is_valid field.
func ByIsValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsValid, opts...).ToFunc()
}

// ByIsTrainable orders the results by the is_trainable field.
func ByIsTrainable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTrainable, opts...).ToFunc()
}

// ByIsTestable orders the results by the is_testable field.
func ByIsTestable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTestable, opts...).ToFunc()
}

// ByIsLeaf orders the results by the is_leaf field.
func ByIsLeaf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLeaf, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByIsUse orders the results by the is_use field.
func ByIsUse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUse, opts...).ToFunc()
}

// ByStatPath orders the results by the stat_path field.
func ByStatPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatPath, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDrID orders the results by the dr_id field.
func ByDrID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrID, opts...).ToFunc()
}

// ByDatasetrootField orders the results by datasetroot field.
func ByDatasetrootField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatasetrootStep(), sql.OrderByField(field, opts...))
	}
}
func newDatasetrootStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatasetrootInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DatasetrootTable, DatasetrootColumn),
	)
}
