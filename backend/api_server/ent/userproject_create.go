// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/project"
	"api_server/ent/userproject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProjectCreate is the builder for creating a UserProject entity.
type UserProjectCreate struct {
	config
	mutation *UserProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (upc *UserProjectCreate) SetProjectID(i int) *UserProjectCreate {
	upc.mutation.SetProjectID(i)
	return upc
}

// SetUsername sets the "username" field.
func (upc *UserProjectCreate) SetUsername(s string) *UserProjectCreate {
	upc.mutation.SetUsername(s)
	return upc
}

// SetIsUse sets the "is_use" field.
func (upc *UserProjectCreate) SetIsUse(b bool) *UserProjectCreate {
	upc.mutation.SetIsUse(b)
	return upc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableIsUse(b *bool) *UserProjectCreate {
	if b != nil {
		upc.SetIsUse(*b)
	}
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserProjectCreate) SetCreatedAt(t time.Time) *UserProjectCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableCreatedAt(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserProjectCreate) SetUpdatedAt(t time.Time) *UserProjectCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableUpdatedAt(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserProjectCreate) SetID(i int) *UserProjectCreate {
	upc.mutation.SetID(i)
	return upc
}

// SetProject sets the "project" edge to the Project entity.
func (upc *UserProjectCreate) SetProject(p *Project) *UserProjectCreate {
	return upc.SetProjectID(p.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upc *UserProjectCreate) Mutation() *UserProjectMutation {
	return upc.mutation
}

// Save creates the UserProject in the database.
func (upc *UserProjectCreate) Save(ctx context.Context) (*UserProject, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserProjectCreate) SaveX(ctx context.Context) *UserProject {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserProjectCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserProjectCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserProjectCreate) defaults() {
	if _, ok := upc.mutation.IsUse(); !ok {
		v := userproject.DefaultIsUse
		upc.mutation.SetIsUse(v)
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := userproject.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		v := userproject.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserProjectCreate) check() error {
	if _, ok := upc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "UserProject.project_id"`)}
	}
	if _, ok := upc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "UserProject.username"`)}
	}
	if _, ok := upc.mutation.IsUse(); !ok {
		return &ValidationError{Name: "is_use", err: errors.New(`ent: missing required field "UserProject.is_use"`)}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserProject.created_at"`)}
	}
	if _, ok := upc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "UserProject.project"`)}
	}
	return nil
}

func (upc *UserProjectCreate) sqlSave(ctx context.Context) (*UserProject, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserProjectCreate) createSpec() (*UserProject, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProject{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userproject.Table, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.Username(); ok {
		_spec.SetField(userproject.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := upc.mutation.IsUse(); ok {
		_spec.SetField(userproject.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := upc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.ProjectTable,
			Columns: []string{userproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProject.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProjectUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (upc *UserProjectCreate) OnConflict(opts ...sql.ConflictOption) *UserProjectUpsertOne {
	upc.conflict = opts
	return &UserProjectUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserProjectCreate) OnConflictColumns(columns ...string) *UserProjectUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserProjectUpsertOne{
		create: upc,
	}
}

type (
	// UserProjectUpsertOne is the builder for "upsert"-ing
	//  one UserProject node.
	UserProjectUpsertOne struct {
		create *UserProjectCreate
	}

	// UserProjectUpsert is the "OnConflict" setter.
	UserProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *UserProjectUpsert) SetProjectID(v int) *UserProjectUpsert {
	u.Set(userproject.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *UserProjectUpsert) UpdateProjectID() *UserProjectUpsert {
	u.SetExcluded(userproject.FieldProjectID)
	return u
}

// SetUsername sets the "username" field.
func (u *UserProjectUpsert) SetUsername(v string) *UserProjectUpsert {
	u.Set(userproject.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserProjectUpsert) UpdateUsername() *UserProjectUpsert {
	u.SetExcluded(userproject.FieldUsername)
	return u
}

// SetIsUse sets the "is_use" field.
func (u *UserProjectUpsert) SetIsUse(v bool) *UserProjectUpsert {
	u.Set(userproject.FieldIsUse, v)
	return u
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *UserProjectUpsert) UpdateIsUse() *UserProjectUpsert {
	u.SetExcluded(userproject.FieldIsUse)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProjectUpsert) SetUpdatedAt(v time.Time) *UserProjectUpsert {
	u.Set(userproject.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProjectUpsert) UpdateUpdatedAt() *UserProjectUpsert {
	u.SetExcluded(userproject.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserProjectUpsert) ClearUpdatedAt() *UserProjectUpsert {
	u.SetNull(userproject.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserProjectUpsertOne) UpdateNewValues() *UserProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userproject.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userproject.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserProjectUpsertOne) Ignore() *UserProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProjectUpsertOne) DoNothing() *UserProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProjectCreate.OnConflict
// documentation for more info.
func (u *UserProjectUpsertOne) Update(set func(*UserProjectUpsert)) *UserProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *UserProjectUpsertOne) SetProjectID(v int) *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *UserProjectUpsertOne) UpdateProjectID() *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateProjectID()
	})
}

// SetUsername sets the "username" field.
func (u *UserProjectUpsertOne) SetUsername(v string) *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserProjectUpsertOne) UpdateUsername() *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateUsername()
	})
}

// SetIsUse sets the "is_use" field.
func (u *UserProjectUpsertOne) SetIsUse(v bool) *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *UserProjectUpsertOne) UpdateIsUse() *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateIsUse()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProjectUpsertOne) SetUpdatedAt(v time.Time) *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProjectUpsertOne) UpdateUpdatedAt() *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserProjectUpsertOne) ClearUpdatedAt() *UserProjectUpsertOne {
	return u.Update(func(s *UserProjectUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserProjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserProjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserProjectCreateBulk is the builder for creating many UserProject entities in bulk.
type UserProjectCreateBulk struct {
	config
	err      error
	builders []*UserProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the UserProject entities in the database.
func (upcb *UserProjectCreateBulk) Save(ctx context.Context) ([]*UserProject, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserProject, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserProjectCreateBulk) SaveX(ctx context.Context) []*UserProject {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserProjectCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProjectUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserProjectUpsertBulk {
	upcb.conflict = opts
	return &UserProjectUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserProjectCreateBulk) OnConflictColumns(columns ...string) *UserProjectUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserProjectUpsertBulk{
		create: upcb,
	}
}

// UserProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of UserProject nodes.
type UserProjectUpsertBulk struct {
	create *UserProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userproject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserProjectUpsertBulk) UpdateNewValues() *UserProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userproject.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userproject.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserProjectUpsertBulk) Ignore() *UserProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProjectUpsertBulk) DoNothing() *UserProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProjectCreateBulk.OnConflict
// documentation for more info.
func (u *UserProjectUpsertBulk) Update(set func(*UserProjectUpsert)) *UserProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *UserProjectUpsertBulk) SetProjectID(v int) *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *UserProjectUpsertBulk) UpdateProjectID() *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateProjectID()
	})
}

// SetUsername sets the "username" field.
func (u *UserProjectUpsertBulk) SetUsername(v string) *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserProjectUpsertBulk) UpdateUsername() *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateUsername()
	})
}

// SetIsUse sets the "is_use" field.
func (u *UserProjectUpsertBulk) SetIsUse(v bool) *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *UserProjectUpsertBulk) UpdateIsUse() *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateIsUse()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProjectUpsertBulk) SetUpdatedAt(v time.Time) *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProjectUpsertBulk) UpdateUpdatedAt() *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserProjectUpsertBulk) ClearUpdatedAt() *UserProjectUpsertBulk {
	return u.Update(func(s *UserProjectUpsert) {
		s.ClearUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
