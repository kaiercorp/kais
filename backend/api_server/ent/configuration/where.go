// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldID, id))
}

// ConfigType applies equality check predicate on the "config_type" field. It's identical to ConfigTypeEQ.
func ConfigType(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigType, v))
}

// ConfigKey applies equality check predicate on the "config_key" field. It's identical to ConfigKeyEQ.
func ConfigKey(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigKey, v))
}

// ConfigVal applies equality check predicate on the "config_val" field. It's identical to ConfigValEQ.
func ConfigVal(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigVal, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldUpdatedAt, v))
}

// ConfigTypeEQ applies the EQ predicate on the "config_type" field.
func ConfigTypeEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigType, v))
}

// ConfigTypeNEQ applies the NEQ predicate on the "config_type" field.
func ConfigTypeNEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldConfigType, v))
}

// ConfigTypeIn applies the In predicate on the "config_type" field.
func ConfigTypeIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldConfigType, vs...))
}

// ConfigTypeNotIn applies the NotIn predicate on the "config_type" field.
func ConfigTypeNotIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldConfigType, vs...))
}

// ConfigTypeGT applies the GT predicate on the "config_type" field.
func ConfigTypeGT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldConfigType, v))
}

// ConfigTypeGTE applies the GTE predicate on the "config_type" field.
func ConfigTypeGTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldConfigType, v))
}

// ConfigTypeLT applies the LT predicate on the "config_type" field.
func ConfigTypeLT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldConfigType, v))
}

// ConfigTypeLTE applies the LTE predicate on the "config_type" field.
func ConfigTypeLTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldConfigType, v))
}

// ConfigTypeContains applies the Contains predicate on the "config_type" field.
func ConfigTypeContains(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContains(FieldConfigType, v))
}

// ConfigTypeHasPrefix applies the HasPrefix predicate on the "config_type" field.
func ConfigTypeHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasPrefix(FieldConfigType, v))
}

// ConfigTypeHasSuffix applies the HasSuffix predicate on the "config_type" field.
func ConfigTypeHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasSuffix(FieldConfigType, v))
}

// ConfigTypeEqualFold applies the EqualFold predicate on the "config_type" field.
func ConfigTypeEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEqualFold(FieldConfigType, v))
}

// ConfigTypeContainsFold applies the ContainsFold predicate on the "config_type" field.
func ConfigTypeContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContainsFold(FieldConfigType, v))
}

// ConfigKeyEQ applies the EQ predicate on the "config_key" field.
func ConfigKeyEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigKey, v))
}

// ConfigKeyNEQ applies the NEQ predicate on the "config_key" field.
func ConfigKeyNEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldConfigKey, v))
}

// ConfigKeyIn applies the In predicate on the "config_key" field.
func ConfigKeyIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldConfigKey, vs...))
}

// ConfigKeyNotIn applies the NotIn predicate on the "config_key" field.
func ConfigKeyNotIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldConfigKey, vs...))
}

// ConfigKeyGT applies the GT predicate on the "config_key" field.
func ConfigKeyGT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldConfigKey, v))
}

// ConfigKeyGTE applies the GTE predicate on the "config_key" field.
func ConfigKeyGTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldConfigKey, v))
}

// ConfigKeyLT applies the LT predicate on the "config_key" field.
func ConfigKeyLT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldConfigKey, v))
}

// ConfigKeyLTE applies the LTE predicate on the "config_key" field.
func ConfigKeyLTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldConfigKey, v))
}

// ConfigKeyContains applies the Contains predicate on the "config_key" field.
func ConfigKeyContains(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContains(FieldConfigKey, v))
}

// ConfigKeyHasPrefix applies the HasPrefix predicate on the "config_key" field.
func ConfigKeyHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasPrefix(FieldConfigKey, v))
}

// ConfigKeyHasSuffix applies the HasSuffix predicate on the "config_key" field.
func ConfigKeyHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasSuffix(FieldConfigKey, v))
}

// ConfigKeyEqualFold applies the EqualFold predicate on the "config_key" field.
func ConfigKeyEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEqualFold(FieldConfigKey, v))
}

// ConfigKeyContainsFold applies the ContainsFold predicate on the "config_key" field.
func ConfigKeyContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContainsFold(FieldConfigKey, v))
}

// ConfigValEQ applies the EQ predicate on the "config_val" field.
func ConfigValEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldConfigVal, v))
}

// ConfigValNEQ applies the NEQ predicate on the "config_val" field.
func ConfigValNEQ(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldConfigVal, v))
}

// ConfigValIn applies the In predicate on the "config_val" field.
func ConfigValIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldConfigVal, vs...))
}

// ConfigValNotIn applies the NotIn predicate on the "config_val" field.
func ConfigValNotIn(vs ...string) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldConfigVal, vs...))
}

// ConfigValGT applies the GT predicate on the "config_val" field.
func ConfigValGT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldConfigVal, v))
}

// ConfigValGTE applies the GTE predicate on the "config_val" field.
func ConfigValGTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldConfigVal, v))
}

// ConfigValLT applies the LT predicate on the "config_val" field.
func ConfigValLT(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldConfigVal, v))
}

// ConfigValLTE applies the LTE predicate on the "config_val" field.
func ConfigValLTE(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldConfigVal, v))
}

// ConfigValContains applies the Contains predicate on the "config_val" field.
func ConfigValContains(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContains(FieldConfigVal, v))
}

// ConfigValHasPrefix applies the HasPrefix predicate on the "config_val" field.
func ConfigValHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasPrefix(FieldConfigVal, v))
}

// ConfigValHasSuffix applies the HasSuffix predicate on the "config_val" field.
func ConfigValHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldHasSuffix(FieldConfigVal, v))
}

// ConfigValEqualFold applies the EqualFold predicate on the "config_val" field.
func ConfigValEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldEqualFold(FieldConfigVal, v))
}

// ConfigValContainsFold applies the ContainsFold predicate on the "config_val" field.
func ConfigValContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(sql.FieldContainsFold(FieldConfigVal, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Configuration {
	return predicate.Configuration(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Configuration {
	return predicate.Configuration(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.NotPredicates(p))
}
