// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/device"
	"api_server/ent/gpu"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks     []Hook
	mutation  *DeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DeviceUpdate) SetName(s string) *DeviceUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableName(s *string) *DeviceUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetIP sets the "ip" field.
func (du *DeviceUpdate) SetIP(s string) *DeviceUpdate {
	du.mutation.SetIP(s)
	return du
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableIP(s *string) *DeviceUpdate {
	if s != nil {
		du.SetIP(*s)
	}
	return du
}

// SetPort sets the "port" field.
func (du *DeviceUpdate) SetPort(i int) *DeviceUpdate {
	du.mutation.ResetPort()
	du.mutation.SetPort(i)
	return du
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (du *DeviceUpdate) SetNillablePort(i *int) *DeviceUpdate {
	if i != nil {
		du.SetPort(*i)
	}
	return du
}

// AddPort adds i to the "port" field.
func (du *DeviceUpdate) AddPort(i int) *DeviceUpdate {
	du.mutation.AddPort(i)
	return du
}

// SetIsUse sets the "is_use" field.
func (du *DeviceUpdate) SetIsUse(b bool) *DeviceUpdate {
	du.mutation.SetIsUse(b)
	return du
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableIsUse(b *bool) *DeviceUpdate {
	if b != nil {
		du.SetIsUse(*b)
	}
	return du
}

// SetType sets the "type" field.
func (du *DeviceUpdate) SetType(s string) *DeviceUpdate {
	du.mutation.SetType(s)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableType(s *string) *DeviceUpdate {
	if s != nil {
		du.SetType(*s)
	}
	return du
}

// SetConnection sets the "connection" field.
func (du *DeviceUpdate) SetConnection(s string) *DeviceUpdate {
	du.mutation.SetConnection(s)
	return du
}

// SetNillableConnection sets the "connection" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableConnection(s *string) *DeviceUpdate {
	if s != nil {
		du.SetConnection(*s)
	}
	return du
}

// SetAvailable sets the "available" field.
func (du *DeviceUpdate) SetAvailable(s string) *DeviceUpdate {
	du.mutation.SetAvailable(s)
	return du
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableAvailable(s *string) *DeviceUpdate {
	if s != nil {
		du.SetAvailable(*s)
	}
	return du
}

// AddGpuIDs adds the "gpu" edge to the Gpu entity by IDs.
func (du *DeviceUpdate) AddGpuIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddGpuIDs(ids...)
	return du
}

// AddGpu adds the "gpu" edges to the Gpu entity.
func (du *DeviceUpdate) AddGpu(g ...*Gpu) *DeviceUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.AddGpuIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearGpu clears all "gpu" edges to the Gpu entity.
func (du *DeviceUpdate) ClearGpu() *DeviceUpdate {
	du.mutation.ClearGpu()
	return du
}

// RemoveGpuIDs removes the "gpu" edge to Gpu entities by IDs.
func (du *DeviceUpdate) RemoveGpuIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveGpuIDs(ids...)
	return du
}

// RemoveGpu removes "gpu" edges to Gpu entities.
func (du *DeviceUpdate) RemoveGpu(g ...*Gpu) *DeviceUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.RemoveGpuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DeviceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.IP(); ok {
		_spec.SetField(device.FieldIP, field.TypeString, value)
	}
	if value, ok := du.mutation.Port(); ok {
		_spec.SetField(device.FieldPort, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedPort(); ok {
		_spec.AddField(device.FieldPort, field.TypeInt, value)
	}
	if value, ok := du.mutation.IsUse(); ok {
		_spec.SetField(device.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeString, value)
	}
	if value, ok := du.mutation.Connection(); ok {
		_spec.SetField(device.FieldConnection, field.TypeString, value)
	}
	if value, ok := du.mutation.Available(); ok {
		_spec.SetField(device.FieldAvailable, field.TypeString, value)
	}
	if du.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedGpuIDs(); len(nodes) > 0 && !du.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (duo *DeviceUpdateOne) SetName(s string) *DeviceUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableName(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetIP sets the "ip" field.
func (duo *DeviceUpdateOne) SetIP(s string) *DeviceUpdateOne {
	duo.mutation.SetIP(s)
	return duo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableIP(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetIP(*s)
	}
	return duo
}

// SetPort sets the "port" field.
func (duo *DeviceUpdateOne) SetPort(i int) *DeviceUpdateOne {
	duo.mutation.ResetPort()
	duo.mutation.SetPort(i)
	return duo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillablePort(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetPort(*i)
	}
	return duo
}

// AddPort adds i to the "port" field.
func (duo *DeviceUpdateOne) AddPort(i int) *DeviceUpdateOne {
	duo.mutation.AddPort(i)
	return duo
}

// SetIsUse sets the "is_use" field.
func (duo *DeviceUpdateOne) SetIsUse(b bool) *DeviceUpdateOne {
	duo.mutation.SetIsUse(b)
	return duo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableIsUse(b *bool) *DeviceUpdateOne {
	if b != nil {
		duo.SetIsUse(*b)
	}
	return duo
}

// SetType sets the "type" field.
func (duo *DeviceUpdateOne) SetType(s string) *DeviceUpdateOne {
	duo.mutation.SetType(s)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableType(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetType(*s)
	}
	return duo
}

// SetConnection sets the "connection" field.
func (duo *DeviceUpdateOne) SetConnection(s string) *DeviceUpdateOne {
	duo.mutation.SetConnection(s)
	return duo
}

// SetNillableConnection sets the "connection" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableConnection(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetConnection(*s)
	}
	return duo
}

// SetAvailable sets the "available" field.
func (duo *DeviceUpdateOne) SetAvailable(s string) *DeviceUpdateOne {
	duo.mutation.SetAvailable(s)
	return duo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableAvailable(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetAvailable(*s)
	}
	return duo
}

// AddGpuIDs adds the "gpu" edge to the Gpu entity by IDs.
func (duo *DeviceUpdateOne) AddGpuIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddGpuIDs(ids...)
	return duo
}

// AddGpu adds the "gpu" edges to the Gpu entity.
func (duo *DeviceUpdateOne) AddGpu(g ...*Gpu) *DeviceUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.AddGpuIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearGpu clears all "gpu" edges to the Gpu entity.
func (duo *DeviceUpdateOne) ClearGpu() *DeviceUpdateOne {
	duo.mutation.ClearGpu()
	return duo
}

// RemoveGpuIDs removes the "gpu" edge to Gpu entities by IDs.
func (duo *DeviceUpdateOne) RemoveGpuIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveGpuIDs(ids...)
	return duo
}

// RemoveGpu removes "gpu" edges to Gpu entities.
func (duo *DeviceUpdateOne) RemoveGpu(g ...*Gpu) *DeviceUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.RemoveGpuIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DeviceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeviceUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.IP(); ok {
		_spec.SetField(device.FieldIP, field.TypeString, value)
	}
	if value, ok := duo.mutation.Port(); ok {
		_spec.SetField(device.FieldPort, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedPort(); ok {
		_spec.AddField(device.FieldPort, field.TypeInt, value)
	}
	if value, ok := duo.mutation.IsUse(); ok {
		_spec.SetField(device.FieldIsUse, field.TypeBool, value)
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(device.FieldType, field.TypeString, value)
	}
	if value, ok := duo.mutation.Connection(); ok {
		_spec.SetField(device.FieldConnection, field.TypeString, value)
	}
	if value, ok := duo.mutation.Available(); ok {
		_spec.SetField(device.FieldAvailable, field.TypeString, value)
	}
	if duo.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedGpuIDs(); len(nodes) > 0 && !duo.mutation.GpuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GpuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.GpuTable,
			Columns: []string{device.GpuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
