// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/menu"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (mc *MenuCreate) SetLabel(s string) *MenuCreate {
	mc.mutation.SetLabel(s)
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetURL sets the "url" field.
func (mc *MenuCreate) SetURL(s string) *MenuCreate {
	mc.mutation.SetURL(s)
	return mc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mc *MenuCreate) SetNillableURL(s *string) *MenuCreate {
	if s != nil {
		mc.SetURL(*s)
	}
	return mc
}

// SetIsUse sets the "is_use" field.
func (mc *MenuCreate) SetIsUse(b bool) *MenuCreate {
	mc.mutation.SetIsUse(b)
	return mc
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIsUse(b *bool) *MenuCreate {
	if b != nil {
		mc.SetIsUse(*b)
	}
	return mc
}

// SetIsTitle sets the "is_title" field.
func (mc *MenuCreate) SetIsTitle(b bool) *MenuCreate {
	mc.mutation.SetIsTitle(b)
	return mc
}

// SetNillableIsTitle sets the "is_title" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIsTitle(b *bool) *MenuCreate {
	if b != nil {
		mc.SetIsTitle(*b)
	}
	return mc
}

// SetMenuOrder sets the "menu_order" field.
func (mc *MenuCreate) SetMenuOrder(i int) *MenuCreate {
	mc.mutation.SetMenuOrder(i)
	return mc
}

// SetParentKey sets the "parent_key" field.
func (mc *MenuCreate) SetParentKey(s string) *MenuCreate {
	mc.mutation.SetParentKey(s)
	return mc
}

// SetNillableParentKey sets the "parent_key" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentKey(s *string) *MenuCreate {
	if s != nil {
		mc.SetParentKey(*s)
	}
	return mc
}

// SetGroup sets the "group" field.
func (mc *MenuCreate) SetGroup(i int) *MenuCreate {
	mc.mutation.SetGroup(i)
	return mc
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (mc *MenuCreate) SetNillableGroup(i *int) *MenuCreate {
	if i != nil {
		mc.SetGroup(*i)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(s string) *MenuCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetParentID sets the "parent" edge to the Menu entity by ID.
func (mc *MenuCreate) SetParentID(id string) *MenuCreate {
	mc.mutation.SetParentID(id)
	return mc
}

// SetNillableParentID sets the "parent" edge to the Menu entity by ID if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(id *string) *MenuCreate {
	if id != nil {
		mc = mc.SetParentID(*id)
	}
	return mc
}

// SetParent sets the "parent" edge to the Menu entity.
func (mc *MenuCreate) SetParent(m *Menu) *MenuCreate {
	return mc.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mc *MenuCreate) AddChildIDs(ids ...string) *MenuCreate {
	mc.mutation.AddChildIDs(ids...)
	return mc
}

// AddChildren adds the "children" edges to the Menu entity.
func (mc *MenuCreate) AddChildren(m ...*Menu) *MenuCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.IsUse(); !ok {
		v := menu.DefaultIsUse
		mc.mutation.SetIsUse(v)
	}
	if _, ok := mc.mutation.IsTitle(); !ok {
		v := menu.DefaultIsTitle
		mc.mutation.SetIsTitle(v)
	}
	if _, ok := mc.mutation.Group(); !ok {
		v := menu.DefaultGroup
		mc.mutation.SetGroup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if _, ok := mc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Menu.label"`)}
	}
	if _, ok := mc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "Menu.icon"`)}
	}
	if _, ok := mc.mutation.MenuOrder(); !ok {
		return &ValidationError{Name: "menu_order", err: errors.New(`ent: missing required field "Menu.menu_order"`)}
	}
	if _, ok := mc.mutation.Group(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required field "Menu.group"`)}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Menu.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Label(); ok {
		_spec.SetField(menu.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := mc.mutation.URL(); ok {
		_spec.SetField(menu.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := mc.mutation.IsUse(); ok {
		_spec.SetField(menu.FieldIsUse, field.TypeBool, value)
		_node.IsUse = value
	}
	if value, ok := mc.mutation.IsTitle(); ok {
		_spec.SetField(menu.FieldIsTitle, field.TypeBool, value)
		_node.IsTitle = value
	}
	if value, ok := mc.mutation.MenuOrder(); ok {
		_spec.SetField(menu.FieldMenuOrder, field.TypeInt, value)
		_node.MenuOrder = value
	}
	if value, ok := mc.mutation.Group(); ok {
		_spec.SetField(menu.FieldGroup, field.TypeInt, value)
		_node.Group = value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentKey = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (mc *MenuCreate) OnConflict(opts ...sql.ConflictOption) *MenuUpsertOne {
	mc.conflict = opts
	return &MenuUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MenuCreate) OnConflictColumns(columns ...string) *MenuUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertOne{
		create: mc,
	}
}

type (
	// MenuUpsertOne is the builder for "upsert"-ing
	//  one Menu node.
	MenuUpsertOne struct {
		create *MenuCreate
	}

	// MenuUpsert is the "OnConflict" setter.
	MenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *MenuUpsert) SetLabel(v string) *MenuUpsert {
	u.Set(menu.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *MenuUpsert) UpdateLabel() *MenuUpsert {
	u.SetExcluded(menu.FieldLabel)
	return u
}

// SetIcon sets the "icon" field.
func (u *MenuUpsert) SetIcon(v string) *MenuUpsert {
	u.Set(menu.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIcon() *MenuUpsert {
	u.SetExcluded(menu.FieldIcon)
	return u
}

// SetURL sets the "url" field.
func (u *MenuUpsert) SetURL(v string) *MenuUpsert {
	u.Set(menu.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsert) UpdateURL() *MenuUpsert {
	u.SetExcluded(menu.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsert) ClearURL() *MenuUpsert {
	u.SetNull(menu.FieldURL)
	return u
}

// SetIsUse sets the "is_use" field.
func (u *MenuUpsert) SetIsUse(v bool) *MenuUpsert {
	u.Set(menu.FieldIsUse, v)
	return u
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIsUse() *MenuUpsert {
	u.SetExcluded(menu.FieldIsUse)
	return u
}

// ClearIsUse clears the value of the "is_use" field.
func (u *MenuUpsert) ClearIsUse() *MenuUpsert {
	u.SetNull(menu.FieldIsUse)
	return u
}

// SetIsTitle sets the "is_title" field.
func (u *MenuUpsert) SetIsTitle(v bool) *MenuUpsert {
	u.Set(menu.FieldIsTitle, v)
	return u
}

// UpdateIsTitle sets the "is_title" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIsTitle() *MenuUpsert {
	u.SetExcluded(menu.FieldIsTitle)
	return u
}

// ClearIsTitle clears the value of the "is_title" field.
func (u *MenuUpsert) ClearIsTitle() *MenuUpsert {
	u.SetNull(menu.FieldIsTitle)
	return u
}

// SetMenuOrder sets the "menu_order" field.
func (u *MenuUpsert) SetMenuOrder(v int) *MenuUpsert {
	u.Set(menu.FieldMenuOrder, v)
	return u
}

// UpdateMenuOrder sets the "menu_order" field to the value that was provided on create.
func (u *MenuUpsert) UpdateMenuOrder() *MenuUpsert {
	u.SetExcluded(menu.FieldMenuOrder)
	return u
}

// AddMenuOrder adds v to the "menu_order" field.
func (u *MenuUpsert) AddMenuOrder(v int) *MenuUpsert {
	u.Add(menu.FieldMenuOrder, v)
	return u
}

// SetParentKey sets the "parent_key" field.
func (u *MenuUpsert) SetParentKey(v string) *MenuUpsert {
	u.Set(menu.FieldParentKey, v)
	return u
}

// UpdateParentKey sets the "parent_key" field to the value that was provided on create.
func (u *MenuUpsert) UpdateParentKey() *MenuUpsert {
	u.SetExcluded(menu.FieldParentKey)
	return u
}

// ClearParentKey clears the value of the "parent_key" field.
func (u *MenuUpsert) ClearParentKey() *MenuUpsert {
	u.SetNull(menu.FieldParentKey)
	return u
}

// SetGroup sets the "group" field.
func (u *MenuUpsert) SetGroup(v int) *MenuUpsert {
	u.Set(menu.FieldGroup, v)
	return u
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *MenuUpsert) UpdateGroup() *MenuUpsert {
	u.SetExcluded(menu.FieldGroup)
	return u
}

// AddGroup adds v to the "group" field.
func (u *MenuUpsert) AddGroup(v int) *MenuUpsert {
	u.Add(menu.FieldGroup, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertOne) UpdateNewValues() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(menu.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MenuUpsertOne) Ignore() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertOne) DoNothing() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreate.OnConflict
// documentation for more info.
func (u *MenuUpsertOne) Update(set func(*MenuUpsert)) *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *MenuUpsertOne) SetLabel(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateLabel() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateLabel()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertOne) SetIcon(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// SetURL sets the "url" field.
func (u *MenuUpsertOne) SetURL(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsertOne) ClearURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearURL()
	})
}

// SetIsUse sets the "is_use" field.
func (u *MenuUpsertOne) SetIsUse(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIsUse() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsUse()
	})
}

// ClearIsUse clears the value of the "is_use" field.
func (u *MenuUpsertOne) ClearIsUse() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsUse()
	})
}

// SetIsTitle sets the "is_title" field.
func (u *MenuUpsertOne) SetIsTitle(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsTitle(v)
	})
}

// UpdateIsTitle sets the "is_title" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIsTitle() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsTitle()
	})
}

// ClearIsTitle clears the value of the "is_title" field.
func (u *MenuUpsertOne) ClearIsTitle() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsTitle()
	})
}

// SetMenuOrder sets the "menu_order" field.
func (u *MenuUpsertOne) SetMenuOrder(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetMenuOrder(v)
	})
}

// AddMenuOrder adds v to the "menu_order" field.
func (u *MenuUpsertOne) AddMenuOrder(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddMenuOrder(v)
	})
}

// UpdateMenuOrder sets the "menu_order" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateMenuOrder() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMenuOrder()
	})
}

// SetParentKey sets the "parent_key" field.
func (u *MenuUpsertOne) SetParentKey(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentKey(v)
	})
}

// UpdateParentKey sets the "parent_key" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateParentKey() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentKey()
	})
}

// ClearParentKey clears the value of the "parent_key" field.
func (u *MenuUpsertOne) ClearParentKey() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentKey()
	})
}

// SetGroup sets the "group" field.
func (u *MenuUpsertOne) SetGroup(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetGroup(v)
	})
}

// AddGroup adds v to the "group" field.
func (u *MenuUpsertOne) AddGroup(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateGroup() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateGroup()
	})
}

// Exec executes the query.
func (u *MenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MenuUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MenuUpsertOne.ID is not supported by MySQL driver. Use MenuUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MenuUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
	conflict []sql.ConflictOption
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *MenuUpsertBulk {
	mcb.conflict = opts
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflictColumns(columns ...string) *MenuUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// MenuUpsertBulk is the builder for "upsert"-ing
// a bulk of Menu nodes.
type MenuUpsertBulk struct {
	create *MenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertBulk) UpdateNewValues() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(menu.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MenuUpsertBulk) Ignore() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertBulk) DoNothing() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreateBulk.OnConflict
// documentation for more info.
func (u *MenuUpsertBulk) Update(set func(*MenuUpsert)) *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *MenuUpsertBulk) SetLabel(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateLabel() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateLabel()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertBulk) SetIcon(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// SetURL sets the "url" field.
func (u *MenuUpsertBulk) SetURL(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *MenuUpsertBulk) ClearURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearURL()
	})
}

// SetIsUse sets the "is_use" field.
func (u *MenuUpsertBulk) SetIsUse(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsUse(v)
	})
}

// UpdateIsUse sets the "is_use" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIsUse() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsUse()
	})
}

// ClearIsUse clears the value of the "is_use" field.
func (u *MenuUpsertBulk) ClearIsUse() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsUse()
	})
}

// SetIsTitle sets the "is_title" field.
func (u *MenuUpsertBulk) SetIsTitle(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsTitle(v)
	})
}

// UpdateIsTitle sets the "is_title" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIsTitle() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsTitle()
	})
}

// ClearIsTitle clears the value of the "is_title" field.
func (u *MenuUpsertBulk) ClearIsTitle() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsTitle()
	})
}

// SetMenuOrder sets the "menu_order" field.
func (u *MenuUpsertBulk) SetMenuOrder(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetMenuOrder(v)
	})
}

// AddMenuOrder adds v to the "menu_order" field.
func (u *MenuUpsertBulk) AddMenuOrder(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddMenuOrder(v)
	})
}

// UpdateMenuOrder sets the "menu_order" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateMenuOrder() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMenuOrder()
	})
}

// SetParentKey sets the "parent_key" field.
func (u *MenuUpsertBulk) SetParentKey(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentKey(v)
	})
}

// UpdateParentKey sets the "parent_key" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateParentKey() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentKey()
	})
}

// ClearParentKey clears the value of the "parent_key" field.
func (u *MenuUpsertBulk) ClearParentKey() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentKey()
	})
}

// SetGroup sets the "group" field.
func (u *MenuUpsertBulk) SetGroup(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetGroup(v)
	})
}

// AddGroup adds v to the "group" field.
func (u *MenuUpsertBulk) AddGroup(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateGroup() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateGroup()
	})
}

// Exec executes the query.
func (u *MenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
