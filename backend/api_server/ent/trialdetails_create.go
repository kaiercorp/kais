// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/trialdetails"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrialDetailsCreate is the builder for creating a TrialDetails entity.
type TrialDetailsCreate struct {
	config
	mutation *TrialDetailsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTrialUUID sets the "trial_uuid" field.
func (tdc *TrialDetailsCreate) SetTrialUUID(s string) *TrialDetailsCreate {
	tdc.mutation.SetTrialUUID(s)
	return tdc
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tdc *TrialDetailsCreate) SetNillableTrialUUID(s *string) *TrialDetailsCreate {
	if s != nil {
		tdc.SetTrialUUID(*s)
	}
	return tdc
}

// SetModel sets the "model" field.
func (tdc *TrialDetailsCreate) SetModel(s string) *TrialDetailsCreate {
	tdc.mutation.SetModel(s)
	return tdc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tdc *TrialDetailsCreate) SetNillableModel(s *string) *TrialDetailsCreate {
	if s != nil {
		tdc.SetModel(*s)
	}
	return tdc
}

// SetDataType sets the "data_type" field.
func (tdc *TrialDetailsCreate) SetDataType(s string) *TrialDetailsCreate {
	tdc.mutation.SetDataType(s)
	return tdc
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (tdc *TrialDetailsCreate) SetNillableDataType(s *string) *TrialDetailsCreate {
	if s != nil {
		tdc.SetDataType(*s)
	}
	return tdc
}

// SetData sets the "data" field.
func (tdc *TrialDetailsCreate) SetData(s []string) *TrialDetailsCreate {
	tdc.mutation.SetData(s)
	return tdc
}

// SetIsModelSaved sets the "is_model_saved" field.
func (tdc *TrialDetailsCreate) SetIsModelSaved(b bool) *TrialDetailsCreate {
	tdc.mutation.SetIsModelSaved(b)
	return tdc
}

// SetNillableIsModelSaved sets the "is_model_saved" field if the given value is not nil.
func (tdc *TrialDetailsCreate) SetNillableIsModelSaved(b *bool) *TrialDetailsCreate {
	if b != nil {
		tdc.SetIsModelSaved(*b)
	}
	return tdc
}

// SetCreatedAt sets the "created_at" field.
func (tdc *TrialDetailsCreate) SetCreatedAt(t time.Time) *TrialDetailsCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *TrialDetailsCreate) SetNillableCreatedAt(t *time.Time) *TrialDetailsCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TrialDetailsCreate) SetID(i int) *TrialDetailsCreate {
	tdc.mutation.SetID(i)
	return tdc
}

// Mutation returns the TrialDetailsMutation object of the builder.
func (tdc *TrialDetailsCreate) Mutation() *TrialDetailsMutation {
	return tdc.mutation
}

// Save creates the TrialDetails in the database.
func (tdc *TrialDetailsCreate) Save(ctx context.Context) (*TrialDetails, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TrialDetailsCreate) SaveX(ctx context.Context) *TrialDetails {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TrialDetailsCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TrialDetailsCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TrialDetailsCreate) defaults() {
	if _, ok := tdc.mutation.Model(); !ok {
		v := trialdetails.DefaultModel
		tdc.mutation.SetModel(v)
	}
	if _, ok := tdc.mutation.DataType(); !ok {
		v := trialdetails.DefaultDataType
		tdc.mutation.SetDataType(v)
	}
	if _, ok := tdc.mutation.Data(); !ok {
		v := trialdetails.DefaultData
		tdc.mutation.SetData(v)
	}
	if _, ok := tdc.mutation.IsModelSaved(); !ok {
		v := trialdetails.DefaultIsModelSaved
		tdc.mutation.SetIsModelSaved(v)
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := trialdetails.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TrialDetailsCreate) check() error {
	if _, ok := tdc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "TrialDetails.model"`)}
	}
	if _, ok := tdc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "TrialDetails.data_type"`)}
	}
	if _, ok := tdc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "TrialDetails.data"`)}
	}
	if _, ok := tdc.mutation.IsModelSaved(); !ok {
		return &ValidationError{Name: "is_model_saved", err: errors.New(`ent: missing required field "TrialDetails.is_model_saved"`)}
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TrialDetails.created_at"`)}
	}
	return nil
}

func (tdc *TrialDetailsCreate) sqlSave(ctx context.Context) (*TrialDetails, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TrialDetailsCreate) createSpec() (*TrialDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &TrialDetails{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(trialdetails.Table, sqlgraph.NewFieldSpec(trialdetails.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tdc.conflict
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.TrialUUID(); ok {
		_spec.SetField(trialdetails.FieldTrialUUID, field.TypeString, value)
		_node.TrialUUID = value
	}
	if value, ok := tdc.mutation.Model(); ok {
		_spec.SetField(trialdetails.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := tdc.mutation.DataType(); ok {
		_spec.SetField(trialdetails.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := tdc.mutation.Data(); ok {
		_spec.SetField(trialdetails.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := tdc.mutation.IsModelSaved(); ok {
		_spec.SetField(trialdetails.FieldIsModelSaved, field.TypeBool, value)
		_node.IsModelSaved = value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(trialdetails.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrialDetails.Create().
//		SetTrialUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialDetailsUpsert) {
//			SetTrialUUID(v+v).
//		}).
//		Exec(ctx)
func (tdc *TrialDetailsCreate) OnConflict(opts ...sql.ConflictOption) *TrialDetailsUpsertOne {
	tdc.conflict = opts
	return &TrialDetailsUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TrialDetailsCreate) OnConflictColumns(columns ...string) *TrialDetailsUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TrialDetailsUpsertOne{
		create: tdc,
	}
}

type (
	// TrialDetailsUpsertOne is the builder for "upsert"-ing
	//  one TrialDetails node.
	TrialDetailsUpsertOne struct {
		create *TrialDetailsCreate
	}

	// TrialDetailsUpsert is the "OnConflict" setter.
	TrialDetailsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialDetailsUpsert) SetTrialUUID(v string) *TrialDetailsUpsert {
	u.Set(trialdetails.FieldTrialUUID, v)
	return u
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialDetailsUpsert) UpdateTrialUUID() *TrialDetailsUpsert {
	u.SetExcluded(trialdetails.FieldTrialUUID)
	return u
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialDetailsUpsert) ClearTrialUUID() *TrialDetailsUpsert {
	u.SetNull(trialdetails.FieldTrialUUID)
	return u
}

// SetModel sets the "model" field.
func (u *TrialDetailsUpsert) SetModel(v string) *TrialDetailsUpsert {
	u.Set(trialdetails.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TrialDetailsUpsert) UpdateModel() *TrialDetailsUpsert {
	u.SetExcluded(trialdetails.FieldModel)
	return u
}

// SetDataType sets the "data_type" field.
func (u *TrialDetailsUpsert) SetDataType(v string) *TrialDetailsUpsert {
	u.Set(trialdetails.FieldDataType, v)
	return u
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *TrialDetailsUpsert) UpdateDataType() *TrialDetailsUpsert {
	u.SetExcluded(trialdetails.FieldDataType)
	return u
}

// SetData sets the "data" field.
func (u *TrialDetailsUpsert) SetData(v []string) *TrialDetailsUpsert {
	u.Set(trialdetails.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TrialDetailsUpsert) UpdateData() *TrialDetailsUpsert {
	u.SetExcluded(trialdetails.FieldData)
	return u
}

// SetIsModelSaved sets the "is_model_saved" field.
func (u *TrialDetailsUpsert) SetIsModelSaved(v bool) *TrialDetailsUpsert {
	u.Set(trialdetails.FieldIsModelSaved, v)
	return u
}

// UpdateIsModelSaved sets the "is_model_saved" field to the value that was provided on create.
func (u *TrialDetailsUpsert) UpdateIsModelSaved() *TrialDetailsUpsert {
	u.SetExcluded(trialdetails.FieldIsModelSaved)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trialdetails.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialDetailsUpsertOne) UpdateNewValues() *TrialDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(trialdetails.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trialdetails.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrialDetailsUpsertOne) Ignore() *TrialDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialDetailsUpsertOne) DoNothing() *TrialDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialDetailsCreate.OnConflict
// documentation for more info.
func (u *TrialDetailsUpsertOne) Update(set func(*TrialDetailsUpsert)) *TrialDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialDetailsUpsertOne) SetTrialUUID(v string) *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialDetailsUpsertOne) UpdateTrialUUID() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateTrialUUID()
	})
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialDetailsUpsertOne) ClearTrialUUID() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.ClearTrialUUID()
	})
}

// SetModel sets the "model" field.
func (u *TrialDetailsUpsertOne) SetModel(v string) *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TrialDetailsUpsertOne) UpdateModel() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateModel()
	})
}

// SetDataType sets the "data_type" field.
func (u *TrialDetailsUpsertOne) SetDataType(v string) *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *TrialDetailsUpsertOne) UpdateDataType() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *TrialDetailsUpsertOne) SetData(v []string) *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TrialDetailsUpsertOne) UpdateData() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateData()
	})
}

// SetIsModelSaved sets the "is_model_saved" field.
func (u *TrialDetailsUpsertOne) SetIsModelSaved(v bool) *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetIsModelSaved(v)
	})
}

// UpdateIsModelSaved sets the "is_model_saved" field to the value that was provided on create.
func (u *TrialDetailsUpsertOne) UpdateIsModelSaved() *TrialDetailsUpsertOne {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateIsModelSaved()
	})
}

// Exec executes the query.
func (u *TrialDetailsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialDetailsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialDetailsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrialDetailsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrialDetailsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrialDetailsCreateBulk is the builder for creating many TrialDetails entities in bulk.
type TrialDetailsCreateBulk struct {
	config
	err      error
	builders []*TrialDetailsCreate
	conflict []sql.ConflictOption
}

// Save creates the TrialDetails entities in the database.
func (tdcb *TrialDetailsCreateBulk) Save(ctx context.Context) ([]*TrialDetails, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TrialDetails, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrialDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TrialDetailsCreateBulk) SaveX(ctx context.Context) []*TrialDetails {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TrialDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TrialDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrialDetails.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrialDetailsUpsert) {
//			SetTrialUUID(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TrialDetailsCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrialDetailsUpsertBulk {
	tdcb.conflict = opts
	return &TrialDetailsUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TrialDetailsCreateBulk) OnConflictColumns(columns ...string) *TrialDetailsUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TrialDetailsUpsertBulk{
		create: tdcb,
	}
}

// TrialDetailsUpsertBulk is the builder for "upsert"-ing
// a bulk of TrialDetails nodes.
type TrialDetailsUpsertBulk struct {
	create *TrialDetailsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(trialdetails.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TrialDetailsUpsertBulk) UpdateNewValues() *TrialDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(trialdetails.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trialdetails.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrialDetails.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrialDetailsUpsertBulk) Ignore() *TrialDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrialDetailsUpsertBulk) DoNothing() *TrialDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrialDetailsCreateBulk.OnConflict
// documentation for more info.
func (u *TrialDetailsUpsertBulk) Update(set func(*TrialDetailsUpsert)) *TrialDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrialDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTrialUUID sets the "trial_uuid" field.
func (u *TrialDetailsUpsertBulk) SetTrialUUID(v string) *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetTrialUUID(v)
	})
}

// UpdateTrialUUID sets the "trial_uuid" field to the value that was provided on create.
func (u *TrialDetailsUpsertBulk) UpdateTrialUUID() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateTrialUUID()
	})
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (u *TrialDetailsUpsertBulk) ClearTrialUUID() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.ClearTrialUUID()
	})
}

// SetModel sets the "model" field.
func (u *TrialDetailsUpsertBulk) SetModel(v string) *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *TrialDetailsUpsertBulk) UpdateModel() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateModel()
	})
}

// SetDataType sets the "data_type" field.
func (u *TrialDetailsUpsertBulk) SetDataType(v string) *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *TrialDetailsUpsertBulk) UpdateDataType() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *TrialDetailsUpsertBulk) SetData(v []string) *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TrialDetailsUpsertBulk) UpdateData() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateData()
	})
}

// SetIsModelSaved sets the "is_model_saved" field.
func (u *TrialDetailsUpsertBulk) SetIsModelSaved(v bool) *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.SetIsModelSaved(v)
	})
}

// UpdateIsModelSaved sets the "is_model_saved" field to the value that was provided on create.
func (u *TrialDetailsUpsertBulk) UpdateIsModelSaved() *TrialDetailsUpsertBulk {
	return u.Update(func(s *TrialDetailsUpsert) {
		s.UpdateIsModelSaved()
	})
}

// Exec executes the query.
func (u *TrialDetailsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrialDetailsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrialDetailsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrialDetailsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
