// Code generated by ent, DO NOT EDIT.

package modelingdetails

import (
	"api_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLTE(FieldID, id))
}

// ModelingID applies equality check predicate on the "modeling_id" field. It's identical to ModelingIDEQ.
func ModelingID(v int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldModelingID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldModel, v))
}

// DataType applies equality check predicate on the "data_type" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldDataType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// ModelingIDEQ applies the EQ predicate on the "modeling_id" field.
func ModelingIDEQ(v int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldModelingID, v))
}

// ModelingIDNEQ applies the NEQ predicate on the "modeling_id" field.
func ModelingIDNEQ(v int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNEQ(FieldModelingID, v))
}

// ModelingIDIn applies the In predicate on the "modeling_id" field.
func ModelingIDIn(vs ...int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIn(FieldModelingID, vs...))
}

// ModelingIDNotIn applies the NotIn predicate on the "modeling_id" field.
func ModelingIDNotIn(vs ...int) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotIn(FieldModelingID, vs...))
}

// ModelingIDIsNil applies the IsNil predicate on the "modeling_id" field.
func ModelingIDIsNil() predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIsNull(FieldModelingID))
}

// ModelingIDNotNil applies the NotNil predicate on the "modeling_id" field.
func ModelingIDNotNil() predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotNull(FieldModelingID))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldContainsFold(FieldModel, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotIn(FieldDataType, vs...))
}

// DataTypeGT applies the GT predicate on the "data_type" field.
func DataTypeGT(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGT(FieldDataType, v))
}

// DataTypeGTE applies the GTE predicate on the "data_type" field.
func DataTypeGTE(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGTE(FieldDataType, v))
}

// DataTypeLT applies the LT predicate on the "data_type" field.
func DataTypeLT(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLT(FieldDataType, v))
}

// DataTypeLTE applies the LTE predicate on the "data_type" field.
func DataTypeLTE(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLTE(FieldDataType, v))
}

// DataTypeContains applies the Contains predicate on the "data_type" field.
func DataTypeContains(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldContains(FieldDataType, v))
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "data_type" field.
func DataTypeHasPrefix(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldHasPrefix(FieldDataType, v))
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "data_type" field.
func DataTypeHasSuffix(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldHasSuffix(FieldDataType, v))
}

// DataTypeEqualFold applies the EqualFold predicate on the "data_type" field.
func DataTypeEqualFold(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEqualFold(FieldDataType, v))
}

// DataTypeContainsFold applies the ContainsFold predicate on the "data_type" field.
func DataTypeContainsFold(v string) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldContainsFold(FieldDataType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// HasModeling applies the HasEdge predicate on the "modeling" edge.
func HasModeling() predicate.ModelingDetails {
	return predicate.ModelingDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelingTable, ModelingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelingWith applies the HasEdge predicate on the "modeling" edge with a given conditions (other predicates).
func HasModelingWith(preds ...predicate.Modeling) predicate.ModelingDetails {
	return predicate.ModelingDetails(func(s *sql.Selector) {
		step := newModelingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ModelingDetails) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ModelingDetails) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModelingDetails) predicate.ModelingDetails {
	return predicate.ModelingDetails(sql.NotPredicates(p))
}
