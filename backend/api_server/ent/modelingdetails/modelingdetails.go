// Code generated by ent, DO NOT EDIT.

package modelingdetails

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the modelingdetails type in the database.
	Label = "modeling_details"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelingID holds the string denoting the modeling_id field in the database.
	FieldModelingID = "modeling_id"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeModeling holds the string denoting the modeling edge name in mutations.
	EdgeModeling = "modeling"
	// Table holds the table name of the modelingdetails in the database.
	Table = "modeling_details"
	// ModelingTable is the table that holds the modeling relation/edge.
	ModelingTable = "modeling_details"
	// ModelingInverseTable is the table name for the Modeling entity.
	// It exists in this package in order to avoid circular dependency with the "modeling" package.
	ModelingInverseTable = "modeling"
	// ModelingColumn is the table column denoting the modeling relation/edge.
	ModelingColumn = "modeling_id"
)

// Columns holds all SQL columns for modelingdetails fields.
var Columns = []string{
	FieldID,
	FieldModelingID,
	FieldModel,
	FieldDataType,
	FieldData,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelingID holds the default value on creation for the "modeling_id" field.
	DefaultModelingID int
	// DefaultModel holds the default value on creation for the "model" field.
	DefaultModel string
	// DefaultDataType holds the default value on creation for the "data_type" field.
	DefaultDataType string
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData []string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ModelingDetails queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelingID orders the results by the modeling_id field.
func ByModelingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelingID, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModelingField orders the results by modeling field.
func ByModelingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelingStep(), sql.OrderByField(field, opts...))
	}
}
func newModelingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelingTable, ModelingColumn),
	)
}
