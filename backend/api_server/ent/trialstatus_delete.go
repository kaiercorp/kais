// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/predicate"
	"api_server/ent/trialstatus"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrialStatusDelete is the builder for deleting a TrialStatus entity.
type TrialStatusDelete struct {
	config
	hooks    []Hook
	mutation *TrialStatusMutation
}

// Where appends a list predicates to the TrialStatusDelete builder.
func (tsd *TrialStatusDelete) Where(ps ...predicate.TrialStatus) *TrialStatusDelete {
	tsd.mutation.Where(ps...)
	return tsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tsd *TrialStatusDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tsd.sqlExec, tsd.mutation, tsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tsd *TrialStatusDelete) ExecX(ctx context.Context) int {
	n, err := tsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tsd *TrialStatusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(trialstatus.Table, sqlgraph.NewFieldSpec(trialstatus.FieldID, field.TypeInt))
	if ps := tsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tsd.mutation.done = true
	return affected, err
}

// TrialStatusDeleteOne is the builder for deleting a single TrialStatus entity.
type TrialStatusDeleteOne struct {
	tsd *TrialStatusDelete
}

// Where appends a list predicates to the TrialStatusDelete builder.
func (tsdo *TrialStatusDeleteOne) Where(ps ...predicate.TrialStatus) *TrialStatusDeleteOne {
	tsdo.tsd.mutation.Where(ps...)
	return tsdo
}

// Exec executes the deletion query.
func (tsdo *TrialStatusDeleteOne) Exec(ctx context.Context) error {
	n, err := tsdo.tsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{trialstatus.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tsdo *TrialStatusDeleteOne) ExecX(ctx context.Context) {
	if err := tsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
