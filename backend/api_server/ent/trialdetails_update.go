// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/predicate"
	"api_server/ent/trialdetails"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TrialDetailsUpdate is the builder for updating TrialDetails entities.
type TrialDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *TrialDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrialDetailsUpdate builder.
func (tdu *TrialDetailsUpdate) Where(ps ...predicate.TrialDetails) *TrialDetailsUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetTrialUUID sets the "trial_uuid" field.
func (tdu *TrialDetailsUpdate) SetTrialUUID(s string) *TrialDetailsUpdate {
	tdu.mutation.SetTrialUUID(s)
	return tdu
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tdu *TrialDetailsUpdate) SetNillableTrialUUID(s *string) *TrialDetailsUpdate {
	if s != nil {
		tdu.SetTrialUUID(*s)
	}
	return tdu
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (tdu *TrialDetailsUpdate) ClearTrialUUID() *TrialDetailsUpdate {
	tdu.mutation.ClearTrialUUID()
	return tdu
}

// SetModel sets the "model" field.
func (tdu *TrialDetailsUpdate) SetModel(s string) *TrialDetailsUpdate {
	tdu.mutation.SetModel(s)
	return tdu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tdu *TrialDetailsUpdate) SetNillableModel(s *string) *TrialDetailsUpdate {
	if s != nil {
		tdu.SetModel(*s)
	}
	return tdu
}

// SetDataType sets the "data_type" field.
func (tdu *TrialDetailsUpdate) SetDataType(s string) *TrialDetailsUpdate {
	tdu.mutation.SetDataType(s)
	return tdu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (tdu *TrialDetailsUpdate) SetNillableDataType(s *string) *TrialDetailsUpdate {
	if s != nil {
		tdu.SetDataType(*s)
	}
	return tdu
}

// SetData sets the "data" field.
func (tdu *TrialDetailsUpdate) SetData(s []string) *TrialDetailsUpdate {
	tdu.mutation.SetData(s)
	return tdu
}

// AppendData appends s to the "data" field.
func (tdu *TrialDetailsUpdate) AppendData(s []string) *TrialDetailsUpdate {
	tdu.mutation.AppendData(s)
	return tdu
}

// SetIsModelSaved sets the "is_model_saved" field.
func (tdu *TrialDetailsUpdate) SetIsModelSaved(b bool) *TrialDetailsUpdate {
	tdu.mutation.SetIsModelSaved(b)
	return tdu
}

// SetNillableIsModelSaved sets the "is_model_saved" field if the given value is not nil.
func (tdu *TrialDetailsUpdate) SetNillableIsModelSaved(b *bool) *TrialDetailsUpdate {
	if b != nil {
		tdu.SetIsModelSaved(*b)
	}
	return tdu
}

// Mutation returns the TrialDetailsMutation object of the builder.
func (tdu *TrialDetailsUpdate) Mutation() *TrialDetailsMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TrialDetailsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TrialDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TrialDetailsUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TrialDetailsUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tdu *TrialDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialDetailsUpdate {
	tdu.modifiers = append(tdu.modifiers, modifiers...)
	return tdu
}

func (tdu *TrialDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trialdetails.Table, trialdetails.Columns, sqlgraph.NewFieldSpec(trialdetails.FieldID, field.TypeInt))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TrialUUID(); ok {
		_spec.SetField(trialdetails.FieldTrialUUID, field.TypeString, value)
	}
	if tdu.mutation.TrialUUIDCleared() {
		_spec.ClearField(trialdetails.FieldTrialUUID, field.TypeString)
	}
	if value, ok := tdu.mutation.Model(); ok {
		_spec.SetField(trialdetails.FieldModel, field.TypeString, value)
	}
	if value, ok := tdu.mutation.DataType(); ok {
		_spec.SetField(trialdetails.FieldDataType, field.TypeString, value)
	}
	if value, ok := tdu.mutation.Data(); ok {
		_spec.SetField(trialdetails.FieldData, field.TypeJSON, value)
	}
	if value, ok := tdu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trialdetails.FieldData, value)
		})
	}
	if value, ok := tdu.mutation.IsModelSaved(); ok {
		_spec.SetField(trialdetails.FieldIsModelSaved, field.TypeBool, value)
	}
	_spec.AddModifiers(tdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trialdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TrialDetailsUpdateOne is the builder for updating a single TrialDetails entity.
type TrialDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrialDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTrialUUID sets the "trial_uuid" field.
func (tduo *TrialDetailsUpdateOne) SetTrialUUID(s string) *TrialDetailsUpdateOne {
	tduo.mutation.SetTrialUUID(s)
	return tduo
}

// SetNillableTrialUUID sets the "trial_uuid" field if the given value is not nil.
func (tduo *TrialDetailsUpdateOne) SetNillableTrialUUID(s *string) *TrialDetailsUpdateOne {
	if s != nil {
		tduo.SetTrialUUID(*s)
	}
	return tduo
}

// ClearTrialUUID clears the value of the "trial_uuid" field.
func (tduo *TrialDetailsUpdateOne) ClearTrialUUID() *TrialDetailsUpdateOne {
	tduo.mutation.ClearTrialUUID()
	return tduo
}

// SetModel sets the "model" field.
func (tduo *TrialDetailsUpdateOne) SetModel(s string) *TrialDetailsUpdateOne {
	tduo.mutation.SetModel(s)
	return tduo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (tduo *TrialDetailsUpdateOne) SetNillableModel(s *string) *TrialDetailsUpdateOne {
	if s != nil {
		tduo.SetModel(*s)
	}
	return tduo
}

// SetDataType sets the "data_type" field.
func (tduo *TrialDetailsUpdateOne) SetDataType(s string) *TrialDetailsUpdateOne {
	tduo.mutation.SetDataType(s)
	return tduo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (tduo *TrialDetailsUpdateOne) SetNillableDataType(s *string) *TrialDetailsUpdateOne {
	if s != nil {
		tduo.SetDataType(*s)
	}
	return tduo
}

// SetData sets the "data" field.
func (tduo *TrialDetailsUpdateOne) SetData(s []string) *TrialDetailsUpdateOne {
	tduo.mutation.SetData(s)
	return tduo
}

// AppendData appends s to the "data" field.
func (tduo *TrialDetailsUpdateOne) AppendData(s []string) *TrialDetailsUpdateOne {
	tduo.mutation.AppendData(s)
	return tduo
}

// SetIsModelSaved sets the "is_model_saved" field.
func (tduo *TrialDetailsUpdateOne) SetIsModelSaved(b bool) *TrialDetailsUpdateOne {
	tduo.mutation.SetIsModelSaved(b)
	return tduo
}

// SetNillableIsModelSaved sets the "is_model_saved" field if the given value is not nil.
func (tduo *TrialDetailsUpdateOne) SetNillableIsModelSaved(b *bool) *TrialDetailsUpdateOne {
	if b != nil {
		tduo.SetIsModelSaved(*b)
	}
	return tduo
}

// Mutation returns the TrialDetailsMutation object of the builder.
func (tduo *TrialDetailsUpdateOne) Mutation() *TrialDetailsMutation {
	return tduo.mutation
}

// Where appends a list predicates to the TrialDetailsUpdate builder.
func (tduo *TrialDetailsUpdateOne) Where(ps ...predicate.TrialDetails) *TrialDetailsUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TrialDetailsUpdateOne) Select(field string, fields ...string) *TrialDetailsUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TrialDetails entity.
func (tduo *TrialDetailsUpdateOne) Save(ctx context.Context) (*TrialDetails, error) {
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TrialDetailsUpdateOne) SaveX(ctx context.Context) *TrialDetails {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TrialDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TrialDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tduo *TrialDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrialDetailsUpdateOne {
	tduo.modifiers = append(tduo.modifiers, modifiers...)
	return tduo
}

func (tduo *TrialDetailsUpdateOne) sqlSave(ctx context.Context) (_node *TrialDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(trialdetails.Table, trialdetails.Columns, sqlgraph.NewFieldSpec(trialdetails.FieldID, field.TypeInt))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TrialDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trialdetails.FieldID)
		for _, f := range fields {
			if !trialdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trialdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TrialUUID(); ok {
		_spec.SetField(trialdetails.FieldTrialUUID, field.TypeString, value)
	}
	if tduo.mutation.TrialUUIDCleared() {
		_spec.ClearField(trialdetails.FieldTrialUUID, field.TypeString)
	}
	if value, ok := tduo.mutation.Model(); ok {
		_spec.SetField(trialdetails.FieldModel, field.TypeString, value)
	}
	if value, ok := tduo.mutation.DataType(); ok {
		_spec.SetField(trialdetails.FieldDataType, field.TypeString, value)
	}
	if value, ok := tduo.mutation.Data(); ok {
		_spec.SetField(trialdetails.FieldData, field.TypeJSON, value)
	}
	if value, ok := tduo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trialdetails.FieldData, value)
		})
	}
	if value, ok := tduo.mutation.IsModelSaved(); ok {
		_spec.SetField(trialdetails.FieldIsModelSaved, field.TypeBool, value)
	}
	_spec.AddModifiers(tduo.modifiers...)
	_node = &TrialDetails{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trialdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
