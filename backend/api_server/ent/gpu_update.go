// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/device"
	"api_server/ent/gpu"
	"api_server/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GpuUpdate is the builder for updating Gpu entities.
type GpuUpdate struct {
	config
	hooks     []Hook
	mutation  *GpuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GpuUpdate builder.
func (gu *GpuUpdate) Where(ps ...predicate.Gpu) *GpuUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUUID sets the "uuid" field.
func (gu *GpuUpdate) SetUUID(s string) *GpuUpdate {
	gu.mutation.SetUUID(s)
	return gu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableUUID(s *string) *GpuUpdate {
	if s != nil {
		gu.SetUUID(*s)
	}
	return gu
}

// SetIndex sets the "index" field.
func (gu *GpuUpdate) SetIndex(i int) *GpuUpdate {
	gu.mutation.ResetIndex()
	gu.mutation.SetIndex(i)
	return gu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableIndex(i *int) *GpuUpdate {
	if i != nil {
		gu.SetIndex(*i)
	}
	return gu
}

// AddIndex adds i to the "index" field.
func (gu *GpuUpdate) AddIndex(i int) *GpuUpdate {
	gu.mutation.AddIndex(i)
	return gu
}

// SetName sets the "name" field.
func (gu *GpuUpdate) SetName(s string) *GpuUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableName(s *string) *GpuUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetState sets the "state" field.
func (gu *GpuUpdate) SetState(s string) *GpuUpdate {
	gu.mutation.SetState(s)
	return gu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableState(s *string) *GpuUpdate {
	if s != nil {
		gu.SetState(*s)
	}
	return gu
}

// SetIsUse sets the "is_use" field.
func (gu *GpuUpdate) SetIsUse(b bool) *GpuUpdate {
	gu.mutation.SetIsUse(b)
	return gu
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableIsUse(b *bool) *GpuUpdate {
	if b != nil {
		gu.SetIsUse(*b)
	}
	return gu
}

// SetDeviceID sets the "device_id" field.
func (gu *GpuUpdate) SetDeviceID(i int) *GpuUpdate {
	gu.mutation.SetDeviceID(i)
	return gu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (gu *GpuUpdate) SetNillableDeviceID(i *int) *GpuUpdate {
	if i != nil {
		gu.SetDeviceID(*i)
	}
	return gu
}

// ClearDeviceID clears the value of the "device_id" field.
func (gu *GpuUpdate) ClearDeviceID() *GpuUpdate {
	gu.mutation.ClearDeviceID()
	return gu
}

// SetDevice sets the "device" edge to the Device entity.
func (gu *GpuUpdate) SetDevice(d *Device) *GpuUpdate {
	return gu.SetDeviceID(d.ID)
}

// Mutation returns the GpuMutation object of the builder.
func (gu *GpuUpdate) Mutation() *GpuMutation {
	return gu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (gu *GpuUpdate) ClearDevice() *GpuUpdate {
	gu.mutation.ClearDevice()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GpuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GpuUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GpuUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GpuUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GpuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GpuUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gpu.Table, gpu.Columns, sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UUID(); ok {
		_spec.SetField(gpu.FieldUUID, field.TypeString, value)
	}
	if value, ok := gu.mutation.Index(); ok {
		_spec.SetField(gpu.FieldIndex, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedIndex(); ok {
		_spec.AddField(gpu.FieldIndex, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(gpu.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.State(); ok {
		_spec.SetField(gpu.FieldState, field.TypeString, value)
	}
	if value, ok := gu.mutation.IsUse(); ok {
		_spec.SetField(gpu.FieldIsUse, field.TypeBool, value)
	}
	if gu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gpu.DeviceTable,
			Columns: []string{gpu.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gpu.DeviceTable,
			Columns: []string{gpu.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gpu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GpuUpdateOne is the builder for updating a single Gpu entity.
type GpuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GpuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUUID sets the "uuid" field.
func (guo *GpuUpdateOne) SetUUID(s string) *GpuUpdateOne {
	guo.mutation.SetUUID(s)
	return guo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableUUID(s *string) *GpuUpdateOne {
	if s != nil {
		guo.SetUUID(*s)
	}
	return guo
}

// SetIndex sets the "index" field.
func (guo *GpuUpdateOne) SetIndex(i int) *GpuUpdateOne {
	guo.mutation.ResetIndex()
	guo.mutation.SetIndex(i)
	return guo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableIndex(i *int) *GpuUpdateOne {
	if i != nil {
		guo.SetIndex(*i)
	}
	return guo
}

// AddIndex adds i to the "index" field.
func (guo *GpuUpdateOne) AddIndex(i int) *GpuUpdateOne {
	guo.mutation.AddIndex(i)
	return guo
}

// SetName sets the "name" field.
func (guo *GpuUpdateOne) SetName(s string) *GpuUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableName(s *string) *GpuUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetState sets the "state" field.
func (guo *GpuUpdateOne) SetState(s string) *GpuUpdateOne {
	guo.mutation.SetState(s)
	return guo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableState(s *string) *GpuUpdateOne {
	if s != nil {
		guo.SetState(*s)
	}
	return guo
}

// SetIsUse sets the "is_use" field.
func (guo *GpuUpdateOne) SetIsUse(b bool) *GpuUpdateOne {
	guo.mutation.SetIsUse(b)
	return guo
}

// SetNillableIsUse sets the "is_use" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableIsUse(b *bool) *GpuUpdateOne {
	if b != nil {
		guo.SetIsUse(*b)
	}
	return guo
}

// SetDeviceID sets the "device_id" field.
func (guo *GpuUpdateOne) SetDeviceID(i int) *GpuUpdateOne {
	guo.mutation.SetDeviceID(i)
	return guo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (guo *GpuUpdateOne) SetNillableDeviceID(i *int) *GpuUpdateOne {
	if i != nil {
		guo.SetDeviceID(*i)
	}
	return guo
}

// ClearDeviceID clears the value of the "device_id" field.
func (guo *GpuUpdateOne) ClearDeviceID() *GpuUpdateOne {
	guo.mutation.ClearDeviceID()
	return guo
}

// SetDevice sets the "device" edge to the Device entity.
func (guo *GpuUpdateOne) SetDevice(d *Device) *GpuUpdateOne {
	return guo.SetDeviceID(d.ID)
}

// Mutation returns the GpuMutation object of the builder.
func (guo *GpuUpdateOne) Mutation() *GpuMutation {
	return guo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (guo *GpuUpdateOne) ClearDevice() *GpuUpdateOne {
	guo.mutation.ClearDevice()
	return guo
}

// Where appends a list predicates to the GpuUpdate builder.
func (guo *GpuUpdateOne) Where(ps ...predicate.Gpu) *GpuUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GpuUpdateOne) Select(field string, fields ...string) *GpuUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Gpu entity.
func (guo *GpuUpdateOne) Save(ctx context.Context) (*Gpu, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GpuUpdateOne) SaveX(ctx context.Context) *Gpu {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GpuUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GpuUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GpuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GpuUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GpuUpdateOne) sqlSave(ctx context.Context) (_node *Gpu, err error) {
	_spec := sqlgraph.NewUpdateSpec(gpu.Table, gpu.Columns, sqlgraph.NewFieldSpec(gpu.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Gpu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gpu.FieldID)
		for _, f := range fields {
			if !gpu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gpu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UUID(); ok {
		_spec.SetField(gpu.FieldUUID, field.TypeString, value)
	}
	if value, ok := guo.mutation.Index(); ok {
		_spec.SetField(gpu.FieldIndex, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedIndex(); ok {
		_spec.AddField(gpu.FieldIndex, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(gpu.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.State(); ok {
		_spec.SetField(gpu.FieldState, field.TypeString, value)
	}
	if value, ok := guo.mutation.IsUse(); ok {
		_spec.SetField(gpu.FieldIsUse, field.TypeBool, value)
	}
	if guo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gpu.DeviceTable,
			Columns: []string{gpu.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gpu.DeviceTable,
			Columns: []string{gpu.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(guo.modifiers...)
	_node = &Gpu{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gpu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
