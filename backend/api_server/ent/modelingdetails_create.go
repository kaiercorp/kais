// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api_server/ent/modeling"
	"api_server/ent/modelingdetails"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModelingDetailsCreate is the builder for creating a ModelingDetails entity.
type ModelingDetailsCreate struct {
	config
	mutation *ModelingDetailsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModelingID sets the "modeling_id" field.
func (mdc *ModelingDetailsCreate) SetModelingID(i int) *ModelingDetailsCreate {
	mdc.mutation.SetModelingID(i)
	return mdc
}

// SetNillableModelingID sets the "modeling_id" field if the given value is not nil.
func (mdc *ModelingDetailsCreate) SetNillableModelingID(i *int) *ModelingDetailsCreate {
	if i != nil {
		mdc.SetModelingID(*i)
	}
	return mdc
}

// SetModel sets the "model" field.
func (mdc *ModelingDetailsCreate) SetModel(s string) *ModelingDetailsCreate {
	mdc.mutation.SetModel(s)
	return mdc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (mdc *ModelingDetailsCreate) SetNillableModel(s *string) *ModelingDetailsCreate {
	if s != nil {
		mdc.SetModel(*s)
	}
	return mdc
}

// SetDataType sets the "data_type" field.
func (mdc *ModelingDetailsCreate) SetDataType(s string) *ModelingDetailsCreate {
	mdc.mutation.SetDataType(s)
	return mdc
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (mdc *ModelingDetailsCreate) SetNillableDataType(s *string) *ModelingDetailsCreate {
	if s != nil {
		mdc.SetDataType(*s)
	}
	return mdc
}

// SetData sets the "data" field.
func (mdc *ModelingDetailsCreate) SetData(s []string) *ModelingDetailsCreate {
	mdc.mutation.SetData(s)
	return mdc
}

// SetCreatedAt sets the "created_at" field.
func (mdc *ModelingDetailsCreate) SetCreatedAt(t time.Time) *ModelingDetailsCreate {
	mdc.mutation.SetCreatedAt(t)
	return mdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mdc *ModelingDetailsCreate) SetNillableCreatedAt(t *time.Time) *ModelingDetailsCreate {
	if t != nil {
		mdc.SetCreatedAt(*t)
	}
	return mdc
}

// SetID sets the "id" field.
func (mdc *ModelingDetailsCreate) SetID(i int) *ModelingDetailsCreate {
	mdc.mutation.SetID(i)
	return mdc
}

// SetModeling sets the "modeling" edge to the Modeling entity.
func (mdc *ModelingDetailsCreate) SetModeling(m *Modeling) *ModelingDetailsCreate {
	return mdc.SetModelingID(m.ID)
}

// Mutation returns the ModelingDetailsMutation object of the builder.
func (mdc *ModelingDetailsCreate) Mutation() *ModelingDetailsMutation {
	return mdc.mutation
}

// Save creates the ModelingDetails in the database.
func (mdc *ModelingDetailsCreate) Save(ctx context.Context) (*ModelingDetails, error) {
	mdc.defaults()
	return withHooks(ctx, mdc.sqlSave, mdc.mutation, mdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *ModelingDetailsCreate) SaveX(ctx context.Context) *ModelingDetails {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdc *ModelingDetailsCreate) Exec(ctx context.Context) error {
	_, err := mdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdc *ModelingDetailsCreate) ExecX(ctx context.Context) {
	if err := mdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdc *ModelingDetailsCreate) defaults() {
	if _, ok := mdc.mutation.ModelingID(); !ok {
		v := modelingdetails.DefaultModelingID
		mdc.mutation.SetModelingID(v)
	}
	if _, ok := mdc.mutation.Model(); !ok {
		v := modelingdetails.DefaultModel
		mdc.mutation.SetModel(v)
	}
	if _, ok := mdc.mutation.DataType(); !ok {
		v := modelingdetails.DefaultDataType
		mdc.mutation.SetDataType(v)
	}
	if _, ok := mdc.mutation.Data(); !ok {
		v := modelingdetails.DefaultData
		mdc.mutation.SetData(v)
	}
	if _, ok := mdc.mutation.CreatedAt(); !ok {
		v := modelingdetails.DefaultCreatedAt()
		mdc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdc *ModelingDetailsCreate) check() error {
	if _, ok := mdc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "ModelingDetails.model"`)}
	}
	if _, ok := mdc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "ModelingDetails.data_type"`)}
	}
	if _, ok := mdc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "ModelingDetails.data"`)}
	}
	if _, ok := mdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ModelingDetails.created_at"`)}
	}
	return nil
}

func (mdc *ModelingDetailsCreate) sqlSave(ctx context.Context) (*ModelingDetails, error) {
	if err := mdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mdc.mutation.id = &_node.ID
	mdc.mutation.done = true
	return _node, nil
}

func (mdc *ModelingDetailsCreate) createSpec() (*ModelingDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelingDetails{config: mdc.config}
		_spec = sqlgraph.NewCreateSpec(modelingdetails.Table, sqlgraph.NewFieldSpec(modelingdetails.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mdc.conflict
	if id, ok := mdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mdc.mutation.Model(); ok {
		_spec.SetField(modelingdetails.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := mdc.mutation.DataType(); ok {
		_spec.SetField(modelingdetails.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := mdc.mutation.Data(); ok {
		_spec.SetField(modelingdetails.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := mdc.mutation.CreatedAt(); ok {
		_spec.SetField(modelingdetails.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mdc.mutation.ModelingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelingdetails.ModelingTable,
			Columns: []string{modelingdetails.ModelingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modeling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelingDetails.Create().
//		SetModelingID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingDetailsUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (mdc *ModelingDetailsCreate) OnConflict(opts ...sql.ConflictOption) *ModelingDetailsUpsertOne {
	mdc.conflict = opts
	return &ModelingDetailsUpsertOne{
		create: mdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mdc *ModelingDetailsCreate) OnConflictColumns(columns ...string) *ModelingDetailsUpsertOne {
	mdc.conflict = append(mdc.conflict, sql.ConflictColumns(columns...))
	return &ModelingDetailsUpsertOne{
		create: mdc,
	}
}

type (
	// ModelingDetailsUpsertOne is the builder for "upsert"-ing
	//  one ModelingDetails node.
	ModelingDetailsUpsertOne struct {
		create *ModelingDetailsCreate
	}

	// ModelingDetailsUpsert is the "OnConflict" setter.
	ModelingDetailsUpsert struct {
		*sql.UpdateSet
	}
)

// SetModelingID sets the "modeling_id" field.
func (u *ModelingDetailsUpsert) SetModelingID(v int) *ModelingDetailsUpsert {
	u.Set(modelingdetails.FieldModelingID, v)
	return u
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingDetailsUpsert) UpdateModelingID() *ModelingDetailsUpsert {
	u.SetExcluded(modelingdetails.FieldModelingID)
	return u
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingDetailsUpsert) ClearModelingID() *ModelingDetailsUpsert {
	u.SetNull(modelingdetails.FieldModelingID)
	return u
}

// SetModel sets the "model" field.
func (u *ModelingDetailsUpsert) SetModel(v string) *ModelingDetailsUpsert {
	u.Set(modelingdetails.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ModelingDetailsUpsert) UpdateModel() *ModelingDetailsUpsert {
	u.SetExcluded(modelingdetails.FieldModel)
	return u
}

// SetDataType sets the "data_type" field.
func (u *ModelingDetailsUpsert) SetDataType(v string) *ModelingDetailsUpsert {
	u.Set(modelingdetails.FieldDataType, v)
	return u
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingDetailsUpsert) UpdateDataType() *ModelingDetailsUpsert {
	u.SetExcluded(modelingdetails.FieldDataType)
	return u
}

// SetData sets the "data" field.
func (u *ModelingDetailsUpsert) SetData(v []string) *ModelingDetailsUpsert {
	u.Set(modelingdetails.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingDetailsUpsert) UpdateData() *ModelingDetailsUpsert {
	u.SetExcluded(modelingdetails.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelingdetails.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingDetailsUpsertOne) UpdateNewValues() *ModelingDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(modelingdetails.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(modelingdetails.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModelingDetailsUpsertOne) Ignore() *ModelingDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingDetailsUpsertOne) DoNothing() *ModelingDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingDetailsCreate.OnConflict
// documentation for more info.
func (u *ModelingDetailsUpsertOne) Update(set func(*ModelingDetailsUpsert)) *ModelingDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *ModelingDetailsUpsertOne) SetModelingID(v int) *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingDetailsUpsertOne) UpdateModelingID() *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingDetailsUpsertOne) ClearModelingID() *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.ClearModelingID()
	})
}

// SetModel sets the "model" field.
func (u *ModelingDetailsUpsertOne) SetModel(v string) *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ModelingDetailsUpsertOne) UpdateModel() *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateModel()
	})
}

// SetDataType sets the "data_type" field.
func (u *ModelingDetailsUpsertOne) SetDataType(v string) *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingDetailsUpsertOne) UpdateDataType() *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *ModelingDetailsUpsertOne) SetData(v []string) *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingDetailsUpsertOne) UpdateData() *ModelingDetailsUpsertOne {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ModelingDetailsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingDetailsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingDetailsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModelingDetailsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModelingDetailsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModelingDetailsCreateBulk is the builder for creating many ModelingDetails entities in bulk.
type ModelingDetailsCreateBulk struct {
	config
	err      error
	builders []*ModelingDetailsCreate
	conflict []sql.ConflictOption
}

// Save creates the ModelingDetails entities in the database.
func (mdcb *ModelingDetailsCreateBulk) Save(ctx context.Context) ([]*ModelingDetails, error) {
	if mdcb.err != nil {
		return nil, mdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*ModelingDetails, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelingDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *ModelingDetailsCreateBulk) SaveX(ctx context.Context) []*ModelingDetails {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdcb *ModelingDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := mdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdcb *ModelingDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := mdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ModelingDetails.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModelingDetailsUpsert) {
//			SetModelingID(v+v).
//		}).
//		Exec(ctx)
func (mdcb *ModelingDetailsCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModelingDetailsUpsertBulk {
	mdcb.conflict = opts
	return &ModelingDetailsUpsertBulk{
		create: mdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mdcb *ModelingDetailsCreateBulk) OnConflictColumns(columns ...string) *ModelingDetailsUpsertBulk {
	mdcb.conflict = append(mdcb.conflict, sql.ConflictColumns(columns...))
	return &ModelingDetailsUpsertBulk{
		create: mdcb,
	}
}

// ModelingDetailsUpsertBulk is the builder for "upsert"-ing
// a bulk of ModelingDetails nodes.
type ModelingDetailsUpsertBulk struct {
	create *ModelingDetailsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(modelingdetails.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModelingDetailsUpsertBulk) UpdateNewValues() *ModelingDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(modelingdetails.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(modelingdetails.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ModelingDetails.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModelingDetailsUpsertBulk) Ignore() *ModelingDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModelingDetailsUpsertBulk) DoNothing() *ModelingDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModelingDetailsCreateBulk.OnConflict
// documentation for more info.
func (u *ModelingDetailsUpsertBulk) Update(set func(*ModelingDetailsUpsert)) *ModelingDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModelingDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetModelingID sets the "modeling_id" field.
func (u *ModelingDetailsUpsertBulk) SetModelingID(v int) *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetModelingID(v)
	})
}

// UpdateModelingID sets the "modeling_id" field to the value that was provided on create.
func (u *ModelingDetailsUpsertBulk) UpdateModelingID() *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateModelingID()
	})
}

// ClearModelingID clears the value of the "modeling_id" field.
func (u *ModelingDetailsUpsertBulk) ClearModelingID() *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.ClearModelingID()
	})
}

// SetModel sets the "model" field.
func (u *ModelingDetailsUpsertBulk) SetModel(v string) *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ModelingDetailsUpsertBulk) UpdateModel() *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateModel()
	})
}

// SetDataType sets the "data_type" field.
func (u *ModelingDetailsUpsertBulk) SetDataType(v string) *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetDataType(v)
	})
}

// UpdateDataType sets the "data_type" field to the value that was provided on create.
func (u *ModelingDetailsUpsertBulk) UpdateDataType() *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateDataType()
	})
}

// SetData sets the "data" field.
func (u *ModelingDetailsUpsertBulk) SetData(v []string) *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ModelingDetailsUpsertBulk) UpdateData() *ModelingDetailsUpsertBulk {
	return u.Update(func(s *ModelingDetailsUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ModelingDetailsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ModelingDetailsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModelingDetailsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModelingDetailsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
